/* 
 * E-commerce API
 *
 * API for E-commerce Platform
 *
 * OpenAPI spec version: 1.0.0
 * Contact: brandon.dunbar97@gmail.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;
namespace IO.Swagger.Model
{
    /// <summary>
    /// UserIdBansBody
    /// </summary>
    [DataContract]
        public partial class UserIdBansBody :  IEquatable<UserIdBansBody>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UserIdBansBody" /> class.
        /// </summary>
        /// <param name="reason">Reason for banning the user..</param>
        /// <param name="duration">Optional end date/time for the ban. If not provided, the ban is indefinite..</param>
        public UserIdBansBody(string reason = default(string), DateTime? duration = default(DateTime?))
        {
            this.Reason = reason;
            this.Duration = duration;
        }
        
        /// <summary>
        /// Reason for banning the user.
        /// </summary>
        /// <value>Reason for banning the user.</value>
        [DataMember(Name="reason", EmitDefaultValue=false)]
        public string Reason { get; set; }

        /// <summary>
        /// Optional end date/time for the ban. If not provided, the ban is indefinite.
        /// </summary>
        /// <value>Optional end date/time for the ban. If not provided, the ban is indefinite.</value>
        [DataMember(Name="duration", EmitDefaultValue=false)]
        public DateTime? Duration { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UserIdBansBody {\n");
            sb.Append("  Reason: ").Append(Reason).Append("\n");
            sb.Append("  Duration: ").Append(Duration).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UserIdBansBody);
        }

        /// <summary>
        /// Returns true if UserIdBansBody instances are equal
        /// </summary>
        /// <param name="input">Instance of UserIdBansBody to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UserIdBansBody input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Reason == input.Reason ||
                    (this.Reason != null &&
                    this.Reason.Equals(input.Reason))
                ) && 
                (
                    this.Duration == input.Duration ||
                    (this.Duration != null &&
                    this.Duration.Equals(input.Duration))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Reason != null)
                    hashCode = hashCode * 59 + this.Reason.GetHashCode();
                if (this.Duration != null)
                    hashCode = hashCode * 59 + this.Duration.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
