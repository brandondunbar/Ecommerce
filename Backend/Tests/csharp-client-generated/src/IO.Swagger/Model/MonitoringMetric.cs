/* 
 * E-commerce API
 *
 * API for E-commerce Platform
 *
 * OpenAPI spec version: 1.0.0
 * Contact: brandon.dunbar97@gmail.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;
namespace IO.Swagger.Model
{
    /// <summary>
    /// MonitoringMetric
    /// </summary>
    [DataContract]
        public partial class MonitoringMetric :  IEquatable<MonitoringMetric>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MonitoringMetric" /> class.
        /// </summary>
        /// <param name="metricId">Unique identifier for the metric entry. (required).</param>
        /// <param name="metricName">Name of the monitoring metric (e.g., \&quot;CPU_Usage\&quot;, \&quot;Response_Time\&quot;, \&quot;Memory_Usage\&quot;). (required).</param>
        /// <param name="timestamp">The exact time when the metric was measured. (required).</param>
        /// <param name="value">The value of the monitoring metric, often a percentage, time in milliseconds, or other unit relevant to the metric. (required).</param>
        /// <param name="unit">The unit of the metric value (e.g., \&quot;%\&quot;, \&quot;ms\&quot;, \&quot;MB\&quot;). (required).</param>
        /// <param name="metadata">Any other relevant metadata associated with the metric, such as resource details or related system information..</param>
        public MonitoringMetric(long? metricId = default(long?), string metricName = default(string), DateTime? timestamp = default(DateTime?), float? value = default(float?), string unit = default(string), Dictionary<string, Object> metadata = default(Dictionary<string, Object>))
        {
            // to ensure "metricId" is required (not null)
            if (metricId == null)
            {
                throw new InvalidDataException("metricId is a required property for MonitoringMetric and cannot be null");
            }
            else
            {
                this.MetricId = metricId;
            }
            // to ensure "metricName" is required (not null)
            if (metricName == null)
            {
                throw new InvalidDataException("metricName is a required property for MonitoringMetric and cannot be null");
            }
            else
            {
                this.MetricName = metricName;
            }
            // to ensure "timestamp" is required (not null)
            if (timestamp == null)
            {
                throw new InvalidDataException("timestamp is a required property for MonitoringMetric and cannot be null");
            }
            else
            {
                this.Timestamp = timestamp;
            }
            // to ensure "value" is required (not null)
            if (value == null)
            {
                throw new InvalidDataException("value is a required property for MonitoringMetric and cannot be null");
            }
            else
            {
                this.Value = value;
            }
            // to ensure "unit" is required (not null)
            if (unit == null)
            {
                throw new InvalidDataException("unit is a required property for MonitoringMetric and cannot be null");
            }
            else
            {
                this.Unit = unit;
            }
            this.Metadata = metadata;
        }
        
        /// <summary>
        /// Unique identifier for the metric entry.
        /// </summary>
        /// <value>Unique identifier for the metric entry.</value>
        [DataMember(Name="metricId", EmitDefaultValue=false)]
        public long? MetricId { get; set; }

        /// <summary>
        /// Name of the monitoring metric (e.g., \&quot;CPU_Usage\&quot;, \&quot;Response_Time\&quot;, \&quot;Memory_Usage\&quot;).
        /// </summary>
        /// <value>Name of the monitoring metric (e.g., \&quot;CPU_Usage\&quot;, \&quot;Response_Time\&quot;, \&quot;Memory_Usage\&quot;).</value>
        [DataMember(Name="metricName", EmitDefaultValue=false)]
        public string MetricName { get; set; }

        /// <summary>
        /// The exact time when the metric was measured.
        /// </summary>
        /// <value>The exact time when the metric was measured.</value>
        [DataMember(Name="timestamp", EmitDefaultValue=false)]
        public DateTime? Timestamp { get; set; }

        /// <summary>
        /// The value of the monitoring metric, often a percentage, time in milliseconds, or other unit relevant to the metric.
        /// </summary>
        /// <value>The value of the monitoring metric, often a percentage, time in milliseconds, or other unit relevant to the metric.</value>
        [DataMember(Name="value", EmitDefaultValue=false)]
        public float? Value { get; set; }

        /// <summary>
        /// The unit of the metric value (e.g., \&quot;%\&quot;, \&quot;ms\&quot;, \&quot;MB\&quot;).
        /// </summary>
        /// <value>The unit of the metric value (e.g., \&quot;%\&quot;, \&quot;ms\&quot;, \&quot;MB\&quot;).</value>
        [DataMember(Name="unit", EmitDefaultValue=false)]
        public string Unit { get; set; }

        /// <summary>
        /// Any other relevant metadata associated with the metric, such as resource details or related system information.
        /// </summary>
        /// <value>Any other relevant metadata associated with the metric, such as resource details or related system information.</value>
        [DataMember(Name="metadata", EmitDefaultValue=false)]
        public Dictionary<string, Object> Metadata { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MonitoringMetric {\n");
            sb.Append("  MetricId: ").Append(MetricId).Append("\n");
            sb.Append("  MetricName: ").Append(MetricName).Append("\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  Unit: ").Append(Unit).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MonitoringMetric);
        }

        /// <summary>
        /// Returns true if MonitoringMetric instances are equal
        /// </summary>
        /// <param name="input">Instance of MonitoringMetric to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MonitoringMetric input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.MetricId == input.MetricId ||
                    (this.MetricId != null &&
                    this.MetricId.Equals(input.MetricId))
                ) && 
                (
                    this.MetricName == input.MetricName ||
                    (this.MetricName != null &&
                    this.MetricName.Equals(input.MetricName))
                ) && 
                (
                    this.Timestamp == input.Timestamp ||
                    (this.Timestamp != null &&
                    this.Timestamp.Equals(input.Timestamp))
                ) && 
                (
                    this.Value == input.Value ||
                    (this.Value != null &&
                    this.Value.Equals(input.Value))
                ) && 
                (
                    this.Unit == input.Unit ||
                    (this.Unit != null &&
                    this.Unit.Equals(input.Unit))
                ) && 
                (
                    this.Metadata == input.Metadata ||
                    this.Metadata != null &&
                    input.Metadata != null &&
                    this.Metadata.SequenceEqual(input.Metadata)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.MetricId != null)
                    hashCode = hashCode * 59 + this.MetricId.GetHashCode();
                if (this.MetricName != null)
                    hashCode = hashCode * 59 + this.MetricName.GetHashCode();
                if (this.Timestamp != null)
                    hashCode = hashCode * 59 + this.Timestamp.GetHashCode();
                if (this.Value != null)
                    hashCode = hashCode * 59 + this.Value.GetHashCode();
                if (this.Unit != null)
                    hashCode = hashCode * 59 + this.Unit.GetHashCode();
                if (this.Metadata != null)
                    hashCode = hashCode * 59 + this.Metadata.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
