/* 
 * E-commerce API
 *
 * API for E-commerce Platform
 *
 * OpenAPI spec version: 1.0.0
 * Contact: brandon.dunbar97@gmail.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;
namespace IO.Swagger.Model
{
    /// <summary>
    /// FeedbackUpdate
    /// </summary>
    [DataContract]
        public partial class FeedbackUpdate :  IEquatable<FeedbackUpdate>, IValidatableObject
    {
        /// <summary>
        /// Updated status for the feedback.
        /// </summary>
        /// <value>Updated status for the feedback.</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum StatusEnum
        {
            /// <summary>
            /// Enum Pending for value: pending
            /// </summary>
            [EnumMember(Value = "pending")]
            Pending = 1,
            /// <summary>
            /// Enum Reviewed for value: reviewed
            /// </summary>
            [EnumMember(Value = "reviewed")]
            Reviewed = 2,
            /// <summary>
            /// Enum Resolved for value: resolved
            /// </summary>
            [EnumMember(Value = "resolved")]
            Resolved = 3        }
        /// <summary>
        /// Updated status for the feedback.
        /// </summary>
        /// <value>Updated status for the feedback.</value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public StatusEnum Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="FeedbackUpdate" /> class.
        /// </summary>
        /// <param name="feedbackId">Unique identifier for the feedback entry being updated. (required).</param>
        /// <param name="status">Updated status for the feedback. (required).</param>
        /// <param name="adminComment">Comment or response from the administrator in relation to the feedback. This could be a resolution comment, feedback, or any other relevant note..</param>
        public FeedbackUpdate(long? feedbackId = default(long?), StatusEnum status = default(StatusEnum), string adminComment = default(string))
        {
            // to ensure "feedbackId" is required (not null)
            if (feedbackId == null)
            {
                throw new InvalidDataException("feedbackId is a required property for FeedbackUpdate and cannot be null");
            }
            else
            {
                this.FeedbackId = feedbackId;
            }
            // to ensure "status" is required (not null)
            if (status == null)
            {
                throw new InvalidDataException("status is a required property for FeedbackUpdate and cannot be null");
            }
            else
            {
                this.Status = status;
            }
            this.AdminComment = adminComment;
        }
        
        /// <summary>
        /// Unique identifier for the feedback entry being updated.
        /// </summary>
        /// <value>Unique identifier for the feedback entry being updated.</value>
        [DataMember(Name="feedbackId", EmitDefaultValue=false)]
        public long? FeedbackId { get; set; }


        /// <summary>
        /// Comment or response from the administrator in relation to the feedback. This could be a resolution comment, feedback, or any other relevant note.
        /// </summary>
        /// <value>Comment or response from the administrator in relation to the feedback. This could be a resolution comment, feedback, or any other relevant note.</value>
        [DataMember(Name="adminComment", EmitDefaultValue=false)]
        public string AdminComment { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FeedbackUpdate {\n");
            sb.Append("  FeedbackId: ").Append(FeedbackId).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  AdminComment: ").Append(AdminComment).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FeedbackUpdate);
        }

        /// <summary>
        /// Returns true if FeedbackUpdate instances are equal
        /// </summary>
        /// <param name="input">Instance of FeedbackUpdate to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FeedbackUpdate input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.FeedbackId == input.FeedbackId ||
                    (this.FeedbackId != null &&
                    this.FeedbackId.Equals(input.FeedbackId))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.AdminComment == input.AdminComment ||
                    (this.AdminComment != null &&
                    this.AdminComment.Equals(input.AdminComment))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.FeedbackId != null)
                    hashCode = hashCode * 59 + this.FeedbackId.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.AdminComment != null)
                    hashCode = hashCode * 59 + this.AdminComment.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
