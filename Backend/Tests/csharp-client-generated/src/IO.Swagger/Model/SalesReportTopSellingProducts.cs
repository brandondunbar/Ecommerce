/* 
 * E-commerce API
 *
 * API for E-commerce Platform
 *
 * OpenAPI spec version: 1.0.0
 * Contact: brandon.dunbar97@gmail.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;
namespace IO.Swagger.Model
{
    /// <summary>
    /// SalesReportTopSellingProducts
    /// </summary>
    [DataContract]
        public partial class SalesReportTopSellingProducts :  IEquatable<SalesReportTopSellingProducts>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SalesReportTopSellingProducts" /> class.
        /// </summary>
        /// <param name="productId">Unique identifier for the product..</param>
        /// <param name="productName">Name of the product..</param>
        /// <param name="quantitySold">Total quantity of this product sold during the report period..</param>
        public SalesReportTopSellingProducts(long? productId = default(long?), string productName = default(string), int? quantitySold = default(int?))
        {
            this.ProductId = productId;
            this.ProductName = productName;
            this.QuantitySold = quantitySold;
        }
        
        /// <summary>
        /// Unique identifier for the product.
        /// </summary>
        /// <value>Unique identifier for the product.</value>
        [DataMember(Name="productId", EmitDefaultValue=false)]
        public long? ProductId { get; set; }

        /// <summary>
        /// Name of the product.
        /// </summary>
        /// <value>Name of the product.</value>
        [DataMember(Name="productName", EmitDefaultValue=false)]
        public string ProductName { get; set; }

        /// <summary>
        /// Total quantity of this product sold during the report period.
        /// </summary>
        /// <value>Total quantity of this product sold during the report period.</value>
        [DataMember(Name="quantitySold", EmitDefaultValue=false)]
        public int? QuantitySold { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SalesReportTopSellingProducts {\n");
            sb.Append("  ProductId: ").Append(ProductId).Append("\n");
            sb.Append("  ProductName: ").Append(ProductName).Append("\n");
            sb.Append("  QuantitySold: ").Append(QuantitySold).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SalesReportTopSellingProducts);
        }

        /// <summary>
        /// Returns true if SalesReportTopSellingProducts instances are equal
        /// </summary>
        /// <param name="input">Instance of SalesReportTopSellingProducts to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SalesReportTopSellingProducts input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ProductId == input.ProductId ||
                    (this.ProductId != null &&
                    this.ProductId.Equals(input.ProductId))
                ) && 
                (
                    this.ProductName == input.ProductName ||
                    (this.ProductName != null &&
                    this.ProductName.Equals(input.ProductName))
                ) && 
                (
                    this.QuantitySold == input.QuantitySold ||
                    (this.QuantitySold != null &&
                    this.QuantitySold.Equals(input.QuantitySold))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ProductId != null)
                    hashCode = hashCode * 59 + this.ProductId.GetHashCode();
                if (this.ProductName != null)
                    hashCode = hashCode * 59 + this.ProductName.GetHashCode();
                if (this.QuantitySold != null)
                    hashCode = hashCode * 59 + this.QuantitySold.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
