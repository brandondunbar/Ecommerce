/* 
 * E-commerce API
 *
 * API for E-commerce Platform
 *
 * OpenAPI spec version: 1.0.0
 * Contact: brandon.dunbar97@gmail.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;
namespace IO.Swagger.Model
{
    /// <summary>
    /// SystemLog
    /// </summary>
    [DataContract]
        public partial class SystemLog :  IEquatable<SystemLog>, IValidatableObject
    {
        /// <summary>
        /// The severity or level of the log.
        /// </summary>
        /// <value>The severity or level of the log.</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum LogLevelEnum
        {
            /// <summary>
            /// Enum INFO for value: INFO
            /// </summary>
            [EnumMember(Value = "INFO")]
            INFO = 1,
            /// <summary>
            /// Enum ERROR for value: ERROR
            /// </summary>
            [EnumMember(Value = "ERROR")]
            ERROR = 2,
            /// <summary>
            /// Enum WARNING for value: WARNING
            /// </summary>
            [EnumMember(Value = "WARNING")]
            WARNING = 3,
            /// <summary>
            /// Enum DEBUG for value: DEBUG
            /// </summary>
            [EnumMember(Value = "DEBUG")]
            DEBUG = 4        }
        /// <summary>
        /// The severity or level of the log.
        /// </summary>
        /// <value>The severity or level of the log.</value>
        [DataMember(Name="logLevel", EmitDefaultValue=false)]
        public LogLevelEnum LogLevel { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="SystemLog" /> class.
        /// </summary>
        /// <param name="logId">Unique identifier for the log entry. (required).</param>
        /// <param name="timestamp">The exact time when the event occurred. (required).</param>
        /// <param name="logLevel">The severity or level of the log. (required).</param>
        /// <param name="_event">A brief description or identifier for the event or operation that triggered the log. (required).</param>
        /// <param name="message">Detailed description of the event or any additional information. (required).</param>
        /// <param name="metadata">Any other relevant metadata associated with the log, such as request details, user information, or system state..</param>
        public SystemLog(long? logId = default(long?), DateTime? timestamp = default(DateTime?), LogLevelEnum logLevel = default(LogLevelEnum), string _event = default(string), string message = default(string), Dictionary<string, Object> metadata = default(Dictionary<string, Object>))
        {
            // to ensure "logId" is required (not null)
            if (logId == null)
            {
                throw new InvalidDataException("logId is a required property for SystemLog and cannot be null");
            }
            else
            {
                this.LogId = logId;
            }
            // to ensure "timestamp" is required (not null)
            if (timestamp == null)
            {
                throw new InvalidDataException("timestamp is a required property for SystemLog and cannot be null");
            }
            else
            {
                this.Timestamp = timestamp;
            }
            // to ensure "logLevel" is required (not null)
            if (logLevel == null)
            {
                throw new InvalidDataException("logLevel is a required property for SystemLog and cannot be null");
            }
            else
            {
                this.LogLevel = logLevel;
            }
            // to ensure "_event" is required (not null)
            if (_event == null)
            {
                throw new InvalidDataException("_event is a required property for SystemLog and cannot be null");
            }
            else
            {
                this._Event = _event;
            }
            // to ensure "message" is required (not null)
            if (message == null)
            {
                throw new InvalidDataException("message is a required property for SystemLog and cannot be null");
            }
            else
            {
                this.Message = message;
            }
            this.Metadata = metadata;
        }
        
        /// <summary>
        /// Unique identifier for the log entry.
        /// </summary>
        /// <value>Unique identifier for the log entry.</value>
        [DataMember(Name="logId", EmitDefaultValue=false)]
        public long? LogId { get; set; }

        /// <summary>
        /// The exact time when the event occurred.
        /// </summary>
        /// <value>The exact time when the event occurred.</value>
        [DataMember(Name="timestamp", EmitDefaultValue=false)]
        public DateTime? Timestamp { get; set; }


        /// <summary>
        /// A brief description or identifier for the event or operation that triggered the log.
        /// </summary>
        /// <value>A brief description or identifier for the event or operation that triggered the log.</value>
        [DataMember(Name="event", EmitDefaultValue=false)]
        public string _Event { get; set; }

        /// <summary>
        /// Detailed description of the event or any additional information.
        /// </summary>
        /// <value>Detailed description of the event or any additional information.</value>
        [DataMember(Name="message", EmitDefaultValue=false)]
        public string Message { get; set; }

        /// <summary>
        /// Any other relevant metadata associated with the log, such as request details, user information, or system state.
        /// </summary>
        /// <value>Any other relevant metadata associated with the log, such as request details, user information, or system state.</value>
        [DataMember(Name="metadata", EmitDefaultValue=false)]
        public Dictionary<string, Object> Metadata { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SystemLog {\n");
            sb.Append("  LogId: ").Append(LogId).Append("\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("  LogLevel: ").Append(LogLevel).Append("\n");
            sb.Append("  _Event: ").Append(_Event).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SystemLog);
        }

        /// <summary>
        /// Returns true if SystemLog instances are equal
        /// </summary>
        /// <param name="input">Instance of SystemLog to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SystemLog input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.LogId == input.LogId ||
                    (this.LogId != null &&
                    this.LogId.Equals(input.LogId))
                ) && 
                (
                    this.Timestamp == input.Timestamp ||
                    (this.Timestamp != null &&
                    this.Timestamp.Equals(input.Timestamp))
                ) && 
                (
                    this.LogLevel == input.LogLevel ||
                    (this.LogLevel != null &&
                    this.LogLevel.Equals(input.LogLevel))
                ) && 
                (
                    this._Event == input._Event ||
                    (this._Event != null &&
                    this._Event.Equals(input._Event))
                ) && 
                (
                    this.Message == input.Message ||
                    (this.Message != null &&
                    this.Message.Equals(input.Message))
                ) && 
                (
                    this.Metadata == input.Metadata ||
                    this.Metadata != null &&
                    input.Metadata != null &&
                    this.Metadata.SequenceEqual(input.Metadata)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.LogId != null)
                    hashCode = hashCode * 59 + this.LogId.GetHashCode();
                if (this.Timestamp != null)
                    hashCode = hashCode * 59 + this.Timestamp.GetHashCode();
                if (this.LogLevel != null)
                    hashCode = hashCode * 59 + this.LogLevel.GetHashCode();
                if (this._Event != null)
                    hashCode = hashCode * 59 + this._Event.GetHashCode();
                if (this.Message != null)
                    hashCode = hashCode * 59 + this.Message.GetHashCode();
                if (this.Metadata != null)
                    hashCode = hashCode * 59 + this.Metadata.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
