/* 
 * E-commerce API
 *
 * API for E-commerce Platform
 *
 * OpenAPI spec version: 1.0.0
 * Contact: brandon.dunbar97@gmail.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;
namespace IO.Swagger.Model
{
    /// <summary>
    /// ProductInventory
    /// </summary>
    [DataContract]
        public partial class ProductInventory :  IEquatable<ProductInventory>, IValidatableObject
    {
        /// <summary>
        /// Current inventory status.
        /// </summary>
        /// <value>Current inventory status.</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum StatusEnum
        {
            /// <summary>
            /// Enum Instock for value: in_stock
            /// </summary>
            [EnumMember(Value = "in_stock")]
            Instock = 1,
            /// <summary>
            /// Enum Lowstock for value: low_stock
            /// </summary>
            [EnumMember(Value = "low_stock")]
            Lowstock = 2,
            /// <summary>
            /// Enum Outofstock for value: out_of_stock
            /// </summary>
            [EnumMember(Value = "out_of_stock")]
            Outofstock = 3        }
        /// <summary>
        /// Current inventory status.
        /// </summary>
        /// <value>Current inventory status.</value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public StatusEnum? Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ProductInventory" /> class.
        /// </summary>
        /// <param name="stockLevel">Current number of items in stock..</param>
        /// <param name="status">Current inventory status..</param>
        /// <param name="lastUpdated">Date and time when the inventory was last updated..</param>
        public ProductInventory(int? stockLevel = default(int?), StatusEnum? status = default(StatusEnum?), DateTime? lastUpdated = default(DateTime?))
        {
            this.StockLevel = stockLevel;
            this.Status = status;
            this.LastUpdated = lastUpdated;
        }
        
        /// <summary>
        /// Current number of items in stock.
        /// </summary>
        /// <value>Current number of items in stock.</value>
        [DataMember(Name="stockLevel", EmitDefaultValue=false)]
        public int? StockLevel { get; set; }


        /// <summary>
        /// Date and time when the inventory was last updated.
        /// </summary>
        /// <value>Date and time when the inventory was last updated.</value>
        [DataMember(Name="lastUpdated", EmitDefaultValue=false)]
        public DateTime? LastUpdated { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ProductInventory {\n");
            sb.Append("  StockLevel: ").Append(StockLevel).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  LastUpdated: ").Append(LastUpdated).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ProductInventory);
        }

        /// <summary>
        /// Returns true if ProductInventory instances are equal
        /// </summary>
        /// <param name="input">Instance of ProductInventory to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ProductInventory input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.StockLevel == input.StockLevel ||
                    (this.StockLevel != null &&
                    this.StockLevel.Equals(input.StockLevel))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.LastUpdated == input.LastUpdated ||
                    (this.LastUpdated != null &&
                    this.LastUpdated.Equals(input.LastUpdated))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.StockLevel != null)
                    hashCode = hashCode * 59 + this.StockLevel.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.LastUpdated != null)
                    hashCode = hashCode * 59 + this.LastUpdated.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
