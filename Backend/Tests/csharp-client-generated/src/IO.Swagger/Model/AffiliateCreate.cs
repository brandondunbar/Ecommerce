/* 
 * E-commerce API
 *
 * API for E-commerce Platform
 *
 * OpenAPI spec version: 1.0.0
 * Contact: brandon.dunbar97@gmail.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;
namespace IO.Swagger.Model
{
    /// <summary>
    /// AffiliateCreate
    /// </summary>
    [DataContract]
        public partial class AffiliateCreate :  IEquatable<AffiliateCreate>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AffiliateCreate" /> class.
        /// </summary>
        /// <param name="name">Full name or company name of the affiliate. (required).</param>
        /// <param name="contactEmail">Contact email address for the affiliate. (required).</param>
        /// <param name="referralCode">Unique code to be used by the affiliate for referrals. If not provided, the system could generate one..</param>
        /// <param name="registrationDate">Date and time when the affiliate is onboarded. If not provided, the system could use the current date-time..</param>
        /// <param name="isActive">Indicates whether the affiliate should start as active. Defaults to true if not provided. (default to true).</param>
        public AffiliateCreate(string name = default(string), string contactEmail = default(string), string referralCode = default(string), DateTime? registrationDate = default(DateTime?), bool? isActive = true)
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new InvalidDataException("name is a required property for AffiliateCreate and cannot be null");
            }
            else
            {
                this.Name = name;
            }
            // to ensure "contactEmail" is required (not null)
            if (contactEmail == null)
            {
                throw new InvalidDataException("contactEmail is a required property for AffiliateCreate and cannot be null");
            }
            else
            {
                this.ContactEmail = contactEmail;
            }
            this.ReferralCode = referralCode;
            this.RegistrationDate = registrationDate;
            // use default value if no "isActive" provided
            if (isActive == null)
            {
                this.IsActive = true;
            }
            else
            {
                this.IsActive = isActive;
            }
        }
        
        /// <summary>
        /// Full name or company name of the affiliate.
        /// </summary>
        /// <value>Full name or company name of the affiliate.</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Contact email address for the affiliate.
        /// </summary>
        /// <value>Contact email address for the affiliate.</value>
        [DataMember(Name="contactEmail", EmitDefaultValue=false)]
        public string ContactEmail { get; set; }

        /// <summary>
        /// Unique code to be used by the affiliate for referrals. If not provided, the system could generate one.
        /// </summary>
        /// <value>Unique code to be used by the affiliate for referrals. If not provided, the system could generate one.</value>
        [DataMember(Name="referralCode", EmitDefaultValue=false)]
        public string ReferralCode { get; set; }

        /// <summary>
        /// Date and time when the affiliate is onboarded. If not provided, the system could use the current date-time.
        /// </summary>
        /// <value>Date and time when the affiliate is onboarded. If not provided, the system could use the current date-time.</value>
        [DataMember(Name="registrationDate", EmitDefaultValue=false)]
        public DateTime? RegistrationDate { get; set; }

        /// <summary>
        /// Indicates whether the affiliate should start as active. Defaults to true if not provided.
        /// </summary>
        /// <value>Indicates whether the affiliate should start as active. Defaults to true if not provided.</value>
        [DataMember(Name="isActive", EmitDefaultValue=false)]
        public bool? IsActive { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AffiliateCreate {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  ContactEmail: ").Append(ContactEmail).Append("\n");
            sb.Append("  ReferralCode: ").Append(ReferralCode).Append("\n");
            sb.Append("  RegistrationDate: ").Append(RegistrationDate).Append("\n");
            sb.Append("  IsActive: ").Append(IsActive).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AffiliateCreate);
        }

        /// <summary>
        /// Returns true if AffiliateCreate instances are equal
        /// </summary>
        /// <param name="input">Instance of AffiliateCreate to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AffiliateCreate input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.ContactEmail == input.ContactEmail ||
                    (this.ContactEmail != null &&
                    this.ContactEmail.Equals(input.ContactEmail))
                ) && 
                (
                    this.ReferralCode == input.ReferralCode ||
                    (this.ReferralCode != null &&
                    this.ReferralCode.Equals(input.ReferralCode))
                ) && 
                (
                    this.RegistrationDate == input.RegistrationDate ||
                    (this.RegistrationDate != null &&
                    this.RegistrationDate.Equals(input.RegistrationDate))
                ) && 
                (
                    this.IsActive == input.IsActive ||
                    (this.IsActive != null &&
                    this.IsActive.Equals(input.IsActive))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.ContactEmail != null)
                    hashCode = hashCode * 59 + this.ContactEmail.GetHashCode();
                if (this.ReferralCode != null)
                    hashCode = hashCode * 59 + this.ReferralCode.GetHashCode();
                if (this.RegistrationDate != null)
                    hashCode = hashCode * 59 + this.RegistrationDate.GetHashCode();
                if (this.IsActive != null)
                    hashCode = hashCode * 59 + this.IsActive.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
