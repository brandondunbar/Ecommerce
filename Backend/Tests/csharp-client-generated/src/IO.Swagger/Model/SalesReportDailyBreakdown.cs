/* 
 * E-commerce API
 *
 * API for E-commerce Platform
 *
 * OpenAPI spec version: 1.0.0
 * Contact: brandon.dunbar97@gmail.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;
namespace IO.Swagger.Model
{
    /// <summary>
    /// SalesReportDailyBreakdown
    /// </summary>
    [DataContract]
        public partial class SalesReportDailyBreakdown :  IEquatable<SalesReportDailyBreakdown>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SalesReportDailyBreakdown" /> class.
        /// </summary>
        /// <param name="date">Specific date in the report period..</param>
        /// <param name="sales">Number of sales on that date..</param>
        /// <param name="revenue">Revenue generated on that date..</param>
        public SalesReportDailyBreakdown(DateTime? date = default(DateTime?), int? sales = default(int?), float? revenue = default(float?))
        {
            this.Date = date;
            this.Sales = sales;
            this.Revenue = revenue;
        }
        
        /// <summary>
        /// Specific date in the report period.
        /// </summary>
        /// <value>Specific date in the report period.</value>
        [DataMember(Name="date", EmitDefaultValue=false)]
        [JsonConverter(typeof(SwaggerDateConverter))]
        public DateTime? Date { get; set; }

        /// <summary>
        /// Number of sales on that date.
        /// </summary>
        /// <value>Number of sales on that date.</value>
        [DataMember(Name="sales", EmitDefaultValue=false)]
        public int? Sales { get; set; }

        /// <summary>
        /// Revenue generated on that date.
        /// </summary>
        /// <value>Revenue generated on that date.</value>
        [DataMember(Name="revenue", EmitDefaultValue=false)]
        public float? Revenue { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SalesReportDailyBreakdown {\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("  Sales: ").Append(Sales).Append("\n");
            sb.Append("  Revenue: ").Append(Revenue).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SalesReportDailyBreakdown);
        }

        /// <summary>
        /// Returns true if SalesReportDailyBreakdown instances are equal
        /// </summary>
        /// <param name="input">Instance of SalesReportDailyBreakdown to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SalesReportDailyBreakdown input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Date == input.Date ||
                    (this.Date != null &&
                    this.Date.Equals(input.Date))
                ) && 
                (
                    this.Sales == input.Sales ||
                    (this.Sales != null &&
                    this.Sales.Equals(input.Sales))
                ) && 
                (
                    this.Revenue == input.Revenue ||
                    (this.Revenue != null &&
                    this.Revenue.Equals(input.Revenue))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Date != null)
                    hashCode = hashCode * 59 + this.Date.GetHashCode();
                if (this.Sales != null)
                    hashCode = hashCode * 59 + this.Sales.GetHashCode();
                if (this.Revenue != null)
                    hashCode = hashCode * 59 + this.Revenue.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
