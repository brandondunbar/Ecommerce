/* 
 * E-commerce API
 *
 * API for E-commerce Platform
 *
 * OpenAPI spec version: 1.0.0
 * Contact: brandon.dunbar97@gmail.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;
namespace IO.Swagger.Model
{
    /// <summary>
    /// ProductPromotion
    /// </summary>
    [DataContract]
        public partial class ProductPromotion :  IEquatable<ProductPromotion>, IValidatableObject
    {
        /// <summary>
        /// Type of discount (percentage off or a fixed amount off).
        /// </summary>
        /// <value>Type of discount (percentage off or a fixed amount off).</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum DiscountTypeEnum
        {
            /// <summary>
            /// Enum Percentage for value: percentage
            /// </summary>
            [EnumMember(Value = "percentage")]
            Percentage = 1,
            /// <summary>
            /// Enum Fixedamount for value: fixed_amount
            /// </summary>
            [EnumMember(Value = "fixed_amount")]
            Fixedamount = 2        }
        /// <summary>
        /// Type of discount (percentage off or a fixed amount off).
        /// </summary>
        /// <value>Type of discount (percentage off or a fixed amount off).</value>
        [DataMember(Name="discountType", EmitDefaultValue=false)]
        public DiscountTypeEnum? DiscountType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ProductPromotion" /> class.
        /// </summary>
        /// <param name="promotionId">Unique identifier for the promotion..</param>
        /// <param name="name">Name or title of the promotion..</param>
        /// <param name="description">Detailed description of the promotion..</param>
        /// <param name="discountType">Type of discount (percentage off or a fixed amount off)..</param>
        /// <param name="discountValue">Value of the discount, based on the discountType..</param>
        /// <param name="startDate">Date and time when the promotion began..</param>
        /// <param name="endDate">Date and time when the promotion ended or is set to end..</param>
        /// <param name="isActive">Flag indicating if the promotion is currently active..</param>
        public ProductPromotion(string promotionId = default(string), string name = default(string), string description = default(string), DiscountTypeEnum? discountType = default(DiscountTypeEnum?), float? discountValue = default(float?), DateTime? startDate = default(DateTime?), DateTime? endDate = default(DateTime?), bool? isActive = default(bool?))
        {
            this.PromotionId = promotionId;
            this.Name = name;
            this.Description = description;
            this.DiscountType = discountType;
            this.DiscountValue = discountValue;
            this.StartDate = startDate;
            this.EndDate = endDate;
            this.IsActive = isActive;
        }
        
        /// <summary>
        /// Unique identifier for the promotion.
        /// </summary>
        /// <value>Unique identifier for the promotion.</value>
        [DataMember(Name="promotionId", EmitDefaultValue=false)]
        public string PromotionId { get; set; }

        /// <summary>
        /// Name or title of the promotion.
        /// </summary>
        /// <value>Name or title of the promotion.</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Detailed description of the promotion.
        /// </summary>
        /// <value>Detailed description of the promotion.</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }


        /// <summary>
        /// Value of the discount, based on the discountType.
        /// </summary>
        /// <value>Value of the discount, based on the discountType.</value>
        [DataMember(Name="discountValue", EmitDefaultValue=false)]
        public float? DiscountValue { get; set; }

        /// <summary>
        /// Date and time when the promotion began.
        /// </summary>
        /// <value>Date and time when the promotion began.</value>
        [DataMember(Name="startDate", EmitDefaultValue=false)]
        public DateTime? StartDate { get; set; }

        /// <summary>
        /// Date and time when the promotion ended or is set to end.
        /// </summary>
        /// <value>Date and time when the promotion ended or is set to end.</value>
        [DataMember(Name="endDate", EmitDefaultValue=false)]
        public DateTime? EndDate { get; set; }

        /// <summary>
        /// Flag indicating if the promotion is currently active.
        /// </summary>
        /// <value>Flag indicating if the promotion is currently active.</value>
        [DataMember(Name="isActive", EmitDefaultValue=false)]
        public bool? IsActive { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ProductPromotion {\n");
            sb.Append("  PromotionId: ").Append(PromotionId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  DiscountType: ").Append(DiscountType).Append("\n");
            sb.Append("  DiscountValue: ").Append(DiscountValue).Append("\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("  EndDate: ").Append(EndDate).Append("\n");
            sb.Append("  IsActive: ").Append(IsActive).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ProductPromotion);
        }

        /// <summary>
        /// Returns true if ProductPromotion instances are equal
        /// </summary>
        /// <param name="input">Instance of ProductPromotion to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ProductPromotion input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.PromotionId == input.PromotionId ||
                    (this.PromotionId != null &&
                    this.PromotionId.Equals(input.PromotionId))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.DiscountType == input.DiscountType ||
                    (this.DiscountType != null &&
                    this.DiscountType.Equals(input.DiscountType))
                ) && 
                (
                    this.DiscountValue == input.DiscountValue ||
                    (this.DiscountValue != null &&
                    this.DiscountValue.Equals(input.DiscountValue))
                ) && 
                (
                    this.StartDate == input.StartDate ||
                    (this.StartDate != null &&
                    this.StartDate.Equals(input.StartDate))
                ) && 
                (
                    this.EndDate == input.EndDate ||
                    (this.EndDate != null &&
                    this.EndDate.Equals(input.EndDate))
                ) && 
                (
                    this.IsActive == input.IsActive ||
                    (this.IsActive != null &&
                    this.IsActive.Equals(input.IsActive))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PromotionId != null)
                    hashCode = hashCode * 59 + this.PromotionId.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.DiscountType != null)
                    hashCode = hashCode * 59 + this.DiscountType.GetHashCode();
                if (this.DiscountValue != null)
                    hashCode = hashCode * 59 + this.DiscountValue.GetHashCode();
                if (this.StartDate != null)
                    hashCode = hashCode * 59 + this.StartDate.GetHashCode();
                if (this.EndDate != null)
                    hashCode = hashCode * 59 + this.EndDate.GetHashCode();
                if (this.IsActive != null)
                    hashCode = hashCode * 59 + this.IsActive.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
