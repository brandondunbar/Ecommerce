/* 
 * E-commerce API
 *
 * API for E-commerce Platform
 *
 * OpenAPI spec version: 1.0.0
 * Contact: brandon.dunbar97@gmail.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;
namespace IO.Swagger.Model
{
    /// <summary>
    /// PlatformSettings
    /// </summary>
    [DataContract]
        public partial class PlatformSettings :  IEquatable<PlatformSettings>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PlatformSettings" /> class.
        /// </summary>
        /// <param name="siteTitle">The title of the e-commerce site. (required).</param>
        /// <param name="siteDescription">A brief description or tagline for the platform. (required).</param>
        /// <param name="maintenanceMode">Indicates if the site is in maintenance mode..</param>
        /// <param name="defaultCurrency">The default currency for product pricing and transactions..</param>
        /// <param name="paymentMethods">paymentMethods.</param>
        /// <param name="shippingConfig">shippingConfig.</param>
        /// <param name="otherSettings">Miscellaneous settings specific to the platform..</param>
        public PlatformSettings(string siteTitle = default(string), string siteDescription = default(string), bool? maintenanceMode = default(bool?), string defaultCurrency = default(string), List<string> paymentMethods = default(List<string>), PlatformSettingsShippingConfig shippingConfig = default(PlatformSettingsShippingConfig), Dictionary<string, Object> otherSettings = default(Dictionary<string, Object>))
        {
            // to ensure "siteTitle" is required (not null)
            if (siteTitle == null)
            {
                throw new InvalidDataException("siteTitle is a required property for PlatformSettings and cannot be null");
            }
            else
            {
                this.SiteTitle = siteTitle;
            }
            // to ensure "siteDescription" is required (not null)
            if (siteDescription == null)
            {
                throw new InvalidDataException("siteDescription is a required property for PlatformSettings and cannot be null");
            }
            else
            {
                this.SiteDescription = siteDescription;
            }
            this.MaintenanceMode = maintenanceMode;
            this.DefaultCurrency = defaultCurrency;
            this.PaymentMethods = paymentMethods;
            this.ShippingConfig = shippingConfig;
            this.OtherSettings = otherSettings;
        }
        
        /// <summary>
        /// The title of the e-commerce site.
        /// </summary>
        /// <value>The title of the e-commerce site.</value>
        [DataMember(Name="siteTitle", EmitDefaultValue=false)]
        public string SiteTitle { get; set; }

        /// <summary>
        /// A brief description or tagline for the platform.
        /// </summary>
        /// <value>A brief description or tagline for the platform.</value>
        [DataMember(Name="siteDescription", EmitDefaultValue=false)]
        public string SiteDescription { get; set; }

        /// <summary>
        /// Indicates if the site is in maintenance mode.
        /// </summary>
        /// <value>Indicates if the site is in maintenance mode.</value>
        [DataMember(Name="maintenanceMode", EmitDefaultValue=false)]
        public bool? MaintenanceMode { get; set; }

        /// <summary>
        /// The default currency for product pricing and transactions.
        /// </summary>
        /// <value>The default currency for product pricing and transactions.</value>
        [DataMember(Name="defaultCurrency", EmitDefaultValue=false)]
        public string DefaultCurrency { get; set; }

        /// <summary>
        /// Gets or Sets PaymentMethods
        /// </summary>
        [DataMember(Name="paymentMethods", EmitDefaultValue=false)]
        public List<string> PaymentMethods { get; set; }

        /// <summary>
        /// Gets or Sets ShippingConfig
        /// </summary>
        [DataMember(Name="shippingConfig", EmitDefaultValue=false)]
        public PlatformSettingsShippingConfig ShippingConfig { get; set; }

        /// <summary>
        /// Miscellaneous settings specific to the platform.
        /// </summary>
        /// <value>Miscellaneous settings specific to the platform.</value>
        [DataMember(Name="otherSettings", EmitDefaultValue=false)]
        public Dictionary<string, Object> OtherSettings { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PlatformSettings {\n");
            sb.Append("  SiteTitle: ").Append(SiteTitle).Append("\n");
            sb.Append("  SiteDescription: ").Append(SiteDescription).Append("\n");
            sb.Append("  MaintenanceMode: ").Append(MaintenanceMode).Append("\n");
            sb.Append("  DefaultCurrency: ").Append(DefaultCurrency).Append("\n");
            sb.Append("  PaymentMethods: ").Append(PaymentMethods).Append("\n");
            sb.Append("  ShippingConfig: ").Append(ShippingConfig).Append("\n");
            sb.Append("  OtherSettings: ").Append(OtherSettings).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PlatformSettings);
        }

        /// <summary>
        /// Returns true if PlatformSettings instances are equal
        /// </summary>
        /// <param name="input">Instance of PlatformSettings to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PlatformSettings input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.SiteTitle == input.SiteTitle ||
                    (this.SiteTitle != null &&
                    this.SiteTitle.Equals(input.SiteTitle))
                ) && 
                (
                    this.SiteDescription == input.SiteDescription ||
                    (this.SiteDescription != null &&
                    this.SiteDescription.Equals(input.SiteDescription))
                ) && 
                (
                    this.MaintenanceMode == input.MaintenanceMode ||
                    (this.MaintenanceMode != null &&
                    this.MaintenanceMode.Equals(input.MaintenanceMode))
                ) && 
                (
                    this.DefaultCurrency == input.DefaultCurrency ||
                    (this.DefaultCurrency != null &&
                    this.DefaultCurrency.Equals(input.DefaultCurrency))
                ) && 
                (
                    this.PaymentMethods == input.PaymentMethods ||
                    this.PaymentMethods != null &&
                    input.PaymentMethods != null &&
                    this.PaymentMethods.SequenceEqual(input.PaymentMethods)
                ) && 
                (
                    this.ShippingConfig == input.ShippingConfig ||
                    (this.ShippingConfig != null &&
                    this.ShippingConfig.Equals(input.ShippingConfig))
                ) && 
                (
                    this.OtherSettings == input.OtherSettings ||
                    this.OtherSettings != null &&
                    input.OtherSettings != null &&
                    this.OtherSettings.SequenceEqual(input.OtherSettings)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SiteTitle != null)
                    hashCode = hashCode * 59 + this.SiteTitle.GetHashCode();
                if (this.SiteDescription != null)
                    hashCode = hashCode * 59 + this.SiteDescription.GetHashCode();
                if (this.MaintenanceMode != null)
                    hashCode = hashCode * 59 + this.MaintenanceMode.GetHashCode();
                if (this.DefaultCurrency != null)
                    hashCode = hashCode * 59 + this.DefaultCurrency.GetHashCode();
                if (this.PaymentMethods != null)
                    hashCode = hashCode * 59 + this.PaymentMethods.GetHashCode();
                if (this.ShippingConfig != null)
                    hashCode = hashCode * 59 + this.ShippingConfig.GetHashCode();
                if (this.OtherSettings != null)
                    hashCode = hashCode * 59 + this.OtherSettings.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
