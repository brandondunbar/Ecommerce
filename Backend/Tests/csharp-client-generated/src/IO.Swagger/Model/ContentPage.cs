/* 
 * E-commerce API
 *
 * API for E-commerce Platform
 *
 * OpenAPI spec version: 1.0.0
 * Contact: brandon.dunbar97@gmail.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;
namespace IO.Swagger.Model
{
    /// <summary>
    /// ContentPage
    /// </summary>
    [DataContract]
        public partial class ContentPage :  IEquatable<ContentPage>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ContentPage" /> class.
        /// </summary>
        /// <param name="pageId">Unique identifier for the content page. (required).</param>
        /// <param name="title">The title or heading of the content page. (required).</param>
        /// <param name="slug">URL-friendly version of the title used for routing (e.g., \&quot;about-us\&quot;, \&quot;privacy-policy\&quot;). (required).</param>
        /// <param name="content">The main content of the page, typically in HTML or Markdown format. (required).</param>
        /// <param name="lastModified">Timestamp indicating the last time the page was updated. (required).</param>
        /// <param name="author">The name or identifier of the person who last edited the page..</param>
        /// <param name="metaTags">SEO-related meta tags associated with the page..</param>
        /// <param name="isPublished">Indicates whether the page is live and accessible to users or in a draft state..</param>
        public ContentPage(long? pageId = default(long?), string title = default(string), string slug = default(string), string content = default(string), DateTime? lastModified = default(DateTime?), string author = default(string), List<string> metaTags = default(List<string>), bool? isPublished = default(bool?))
        {
            // to ensure "pageId" is required (not null)
            if (pageId == null)
            {
                throw new InvalidDataException("pageId is a required property for ContentPage and cannot be null");
            }
            else
            {
                this.PageId = pageId;
            }
            // to ensure "title" is required (not null)
            if (title == null)
            {
                throw new InvalidDataException("title is a required property for ContentPage and cannot be null");
            }
            else
            {
                this.Title = title;
            }
            // to ensure "slug" is required (not null)
            if (slug == null)
            {
                throw new InvalidDataException("slug is a required property for ContentPage and cannot be null");
            }
            else
            {
                this.Slug = slug;
            }
            // to ensure "content" is required (not null)
            if (content == null)
            {
                throw new InvalidDataException("content is a required property for ContentPage and cannot be null");
            }
            else
            {
                this.Content = content;
            }
            // to ensure "lastModified" is required (not null)
            if (lastModified == null)
            {
                throw new InvalidDataException("lastModified is a required property for ContentPage and cannot be null");
            }
            else
            {
                this.LastModified = lastModified;
            }
            this.Author = author;
            this.MetaTags = metaTags;
            this.IsPublished = isPublished;
        }
        
        /// <summary>
        /// Unique identifier for the content page.
        /// </summary>
        /// <value>Unique identifier for the content page.</value>
        [DataMember(Name="pageId", EmitDefaultValue=false)]
        public long? PageId { get; set; }

        /// <summary>
        /// The title or heading of the content page.
        /// </summary>
        /// <value>The title or heading of the content page.</value>
        [DataMember(Name="title", EmitDefaultValue=false)]
        public string Title { get; set; }

        /// <summary>
        /// URL-friendly version of the title used for routing (e.g., \&quot;about-us\&quot;, \&quot;privacy-policy\&quot;).
        /// </summary>
        /// <value>URL-friendly version of the title used for routing (e.g., \&quot;about-us\&quot;, \&quot;privacy-policy\&quot;).</value>
        [DataMember(Name="slug", EmitDefaultValue=false)]
        public string Slug { get; set; }

        /// <summary>
        /// The main content of the page, typically in HTML or Markdown format.
        /// </summary>
        /// <value>The main content of the page, typically in HTML or Markdown format.</value>
        [DataMember(Name="content", EmitDefaultValue=false)]
        public string Content { get; set; }

        /// <summary>
        /// Timestamp indicating the last time the page was updated.
        /// </summary>
        /// <value>Timestamp indicating the last time the page was updated.</value>
        [DataMember(Name="lastModified", EmitDefaultValue=false)]
        public DateTime? LastModified { get; set; }

        /// <summary>
        /// The name or identifier of the person who last edited the page.
        /// </summary>
        /// <value>The name or identifier of the person who last edited the page.</value>
        [DataMember(Name="author", EmitDefaultValue=false)]
        public string Author { get; set; }

        /// <summary>
        /// SEO-related meta tags associated with the page.
        /// </summary>
        /// <value>SEO-related meta tags associated with the page.</value>
        [DataMember(Name="metaTags", EmitDefaultValue=false)]
        public List<string> MetaTags { get; set; }

        /// <summary>
        /// Indicates whether the page is live and accessible to users or in a draft state.
        /// </summary>
        /// <value>Indicates whether the page is live and accessible to users or in a draft state.</value>
        [DataMember(Name="isPublished", EmitDefaultValue=false)]
        public bool? IsPublished { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ContentPage {\n");
            sb.Append("  PageId: ").Append(PageId).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  Slug: ").Append(Slug).Append("\n");
            sb.Append("  Content: ").Append(Content).Append("\n");
            sb.Append("  LastModified: ").Append(LastModified).Append("\n");
            sb.Append("  Author: ").Append(Author).Append("\n");
            sb.Append("  MetaTags: ").Append(MetaTags).Append("\n");
            sb.Append("  IsPublished: ").Append(IsPublished).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ContentPage);
        }

        /// <summary>
        /// Returns true if ContentPage instances are equal
        /// </summary>
        /// <param name="input">Instance of ContentPage to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ContentPage input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.PageId == input.PageId ||
                    (this.PageId != null &&
                    this.PageId.Equals(input.PageId))
                ) && 
                (
                    this.Title == input.Title ||
                    (this.Title != null &&
                    this.Title.Equals(input.Title))
                ) && 
                (
                    this.Slug == input.Slug ||
                    (this.Slug != null &&
                    this.Slug.Equals(input.Slug))
                ) && 
                (
                    this.Content == input.Content ||
                    (this.Content != null &&
                    this.Content.Equals(input.Content))
                ) && 
                (
                    this.LastModified == input.LastModified ||
                    (this.LastModified != null &&
                    this.LastModified.Equals(input.LastModified))
                ) && 
                (
                    this.Author == input.Author ||
                    (this.Author != null &&
                    this.Author.Equals(input.Author))
                ) && 
                (
                    this.MetaTags == input.MetaTags ||
                    this.MetaTags != null &&
                    input.MetaTags != null &&
                    this.MetaTags.SequenceEqual(input.MetaTags)
                ) && 
                (
                    this.IsPublished == input.IsPublished ||
                    (this.IsPublished != null &&
                    this.IsPublished.Equals(input.IsPublished))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PageId != null)
                    hashCode = hashCode * 59 + this.PageId.GetHashCode();
                if (this.Title != null)
                    hashCode = hashCode * 59 + this.Title.GetHashCode();
                if (this.Slug != null)
                    hashCode = hashCode * 59 + this.Slug.GetHashCode();
                if (this.Content != null)
                    hashCode = hashCode * 59 + this.Content.GetHashCode();
                if (this.LastModified != null)
                    hashCode = hashCode * 59 + this.LastModified.GetHashCode();
                if (this.Author != null)
                    hashCode = hashCode * 59 + this.Author.GetHashCode();
                if (this.MetaTags != null)
                    hashCode = hashCode * 59 + this.MetaTags.GetHashCode();
                if (this.IsPublished != null)
                    hashCode = hashCode * 59 + this.IsPublished.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
