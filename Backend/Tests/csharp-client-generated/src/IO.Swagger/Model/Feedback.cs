/* 
 * E-commerce API
 *
 * API for E-commerce Platform
 *
 * OpenAPI spec version: 1.0.0
 * Contact: brandon.dunbar97@gmail.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;
namespace IO.Swagger.Model
{
    /// <summary>
    /// Feedback
    /// </summary>
    [DataContract]
        public partial class Feedback :  IEquatable<Feedback>, IValidatableObject
    {
        /// <summary>
        /// The category or type of feedback.
        /// </summary>
        /// <value>The category or type of feedback.</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum TypeEnum
        {
            /// <summary>
            /// Enum Bug for value: bug
            /// </summary>
            [EnumMember(Value = "bug")]
            Bug = 1,
            /// <summary>
            /// Enum Featurerequest for value: feature_request
            /// </summary>
            [EnumMember(Value = "feature_request")]
            Featurerequest = 2,
            /// <summary>
            /// Enum Comment for value: comment
            /// </summary>
            [EnumMember(Value = "comment")]
            Comment = 3        }
        /// <summary>
        /// The category or type of feedback.
        /// </summary>
        /// <value>The category or type of feedback.</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public TypeEnum Type { get; set; }
        /// <summary>
        /// The current status of the feedback.
        /// </summary>
        /// <value>The current status of the feedback.</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum StatusEnum
        {
            /// <summary>
            /// Enum Pending for value: pending
            /// </summary>
            [EnumMember(Value = "pending")]
            Pending = 1,
            /// <summary>
            /// Enum Reviewed for value: reviewed
            /// </summary>
            [EnumMember(Value = "reviewed")]
            Reviewed = 2,
            /// <summary>
            /// Enum Resolved for value: resolved
            /// </summary>
            [EnumMember(Value = "resolved")]
            Resolved = 3        }
        /// <summary>
        /// The current status of the feedback.
        /// </summary>
        /// <value>The current status of the feedback.</value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public StatusEnum Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Feedback" /> class.
        /// </summary>
        /// <param name="feedbackId">Unique identifier for the feedback entry. (required).</param>
        /// <param name="userId">Unique identifier for the user who submitted the feedback. (required).</param>
        /// <param name="username">Username of the user who submitted the feedback..</param>
        /// <param name="submissionDate">The timestamp when the feedback was submitted. (required).</param>
        /// <param name="type">The category or type of feedback. (required).</param>
        /// <param name="title">Brief title or headline for the feedback. (required).</param>
        /// <param name="description">Detailed description of the feedback. (required).</param>
        /// <param name="status">The current status of the feedback. (required).</param>
        /// <param name="adminComment">Optional comment from the administrator in response to the feedback..</param>
        public Feedback(long? feedbackId = default(long?), long? userId = default(long?), string username = default(string), DateTime? submissionDate = default(DateTime?), TypeEnum type = default(TypeEnum), string title = default(string), string description = default(string), StatusEnum status = default(StatusEnum), string adminComment = default(string))
        {
            // to ensure "feedbackId" is required (not null)
            if (feedbackId == null)
            {
                throw new InvalidDataException("feedbackId is a required property for Feedback and cannot be null");
            }
            else
            {
                this.FeedbackId = feedbackId;
            }
            // to ensure "userId" is required (not null)
            if (userId == null)
            {
                throw new InvalidDataException("userId is a required property for Feedback and cannot be null");
            }
            else
            {
                this.UserId = userId;
            }
            // to ensure "submissionDate" is required (not null)
            if (submissionDate == null)
            {
                throw new InvalidDataException("submissionDate is a required property for Feedback and cannot be null");
            }
            else
            {
                this.SubmissionDate = submissionDate;
            }
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new InvalidDataException("type is a required property for Feedback and cannot be null");
            }
            else
            {
                this.Type = type;
            }
            // to ensure "title" is required (not null)
            if (title == null)
            {
                throw new InvalidDataException("title is a required property for Feedback and cannot be null");
            }
            else
            {
                this.Title = title;
            }
            // to ensure "description" is required (not null)
            if (description == null)
            {
                throw new InvalidDataException("description is a required property for Feedback and cannot be null");
            }
            else
            {
                this.Description = description;
            }
            // to ensure "status" is required (not null)
            if (status == null)
            {
                throw new InvalidDataException("status is a required property for Feedback and cannot be null");
            }
            else
            {
                this.Status = status;
            }
            this.Username = username;
            this.AdminComment = adminComment;
        }
        
        /// <summary>
        /// Unique identifier for the feedback entry.
        /// </summary>
        /// <value>Unique identifier for the feedback entry.</value>
        [DataMember(Name="feedbackId", EmitDefaultValue=false)]
        public long? FeedbackId { get; set; }

        /// <summary>
        /// Unique identifier for the user who submitted the feedback.
        /// </summary>
        /// <value>Unique identifier for the user who submitted the feedback.</value>
        [DataMember(Name="userId", EmitDefaultValue=false)]
        public long? UserId { get; set; }

        /// <summary>
        /// Username of the user who submitted the feedback.
        /// </summary>
        /// <value>Username of the user who submitted the feedback.</value>
        [DataMember(Name="username", EmitDefaultValue=false)]
        public string Username { get; set; }

        /// <summary>
        /// The timestamp when the feedback was submitted.
        /// </summary>
        /// <value>The timestamp when the feedback was submitted.</value>
        [DataMember(Name="submissionDate", EmitDefaultValue=false)]
        public DateTime? SubmissionDate { get; set; }


        /// <summary>
        /// Brief title or headline for the feedback.
        /// </summary>
        /// <value>Brief title or headline for the feedback.</value>
        [DataMember(Name="title", EmitDefaultValue=false)]
        public string Title { get; set; }

        /// <summary>
        /// Detailed description of the feedback.
        /// </summary>
        /// <value>Detailed description of the feedback.</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }


        /// <summary>
        /// Optional comment from the administrator in response to the feedback.
        /// </summary>
        /// <value>Optional comment from the administrator in response to the feedback.</value>
        [DataMember(Name="adminComment", EmitDefaultValue=false)]
        public string AdminComment { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Feedback {\n");
            sb.Append("  FeedbackId: ").Append(FeedbackId).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  Username: ").Append(Username).Append("\n");
            sb.Append("  SubmissionDate: ").Append(SubmissionDate).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  AdminComment: ").Append(AdminComment).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Feedback);
        }

        /// <summary>
        /// Returns true if Feedback instances are equal
        /// </summary>
        /// <param name="input">Instance of Feedback to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Feedback input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.FeedbackId == input.FeedbackId ||
                    (this.FeedbackId != null &&
                    this.FeedbackId.Equals(input.FeedbackId))
                ) && 
                (
                    this.UserId == input.UserId ||
                    (this.UserId != null &&
                    this.UserId.Equals(input.UserId))
                ) && 
                (
                    this.Username == input.Username ||
                    (this.Username != null &&
                    this.Username.Equals(input.Username))
                ) && 
                (
                    this.SubmissionDate == input.SubmissionDate ||
                    (this.SubmissionDate != null &&
                    this.SubmissionDate.Equals(input.SubmissionDate))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Title == input.Title ||
                    (this.Title != null &&
                    this.Title.Equals(input.Title))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.AdminComment == input.AdminComment ||
                    (this.AdminComment != null &&
                    this.AdminComment.Equals(input.AdminComment))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.FeedbackId != null)
                    hashCode = hashCode * 59 + this.FeedbackId.GetHashCode();
                if (this.UserId != null)
                    hashCode = hashCode * 59 + this.UserId.GetHashCode();
                if (this.Username != null)
                    hashCode = hashCode * 59 + this.Username.GetHashCode();
                if (this.SubmissionDate != null)
                    hashCode = hashCode * 59 + this.SubmissionDate.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Title != null)
                    hashCode = hashCode * 59 + this.Title.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.AdminComment != null)
                    hashCode = hashCode * 59 + this.AdminComment.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
