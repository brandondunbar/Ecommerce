/* 
 * E-commerce API
 *
 * API for E-commerce Platform
 *
 * OpenAPI spec version: 1.0.0
 * Contact: brandon.dunbar97@gmail.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;
namespace IO.Swagger.Model
{
    /// <summary>
    /// InventoryItem
    /// </summary>
    [DataContract]
        public partial class InventoryItem :  IEquatable<InventoryItem>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InventoryItem" /> class.
        /// </summary>
        /// <param name="productId">Unique identifier for the product. (required).</param>
        /// <param name="productName">Name of the product. (required).</param>
        /// <param name="currentStock">The current stock level for the product. (required).</param>
        /// <param name="restockThreshold">The threshold at which a restock alert is triggered. When the current stock drops below this value, a restock might be necessary..</param>
        /// <param name="lastRestockDate">The date and time when the product was last restocked..</param>
        /// <param name="nextRestockDate">Estimated date and time for the next restocking, if applicable..</param>
        /// <param name="supplier">The supplier or manufacturer of the product..</param>
        /// <param name="notes">Any additional notes or comments about the inventory item..</param>
        public InventoryItem(long? productId = default(long?), string productName = default(string), int? currentStock = default(int?), int? restockThreshold = default(int?), DateTime? lastRestockDate = default(DateTime?), DateTime? nextRestockDate = default(DateTime?), string supplier = default(string), string notes = default(string))
        {
            // to ensure "productId" is required (not null)
            if (productId == null)
            {
                throw new InvalidDataException("productId is a required property for InventoryItem and cannot be null");
            }
            else
            {
                this.ProductId = productId;
            }
            // to ensure "productName" is required (not null)
            if (productName == null)
            {
                throw new InvalidDataException("productName is a required property for InventoryItem and cannot be null");
            }
            else
            {
                this.ProductName = productName;
            }
            // to ensure "currentStock" is required (not null)
            if (currentStock == null)
            {
                throw new InvalidDataException("currentStock is a required property for InventoryItem and cannot be null");
            }
            else
            {
                this.CurrentStock = currentStock;
            }
            this.RestockThreshold = restockThreshold;
            this.LastRestockDate = lastRestockDate;
            this.NextRestockDate = nextRestockDate;
            this.Supplier = supplier;
            this.Notes = notes;
        }
        
        /// <summary>
        /// Unique identifier for the product.
        /// </summary>
        /// <value>Unique identifier for the product.</value>
        [DataMember(Name="productId", EmitDefaultValue=false)]
        public long? ProductId { get; set; }

        /// <summary>
        /// Name of the product.
        /// </summary>
        /// <value>Name of the product.</value>
        [DataMember(Name="productName", EmitDefaultValue=false)]
        public string ProductName { get; set; }

        /// <summary>
        /// The current stock level for the product.
        /// </summary>
        /// <value>The current stock level for the product.</value>
        [DataMember(Name="currentStock", EmitDefaultValue=false)]
        public int? CurrentStock { get; set; }

        /// <summary>
        /// The threshold at which a restock alert is triggered. When the current stock drops below this value, a restock might be necessary.
        /// </summary>
        /// <value>The threshold at which a restock alert is triggered. When the current stock drops below this value, a restock might be necessary.</value>
        [DataMember(Name="restockThreshold", EmitDefaultValue=false)]
        public int? RestockThreshold { get; set; }

        /// <summary>
        /// The date and time when the product was last restocked.
        /// </summary>
        /// <value>The date and time when the product was last restocked.</value>
        [DataMember(Name="lastRestockDate", EmitDefaultValue=false)]
        public DateTime? LastRestockDate { get; set; }

        /// <summary>
        /// Estimated date and time for the next restocking, if applicable.
        /// </summary>
        /// <value>Estimated date and time for the next restocking, if applicable.</value>
        [DataMember(Name="nextRestockDate", EmitDefaultValue=false)]
        public DateTime? NextRestockDate { get; set; }

        /// <summary>
        /// The supplier or manufacturer of the product.
        /// </summary>
        /// <value>The supplier or manufacturer of the product.</value>
        [DataMember(Name="supplier", EmitDefaultValue=false)]
        public string Supplier { get; set; }

        /// <summary>
        /// Any additional notes or comments about the inventory item.
        /// </summary>
        /// <value>Any additional notes or comments about the inventory item.</value>
        [DataMember(Name="notes", EmitDefaultValue=false)]
        public string Notes { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InventoryItem {\n");
            sb.Append("  ProductId: ").Append(ProductId).Append("\n");
            sb.Append("  ProductName: ").Append(ProductName).Append("\n");
            sb.Append("  CurrentStock: ").Append(CurrentStock).Append("\n");
            sb.Append("  RestockThreshold: ").Append(RestockThreshold).Append("\n");
            sb.Append("  LastRestockDate: ").Append(LastRestockDate).Append("\n");
            sb.Append("  NextRestockDate: ").Append(NextRestockDate).Append("\n");
            sb.Append("  Supplier: ").Append(Supplier).Append("\n");
            sb.Append("  Notes: ").Append(Notes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InventoryItem);
        }

        /// <summary>
        /// Returns true if InventoryItem instances are equal
        /// </summary>
        /// <param name="input">Instance of InventoryItem to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InventoryItem input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ProductId == input.ProductId ||
                    (this.ProductId != null &&
                    this.ProductId.Equals(input.ProductId))
                ) && 
                (
                    this.ProductName == input.ProductName ||
                    (this.ProductName != null &&
                    this.ProductName.Equals(input.ProductName))
                ) && 
                (
                    this.CurrentStock == input.CurrentStock ||
                    (this.CurrentStock != null &&
                    this.CurrentStock.Equals(input.CurrentStock))
                ) && 
                (
                    this.RestockThreshold == input.RestockThreshold ||
                    (this.RestockThreshold != null &&
                    this.RestockThreshold.Equals(input.RestockThreshold))
                ) && 
                (
                    this.LastRestockDate == input.LastRestockDate ||
                    (this.LastRestockDate != null &&
                    this.LastRestockDate.Equals(input.LastRestockDate))
                ) && 
                (
                    this.NextRestockDate == input.NextRestockDate ||
                    (this.NextRestockDate != null &&
                    this.NextRestockDate.Equals(input.NextRestockDate))
                ) && 
                (
                    this.Supplier == input.Supplier ||
                    (this.Supplier != null &&
                    this.Supplier.Equals(input.Supplier))
                ) && 
                (
                    this.Notes == input.Notes ||
                    (this.Notes != null &&
                    this.Notes.Equals(input.Notes))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ProductId != null)
                    hashCode = hashCode * 59 + this.ProductId.GetHashCode();
                if (this.ProductName != null)
                    hashCode = hashCode * 59 + this.ProductName.GetHashCode();
                if (this.CurrentStock != null)
                    hashCode = hashCode * 59 + this.CurrentStock.GetHashCode();
                if (this.RestockThreshold != null)
                    hashCode = hashCode * 59 + this.RestockThreshold.GetHashCode();
                if (this.LastRestockDate != null)
                    hashCode = hashCode * 59 + this.LastRestockDate.GetHashCode();
                if (this.NextRestockDate != null)
                    hashCode = hashCode * 59 + this.NextRestockDate.GetHashCode();
                if (this.Supplier != null)
                    hashCode = hashCode * 59 + this.Supplier.GetHashCode();
                if (this.Notes != null)
                    hashCode = hashCode * 59 + this.Notes.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
