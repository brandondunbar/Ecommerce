/* 
 * E-commerce API
 *
 * API for E-commerce Platform
 *
 * OpenAPI spec version: 1.0.0
 * Contact: brandon.dunbar97@gmail.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;
namespace IO.Swagger.Model
{
    /// <summary>
    /// UsersNotificationsBody
    /// </summary>
    [DataContract]
        public partial class UsersNotificationsBody :  IEquatable<UsersNotificationsBody>, IValidatableObject
    {
        /// <summary>
        /// Action to mark all notifications or selected ones as read.
        /// </summary>
        /// <value>Action to mark all notifications or selected ones as read.</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum ActionEnum
        {
            /// <summary>
            /// Enum All for value: all
            /// </summary>
            [EnumMember(Value = "all")]
            All = 1,
            /// <summary>
            /// Enum Selected for value: selected
            /// </summary>
            [EnumMember(Value = "selected")]
            Selected = 2        }
        /// <summary>
        /// Action to mark all notifications or selected ones as read.
        /// </summary>
        /// <value>Action to mark all notifications or selected ones as read.</value>
        [DataMember(Name="action", EmitDefaultValue=false)]
        public ActionEnum? Action { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="UsersNotificationsBody" /> class.
        /// </summary>
        /// <param name="action">Action to mark all notifications or selected ones as read..</param>
        /// <param name="notificationIds">List of notification IDs to mark as read (required if action is &#x27;selected&#x27;)..</param>
        public UsersNotificationsBody(ActionEnum? action = default(ActionEnum?), List<int?> notificationIds = default(List<int?>))
        {
            this.Action = action;
            this.NotificationIds = notificationIds;
        }
        

        /// <summary>
        /// List of notification IDs to mark as read (required if action is &#x27;selected&#x27;).
        /// </summary>
        /// <value>List of notification IDs to mark as read (required if action is &#x27;selected&#x27;).</value>
        [DataMember(Name="notificationIds", EmitDefaultValue=false)]
        public List<int?> NotificationIds { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UsersNotificationsBody {\n");
            sb.Append("  Action: ").Append(Action).Append("\n");
            sb.Append("  NotificationIds: ").Append(NotificationIds).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UsersNotificationsBody);
        }

        /// <summary>
        /// Returns true if UsersNotificationsBody instances are equal
        /// </summary>
        /// <param name="input">Instance of UsersNotificationsBody to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UsersNotificationsBody input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Action == input.Action ||
                    (this.Action != null &&
                    this.Action.Equals(input.Action))
                ) && 
                (
                    this.NotificationIds == input.NotificationIds ||
                    this.NotificationIds != null &&
                    input.NotificationIds != null &&
                    this.NotificationIds.SequenceEqual(input.NotificationIds)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Action != null)
                    hashCode = hashCode * 59 + this.Action.GetHashCode();
                if (this.NotificationIds != null)
                    hashCode = hashCode * 59 + this.NotificationIds.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
