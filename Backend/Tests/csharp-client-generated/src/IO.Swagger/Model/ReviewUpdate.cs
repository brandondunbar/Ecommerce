/* 
 * E-commerce API
 *
 * API for E-commerce Platform
 *
 * OpenAPI spec version: 1.0.0
 * Contact: brandon.dunbar97@gmail.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;
namespace IO.Swagger.Model
{
    /// <summary>
    /// ReviewUpdate
    /// </summary>
    [DataContract]
        public partial class ReviewUpdate :  IEquatable<ReviewUpdate>, IValidatableObject
    {
        /// <summary>
        /// The new status for the review.
        /// </summary>
        /// <value>The new status for the review.</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum StatusEnum
        {
            /// <summary>
            /// Enum Approved for value: approved
            /// </summary>
            [EnumMember(Value = "approved")]
            Approved = 1,
            /// <summary>
            /// Enum Pending for value: pending
            /// </summary>
            [EnumMember(Value = "pending")]
            Pending = 2,
            /// <summary>
            /// Enum Rejected for value: rejected
            /// </summary>
            [EnumMember(Value = "rejected")]
            Rejected = 3        }
        /// <summary>
        /// The new status for the review.
        /// </summary>
        /// <value>The new status for the review.</value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public StatusEnum Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ReviewUpdate" /> class.
        /// </summary>
        /// <param name="reviewId">Unique identifier for the review being updated. (required).</param>
        /// <param name="status">The new status for the review. (required).</param>
        /// <param name="adminComment">Optional comment by the administrator regarding the update (e.g., reason for rejection)..</param>
        /// <param name="updatedContent">Updated content of the review, if any changes are made to the original review text..</param>
        public ReviewUpdate(long? reviewId = default(long?), StatusEnum status = default(StatusEnum), string adminComment = default(string), string updatedContent = default(string))
        {
            // to ensure "reviewId" is required (not null)
            if (reviewId == null)
            {
                throw new InvalidDataException("reviewId is a required property for ReviewUpdate and cannot be null");
            }
            else
            {
                this.ReviewId = reviewId;
            }
            // to ensure "status" is required (not null)
            if (status == null)
            {
                throw new InvalidDataException("status is a required property for ReviewUpdate and cannot be null");
            }
            else
            {
                this.Status = status;
            }
            this.AdminComment = adminComment;
            this.UpdatedContent = updatedContent;
        }
        
        /// <summary>
        /// Unique identifier for the review being updated.
        /// </summary>
        /// <value>Unique identifier for the review being updated.</value>
        [DataMember(Name="reviewId", EmitDefaultValue=false)]
        public long? ReviewId { get; set; }


        /// <summary>
        /// Optional comment by the administrator regarding the update (e.g., reason for rejection).
        /// </summary>
        /// <value>Optional comment by the administrator regarding the update (e.g., reason for rejection).</value>
        [DataMember(Name="adminComment", EmitDefaultValue=false)]
        public string AdminComment { get; set; }

        /// <summary>
        /// Updated content of the review, if any changes are made to the original review text.
        /// </summary>
        /// <value>Updated content of the review, if any changes are made to the original review text.</value>
        [DataMember(Name="updatedContent", EmitDefaultValue=false)]
        public string UpdatedContent { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ReviewUpdate {\n");
            sb.Append("  ReviewId: ").Append(ReviewId).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  AdminComment: ").Append(AdminComment).Append("\n");
            sb.Append("  UpdatedContent: ").Append(UpdatedContent).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ReviewUpdate);
        }

        /// <summary>
        /// Returns true if ReviewUpdate instances are equal
        /// </summary>
        /// <param name="input">Instance of ReviewUpdate to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ReviewUpdate input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ReviewId == input.ReviewId ||
                    (this.ReviewId != null &&
                    this.ReviewId.Equals(input.ReviewId))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.AdminComment == input.AdminComment ||
                    (this.AdminComment != null &&
                    this.AdminComment.Equals(input.AdminComment))
                ) && 
                (
                    this.UpdatedContent == input.UpdatedContent ||
                    (this.UpdatedContent != null &&
                    this.UpdatedContent.Equals(input.UpdatedContent))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ReviewId != null)
                    hashCode = hashCode * 59 + this.ReviewId.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.AdminComment != null)
                    hashCode = hashCode * 59 + this.AdminComment.GetHashCode();
                if (this.UpdatedContent != null)
                    hashCode = hashCode * 59 + this.UpdatedContent.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
