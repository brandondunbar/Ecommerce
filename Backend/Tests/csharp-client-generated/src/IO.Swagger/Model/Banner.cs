/* 
 * E-commerce API
 *
 * API for E-commerce Platform
 *
 * OpenAPI spec version: 1.0.0
 * Contact: brandon.dunbar97@gmail.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;
namespace IO.Swagger.Model
{
    /// <summary>
    /// Banner
    /// </summary>
    [DataContract]
        public partial class Banner :  IEquatable<Banner>, IValidatableObject
    {
        /// <summary>
        /// The position on the webpage where the banner should be displayed.
        /// </summary>
        /// <value>The position on the webpage where the banner should be displayed.</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum PositionEnum
        {
            /// <summary>
            /// Enum TOP for value: TOP
            /// </summary>
            [EnumMember(Value = "TOP")]
            TOP = 1,
            /// <summary>
            /// Enum MIDDLE for value: MIDDLE
            /// </summary>
            [EnumMember(Value = "MIDDLE")]
            MIDDLE = 2,
            /// <summary>
            /// Enum BOTTOM for value: BOTTOM
            /// </summary>
            [EnumMember(Value = "BOTTOM")]
            BOTTOM = 3        }
        /// <summary>
        /// The position on the webpage where the banner should be displayed.
        /// </summary>
        /// <value>The position on the webpage where the banner should be displayed.</value>
        [DataMember(Name="position", EmitDefaultValue=false)]
        public PositionEnum? Position { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Banner" /> class.
        /// </summary>
        /// <param name="bannerId">Unique identifier for the promotional banner. (required).</param>
        /// <param name="title">A short title or headline for the banner. (required).</param>
        /// <param name="imageUrl">URL of the banner image. (required).</param>
        /// <param name="linkUrl">URL to which the banner redirects when clicked. (required).</param>
        /// <param name="displayDuration">Duration (in seconds) for which the banner should be displayed to the user..</param>
        /// <param name="startDate">Date and time when the banner starts being displayed. (required).</param>
        /// <param name="endDate">Date and time when the banner stops being displayed. (required).</param>
        /// <param name="position">The position on the webpage where the banner should be displayed..</param>
        /// <param name="isActive">Indicates whether the banner is currently active and being displayed to users..</param>
        public Banner(long? bannerId = default(long?), string title = default(string), string imageUrl = default(string), string linkUrl = default(string), int? displayDuration = default(int?), DateTime? startDate = default(DateTime?), DateTime? endDate = default(DateTime?), PositionEnum? position = default(PositionEnum?), bool? isActive = default(bool?))
        {
            // to ensure "bannerId" is required (not null)
            if (bannerId == null)
            {
                throw new InvalidDataException("bannerId is a required property for Banner and cannot be null");
            }
            else
            {
                this.BannerId = bannerId;
            }
            // to ensure "title" is required (not null)
            if (title == null)
            {
                throw new InvalidDataException("title is a required property for Banner and cannot be null");
            }
            else
            {
                this.Title = title;
            }
            // to ensure "imageUrl" is required (not null)
            if (imageUrl == null)
            {
                throw new InvalidDataException("imageUrl is a required property for Banner and cannot be null");
            }
            else
            {
                this.ImageUrl = imageUrl;
            }
            // to ensure "linkUrl" is required (not null)
            if (linkUrl == null)
            {
                throw new InvalidDataException("linkUrl is a required property for Banner and cannot be null");
            }
            else
            {
                this.LinkUrl = linkUrl;
            }
            // to ensure "startDate" is required (not null)
            if (startDate == null)
            {
                throw new InvalidDataException("startDate is a required property for Banner and cannot be null");
            }
            else
            {
                this.StartDate = startDate;
            }
            // to ensure "endDate" is required (not null)
            if (endDate == null)
            {
                throw new InvalidDataException("endDate is a required property for Banner and cannot be null");
            }
            else
            {
                this.EndDate = endDate;
            }
            this.DisplayDuration = displayDuration;
            this.Position = position;
            this.IsActive = isActive;
        }
        
        /// <summary>
        /// Unique identifier for the promotional banner.
        /// </summary>
        /// <value>Unique identifier for the promotional banner.</value>
        [DataMember(Name="bannerId", EmitDefaultValue=false)]
        public long? BannerId { get; set; }

        /// <summary>
        /// A short title or headline for the banner.
        /// </summary>
        /// <value>A short title or headline for the banner.</value>
        [DataMember(Name="title", EmitDefaultValue=false)]
        public string Title { get; set; }

        /// <summary>
        /// URL of the banner image.
        /// </summary>
        /// <value>URL of the banner image.</value>
        [DataMember(Name="imageUrl", EmitDefaultValue=false)]
        public string ImageUrl { get; set; }

        /// <summary>
        /// URL to which the banner redirects when clicked.
        /// </summary>
        /// <value>URL to which the banner redirects when clicked.</value>
        [DataMember(Name="linkUrl", EmitDefaultValue=false)]
        public string LinkUrl { get; set; }

        /// <summary>
        /// Duration (in seconds) for which the banner should be displayed to the user.
        /// </summary>
        /// <value>Duration (in seconds) for which the banner should be displayed to the user.</value>
        [DataMember(Name="displayDuration", EmitDefaultValue=false)]
        public int? DisplayDuration { get; set; }

        /// <summary>
        /// Date and time when the banner starts being displayed.
        /// </summary>
        /// <value>Date and time when the banner starts being displayed.</value>
        [DataMember(Name="startDate", EmitDefaultValue=false)]
        public DateTime? StartDate { get; set; }

        /// <summary>
        /// Date and time when the banner stops being displayed.
        /// </summary>
        /// <value>Date and time when the banner stops being displayed.</value>
        [DataMember(Name="endDate", EmitDefaultValue=false)]
        public DateTime? EndDate { get; set; }


        /// <summary>
        /// Indicates whether the banner is currently active and being displayed to users.
        /// </summary>
        /// <value>Indicates whether the banner is currently active and being displayed to users.</value>
        [DataMember(Name="isActive", EmitDefaultValue=false)]
        public bool? IsActive { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Banner {\n");
            sb.Append("  BannerId: ").Append(BannerId).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  ImageUrl: ").Append(ImageUrl).Append("\n");
            sb.Append("  LinkUrl: ").Append(LinkUrl).Append("\n");
            sb.Append("  DisplayDuration: ").Append(DisplayDuration).Append("\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("  EndDate: ").Append(EndDate).Append("\n");
            sb.Append("  Position: ").Append(Position).Append("\n");
            sb.Append("  IsActive: ").Append(IsActive).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Banner);
        }

        /// <summary>
        /// Returns true if Banner instances are equal
        /// </summary>
        /// <param name="input">Instance of Banner to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Banner input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.BannerId == input.BannerId ||
                    (this.BannerId != null &&
                    this.BannerId.Equals(input.BannerId))
                ) && 
                (
                    this.Title == input.Title ||
                    (this.Title != null &&
                    this.Title.Equals(input.Title))
                ) && 
                (
                    this.ImageUrl == input.ImageUrl ||
                    (this.ImageUrl != null &&
                    this.ImageUrl.Equals(input.ImageUrl))
                ) && 
                (
                    this.LinkUrl == input.LinkUrl ||
                    (this.LinkUrl != null &&
                    this.LinkUrl.Equals(input.LinkUrl))
                ) && 
                (
                    this.DisplayDuration == input.DisplayDuration ||
                    (this.DisplayDuration != null &&
                    this.DisplayDuration.Equals(input.DisplayDuration))
                ) && 
                (
                    this.StartDate == input.StartDate ||
                    (this.StartDate != null &&
                    this.StartDate.Equals(input.StartDate))
                ) && 
                (
                    this.EndDate == input.EndDate ||
                    (this.EndDate != null &&
                    this.EndDate.Equals(input.EndDate))
                ) && 
                (
                    this.Position == input.Position ||
                    (this.Position != null &&
                    this.Position.Equals(input.Position))
                ) && 
                (
                    this.IsActive == input.IsActive ||
                    (this.IsActive != null &&
                    this.IsActive.Equals(input.IsActive))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.BannerId != null)
                    hashCode = hashCode * 59 + this.BannerId.GetHashCode();
                if (this.Title != null)
                    hashCode = hashCode * 59 + this.Title.GetHashCode();
                if (this.ImageUrl != null)
                    hashCode = hashCode * 59 + this.ImageUrl.GetHashCode();
                if (this.LinkUrl != null)
                    hashCode = hashCode * 59 + this.LinkUrl.GetHashCode();
                if (this.DisplayDuration != null)
                    hashCode = hashCode * 59 + this.DisplayDuration.GetHashCode();
                if (this.StartDate != null)
                    hashCode = hashCode * 59 + this.StartDate.GetHashCode();
                if (this.EndDate != null)
                    hashCode = hashCode * 59 + this.EndDate.GetHashCode();
                if (this.Position != null)
                    hashCode = hashCode * 59 + this.Position.GetHashCode();
                if (this.IsActive != null)
                    hashCode = hashCode * 59 + this.IsActive.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
