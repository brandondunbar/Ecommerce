/* 
 * E-commerce API
 *
 * API for E-commerce Platform
 *
 * OpenAPI spec version: 1.0.0
 * Contact: brandon.dunbar97@gmail.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;
namespace IO.Swagger.Model
{
    /// <summary>
    /// OrderUpdate
    /// </summary>
    [DataContract]
        public partial class OrderUpdate :  IEquatable<OrderUpdate>, IValidatableObject
    {
        /// <summary>
        /// The updated status of the order.
        /// </summary>
        /// <value>The updated status of the order.</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum StatusEnum
        {
            /// <summary>
            /// Enum Pending for value: pending
            /// </summary>
            [EnumMember(Value = "pending")]
            Pending = 1,
            /// <summary>
            /// Enum Processed for value: processed
            /// </summary>
            [EnumMember(Value = "processed")]
            Processed = 2,
            /// <summary>
            /// Enum Shipped for value: shipped
            /// </summary>
            [EnumMember(Value = "shipped")]
            Shipped = 3,
            /// <summary>
            /// Enum Completed for value: completed
            /// </summary>
            [EnumMember(Value = "completed")]
            Completed = 4,
            /// <summary>
            /// Enum Canceled for value: canceled
            /// </summary>
            [EnumMember(Value = "canceled")]
            Canceled = 5,
            /// <summary>
            /// Enum Returned for value: returned
            /// </summary>
            [EnumMember(Value = "returned")]
            Returned = 6        }
        /// <summary>
        /// The updated status of the order.
        /// </summary>
        /// <value>The updated status of the order.</value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public StatusEnum Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="OrderUpdate" /> class.
        /// </summary>
        /// <param name="status">The updated status of the order. (required).</param>
        /// <param name="trackingNumber">If the order is shipped, this field can be updated with the tracking number for the shipment..</param>
        /// <param name="estimatedDeliveryDate">An updated estimated delivery date for the order..</param>
        /// <param name="notes">Any additional administrative notes or comments about the order..</param>
        /// <param name="cancelReason">If the order is canceled, a reason can be provided here..</param>
        /// <param name="returnReason">If the order is returned, a reason can be provided here..</param>
        public OrderUpdate(StatusEnum status = default(StatusEnum), string trackingNumber = default(string), DateTime? estimatedDeliveryDate = default(DateTime?), string notes = default(string), string cancelReason = default(string), string returnReason = default(string))
        {
            // to ensure "status" is required (not null)
            if (status == null)
            {
                throw new InvalidDataException("status is a required property for OrderUpdate and cannot be null");
            }
            else
            {
                this.Status = status;
            }
            this.TrackingNumber = trackingNumber;
            this.EstimatedDeliveryDate = estimatedDeliveryDate;
            this.Notes = notes;
            this.CancelReason = cancelReason;
            this.ReturnReason = returnReason;
        }
        

        /// <summary>
        /// If the order is shipped, this field can be updated with the tracking number for the shipment.
        /// </summary>
        /// <value>If the order is shipped, this field can be updated with the tracking number for the shipment.</value>
        [DataMember(Name="trackingNumber", EmitDefaultValue=false)]
        public string TrackingNumber { get; set; }

        /// <summary>
        /// An updated estimated delivery date for the order.
        /// </summary>
        /// <value>An updated estimated delivery date for the order.</value>
        [DataMember(Name="estimatedDeliveryDate", EmitDefaultValue=false)]
        public DateTime? EstimatedDeliveryDate { get; set; }

        /// <summary>
        /// Any additional administrative notes or comments about the order.
        /// </summary>
        /// <value>Any additional administrative notes or comments about the order.</value>
        [DataMember(Name="notes", EmitDefaultValue=false)]
        public string Notes { get; set; }

        /// <summary>
        /// If the order is canceled, a reason can be provided here.
        /// </summary>
        /// <value>If the order is canceled, a reason can be provided here.</value>
        [DataMember(Name="cancelReason", EmitDefaultValue=false)]
        public string CancelReason { get; set; }

        /// <summary>
        /// If the order is returned, a reason can be provided here.
        /// </summary>
        /// <value>If the order is returned, a reason can be provided here.</value>
        [DataMember(Name="returnReason", EmitDefaultValue=false)]
        public string ReturnReason { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OrderUpdate {\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  TrackingNumber: ").Append(TrackingNumber).Append("\n");
            sb.Append("  EstimatedDeliveryDate: ").Append(EstimatedDeliveryDate).Append("\n");
            sb.Append("  Notes: ").Append(Notes).Append("\n");
            sb.Append("  CancelReason: ").Append(CancelReason).Append("\n");
            sb.Append("  ReturnReason: ").Append(ReturnReason).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OrderUpdate);
        }

        /// <summary>
        /// Returns true if OrderUpdate instances are equal
        /// </summary>
        /// <param name="input">Instance of OrderUpdate to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OrderUpdate input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.TrackingNumber == input.TrackingNumber ||
                    (this.TrackingNumber != null &&
                    this.TrackingNumber.Equals(input.TrackingNumber))
                ) && 
                (
                    this.EstimatedDeliveryDate == input.EstimatedDeliveryDate ||
                    (this.EstimatedDeliveryDate != null &&
                    this.EstimatedDeliveryDate.Equals(input.EstimatedDeliveryDate))
                ) && 
                (
                    this.Notes == input.Notes ||
                    (this.Notes != null &&
                    this.Notes.Equals(input.Notes))
                ) && 
                (
                    this.CancelReason == input.CancelReason ||
                    (this.CancelReason != null &&
                    this.CancelReason.Equals(input.CancelReason))
                ) && 
                (
                    this.ReturnReason == input.ReturnReason ||
                    (this.ReturnReason != null &&
                    this.ReturnReason.Equals(input.ReturnReason))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.TrackingNumber != null)
                    hashCode = hashCode * 59 + this.TrackingNumber.GetHashCode();
                if (this.EstimatedDeliveryDate != null)
                    hashCode = hashCode * 59 + this.EstimatedDeliveryDate.GetHashCode();
                if (this.Notes != null)
                    hashCode = hashCode * 59 + this.Notes.GetHashCode();
                if (this.CancelReason != null)
                    hashCode = hashCode * 59 + this.CancelReason.GetHashCode();
                if (this.ReturnReason != null)
                    hashCode = hashCode * 59 + this.ReturnReason.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
