/* 
 * E-commerce API
 *
 * API for E-commerce Platform
 *
 * OpenAPI spec version: 1.0.0
 * Contact: brandon.dunbar97@gmail.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;
namespace IO.Swagger.Model
{
    /// <summary>
    /// Promotion
    /// </summary>
    [DataContract]
        public partial class Promotion :  IEquatable<Promotion>, IValidatableObject
    {
        /// <summary>
        /// Type of promotion, e.g., percentage discount, flat discount, etc.
        /// </summary>
        /// <value>Type of promotion, e.g., percentage discount, flat discount, etc.</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum TypeEnum
        {
            /// <summary>
            /// Enum Percentage for value: percentage
            /// </summary>
            [EnumMember(Value = "percentage")]
            Percentage = 1,
            /// <summary>
            /// Enum Flatdiscount for value: flat_discount
            /// </summary>
            [EnumMember(Value = "flat_discount")]
            Flatdiscount = 2,
            /// <summary>
            /// Enum Buyonegetone for value: buy_one_get_one
            /// </summary>
            [EnumMember(Value = "buy_one_get_one")]
            Buyonegetone = 3,
            /// <summary>
            /// Enum Other for value: other
            /// </summary>
            [EnumMember(Value = "other")]
            Other = 4        }
        /// <summary>
        /// Type of promotion, e.g., percentage discount, flat discount, etc.
        /// </summary>
        /// <value>Type of promotion, e.g., percentage discount, flat discount, etc.</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public TypeEnum Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Promotion" /> class.
        /// </summary>
        /// <param name="promotionId">Unique identifier for the promotion. (required).</param>
        /// <param name="name">Name or title of the promotion. (required).</param>
        /// <param name="type">Type of promotion, e.g., percentage discount, flat discount, etc. (required).</param>
        /// <param name="value">The value associated with the promotion. For example, if it&#x27;s a percentage discount, this might be \&quot;10\&quot; for 10%. (required).</param>
        /// <param name="startDate">Start date and time for when the promotion becomes active. (required).</param>
        /// <param name="endDate">End date and time for when the promotion expires. (required).</param>
        /// <param name="applicableProducts">List of product IDs to which the promotion is applicable. If empty, it might be applicable to all products or specific categories..</param>
        /// <param name="notes">Any additional notes or details about the promotion..</param>
        /// <param name="createdDate">The date and time when the promotion was created..</param>
        /// <param name="modifiedDate">The last date and time when the promotion was updated..</param>
        public Promotion(long? promotionId = default(long?), string name = default(string), TypeEnum type = default(TypeEnum), decimal? value = default(decimal?), DateTime? startDate = default(DateTime?), DateTime? endDate = default(DateTime?), List<long?> applicableProducts = default(List<long?>), string notes = default(string), DateTime? createdDate = default(DateTime?), DateTime? modifiedDate = default(DateTime?))
        {
            // to ensure "promotionId" is required (not null)
            if (promotionId == null)
            {
                throw new InvalidDataException("promotionId is a required property for Promotion and cannot be null");
            }
            else
            {
                this.PromotionId = promotionId;
            }
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new InvalidDataException("name is a required property for Promotion and cannot be null");
            }
            else
            {
                this.Name = name;
            }
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new InvalidDataException("type is a required property for Promotion and cannot be null");
            }
            else
            {
                this.Type = type;
            }
            // to ensure "value" is required (not null)
            if (value == null)
            {
                throw new InvalidDataException("value is a required property for Promotion and cannot be null");
            }
            else
            {
                this.Value = value;
            }
            // to ensure "startDate" is required (not null)
            if (startDate == null)
            {
                throw new InvalidDataException("startDate is a required property for Promotion and cannot be null");
            }
            else
            {
                this.StartDate = startDate;
            }
            // to ensure "endDate" is required (not null)
            if (endDate == null)
            {
                throw new InvalidDataException("endDate is a required property for Promotion and cannot be null");
            }
            else
            {
                this.EndDate = endDate;
            }
            this.ApplicableProducts = applicableProducts;
            this.Notes = notes;
            this.CreatedDate = createdDate;
            this.ModifiedDate = modifiedDate;
        }
        
        /// <summary>
        /// Unique identifier for the promotion.
        /// </summary>
        /// <value>Unique identifier for the promotion.</value>
        [DataMember(Name="promotionId", EmitDefaultValue=false)]
        public long? PromotionId { get; set; }

        /// <summary>
        /// Name or title of the promotion.
        /// </summary>
        /// <value>Name or title of the promotion.</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }


        /// <summary>
        /// The value associated with the promotion. For example, if it&#x27;s a percentage discount, this might be \&quot;10\&quot; for 10%.
        /// </summary>
        /// <value>The value associated with the promotion. For example, if it&#x27;s a percentage discount, this might be \&quot;10\&quot; for 10%.</value>
        [DataMember(Name="value", EmitDefaultValue=false)]
        public decimal? Value { get; set; }

        /// <summary>
        /// Start date and time for when the promotion becomes active.
        /// </summary>
        /// <value>Start date and time for when the promotion becomes active.</value>
        [DataMember(Name="startDate", EmitDefaultValue=false)]
        public DateTime? StartDate { get; set; }

        /// <summary>
        /// End date and time for when the promotion expires.
        /// </summary>
        /// <value>End date and time for when the promotion expires.</value>
        [DataMember(Name="endDate", EmitDefaultValue=false)]
        public DateTime? EndDate { get; set; }

        /// <summary>
        /// List of product IDs to which the promotion is applicable. If empty, it might be applicable to all products or specific categories.
        /// </summary>
        /// <value>List of product IDs to which the promotion is applicable. If empty, it might be applicable to all products or specific categories.</value>
        [DataMember(Name="applicableProducts", EmitDefaultValue=false)]
        public List<long?> ApplicableProducts { get; set; }

        /// <summary>
        /// Any additional notes or details about the promotion.
        /// </summary>
        /// <value>Any additional notes or details about the promotion.</value>
        [DataMember(Name="notes", EmitDefaultValue=false)]
        public string Notes { get; set; }

        /// <summary>
        /// The date and time when the promotion was created.
        /// </summary>
        /// <value>The date and time when the promotion was created.</value>
        [DataMember(Name="createdDate", EmitDefaultValue=false)]
        public DateTime? CreatedDate { get; set; }

        /// <summary>
        /// The last date and time when the promotion was updated.
        /// </summary>
        /// <value>The last date and time when the promotion was updated.</value>
        [DataMember(Name="modifiedDate", EmitDefaultValue=false)]
        public DateTime? ModifiedDate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Promotion {\n");
            sb.Append("  PromotionId: ").Append(PromotionId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("  EndDate: ").Append(EndDate).Append("\n");
            sb.Append("  ApplicableProducts: ").Append(ApplicableProducts).Append("\n");
            sb.Append("  Notes: ").Append(Notes).Append("\n");
            sb.Append("  CreatedDate: ").Append(CreatedDate).Append("\n");
            sb.Append("  ModifiedDate: ").Append(ModifiedDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Promotion);
        }

        /// <summary>
        /// Returns true if Promotion instances are equal
        /// </summary>
        /// <param name="input">Instance of Promotion to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Promotion input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.PromotionId == input.PromotionId ||
                    (this.PromotionId != null &&
                    this.PromotionId.Equals(input.PromotionId))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Value == input.Value ||
                    (this.Value != null &&
                    this.Value.Equals(input.Value))
                ) && 
                (
                    this.StartDate == input.StartDate ||
                    (this.StartDate != null &&
                    this.StartDate.Equals(input.StartDate))
                ) && 
                (
                    this.EndDate == input.EndDate ||
                    (this.EndDate != null &&
                    this.EndDate.Equals(input.EndDate))
                ) && 
                (
                    this.ApplicableProducts == input.ApplicableProducts ||
                    this.ApplicableProducts != null &&
                    input.ApplicableProducts != null &&
                    this.ApplicableProducts.SequenceEqual(input.ApplicableProducts)
                ) && 
                (
                    this.Notes == input.Notes ||
                    (this.Notes != null &&
                    this.Notes.Equals(input.Notes))
                ) && 
                (
                    this.CreatedDate == input.CreatedDate ||
                    (this.CreatedDate != null &&
                    this.CreatedDate.Equals(input.CreatedDate))
                ) && 
                (
                    this.ModifiedDate == input.ModifiedDate ||
                    (this.ModifiedDate != null &&
                    this.ModifiedDate.Equals(input.ModifiedDate))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PromotionId != null)
                    hashCode = hashCode * 59 + this.PromotionId.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Value != null)
                    hashCode = hashCode * 59 + this.Value.GetHashCode();
                if (this.StartDate != null)
                    hashCode = hashCode * 59 + this.StartDate.GetHashCode();
                if (this.EndDate != null)
                    hashCode = hashCode * 59 + this.EndDate.GetHashCode();
                if (this.ApplicableProducts != null)
                    hashCode = hashCode * 59 + this.ApplicableProducts.GetHashCode();
                if (this.Notes != null)
                    hashCode = hashCode * 59 + this.Notes.GetHashCode();
                if (this.CreatedDate != null)
                    hashCode = hashCode * 59 + this.CreatedDate.GetHashCode();
                if (this.ModifiedDate != null)
                    hashCode = hashCode * 59 + this.ModifiedDate.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
