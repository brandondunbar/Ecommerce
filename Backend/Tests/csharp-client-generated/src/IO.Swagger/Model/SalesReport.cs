/* 
 * E-commerce API
 *
 * API for E-commerce Platform
 *
 * OpenAPI spec version: 1.0.0
 * Contact: brandon.dunbar97@gmail.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;
namespace IO.Swagger.Model
{
    /// <summary>
    /// SalesReport
    /// </summary>
    [DataContract]
        public partial class SalesReport :  IEquatable<SalesReport>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SalesReport" /> class.
        /// </summary>
        /// <param name="startDate">The start date for the report period. (required).</param>
        /// <param name="endDate">The end date for the report period. (required).</param>
        /// <param name="totalSales">Total number of sales/orders during the report period. (required).</param>
        /// <param name="totalRevenue">Total revenue generated during the report period. (required).</param>
        /// <param name="averageOrderValue">The average value of orders during the report period. (required).</param>
        /// <param name="topSellingProducts">topSellingProducts.</param>
        /// <param name="leastSellingProducts">leastSellingProducts.</param>
        /// <param name="dailyBreakdown">dailyBreakdown.</param>
        public SalesReport(DateTime? startDate = default(DateTime?), DateTime? endDate = default(DateTime?), int? totalSales = default(int?), float? totalRevenue = default(float?), float? averageOrderValue = default(float?), List<SalesReportTopSellingProducts> topSellingProducts = default(List<SalesReportTopSellingProducts>), List<SalesReportTopSellingProducts> leastSellingProducts = default(List<SalesReportTopSellingProducts>), List<SalesReportDailyBreakdown> dailyBreakdown = default(List<SalesReportDailyBreakdown>))
        {
            // to ensure "startDate" is required (not null)
            if (startDate == null)
            {
                throw new InvalidDataException("startDate is a required property for SalesReport and cannot be null");
            }
            else
            {
                this.StartDate = startDate;
            }
            // to ensure "endDate" is required (not null)
            if (endDate == null)
            {
                throw new InvalidDataException("endDate is a required property for SalesReport and cannot be null");
            }
            else
            {
                this.EndDate = endDate;
            }
            // to ensure "totalSales" is required (not null)
            if (totalSales == null)
            {
                throw new InvalidDataException("totalSales is a required property for SalesReport and cannot be null");
            }
            else
            {
                this.TotalSales = totalSales;
            }
            // to ensure "totalRevenue" is required (not null)
            if (totalRevenue == null)
            {
                throw new InvalidDataException("totalRevenue is a required property for SalesReport and cannot be null");
            }
            else
            {
                this.TotalRevenue = totalRevenue;
            }
            // to ensure "averageOrderValue" is required (not null)
            if (averageOrderValue == null)
            {
                throw new InvalidDataException("averageOrderValue is a required property for SalesReport and cannot be null");
            }
            else
            {
                this.AverageOrderValue = averageOrderValue;
            }
            this.TopSellingProducts = topSellingProducts;
            this.LeastSellingProducts = leastSellingProducts;
            this.DailyBreakdown = dailyBreakdown;
        }
        
        /// <summary>
        /// The start date for the report period.
        /// </summary>
        /// <value>The start date for the report period.</value>
        [DataMember(Name="startDate", EmitDefaultValue=false)]
        [JsonConverter(typeof(SwaggerDateConverter))]
        public DateTime? StartDate { get; set; }

        /// <summary>
        /// The end date for the report period.
        /// </summary>
        /// <value>The end date for the report period.</value>
        [DataMember(Name="endDate", EmitDefaultValue=false)]
        [JsonConverter(typeof(SwaggerDateConverter))]
        public DateTime? EndDate { get; set; }

        /// <summary>
        /// Total number of sales/orders during the report period.
        /// </summary>
        /// <value>Total number of sales/orders during the report period.</value>
        [DataMember(Name="totalSales", EmitDefaultValue=false)]
        public int? TotalSales { get; set; }

        /// <summary>
        /// Total revenue generated during the report period.
        /// </summary>
        /// <value>Total revenue generated during the report period.</value>
        [DataMember(Name="totalRevenue", EmitDefaultValue=false)]
        public float? TotalRevenue { get; set; }

        /// <summary>
        /// The average value of orders during the report period.
        /// </summary>
        /// <value>The average value of orders during the report period.</value>
        [DataMember(Name="averageOrderValue", EmitDefaultValue=false)]
        public float? AverageOrderValue { get; set; }

        /// <summary>
        /// Gets or Sets TopSellingProducts
        /// </summary>
        [DataMember(Name="topSellingProducts", EmitDefaultValue=false)]
        public List<SalesReportTopSellingProducts> TopSellingProducts { get; set; }

        /// <summary>
        /// Gets or Sets LeastSellingProducts
        /// </summary>
        [DataMember(Name="leastSellingProducts", EmitDefaultValue=false)]
        public List<SalesReportTopSellingProducts> LeastSellingProducts { get; set; }

        /// <summary>
        /// Gets or Sets DailyBreakdown
        /// </summary>
        [DataMember(Name="dailyBreakdown", EmitDefaultValue=false)]
        public List<SalesReportDailyBreakdown> DailyBreakdown { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SalesReport {\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("  EndDate: ").Append(EndDate).Append("\n");
            sb.Append("  TotalSales: ").Append(TotalSales).Append("\n");
            sb.Append("  TotalRevenue: ").Append(TotalRevenue).Append("\n");
            sb.Append("  AverageOrderValue: ").Append(AverageOrderValue).Append("\n");
            sb.Append("  TopSellingProducts: ").Append(TopSellingProducts).Append("\n");
            sb.Append("  LeastSellingProducts: ").Append(LeastSellingProducts).Append("\n");
            sb.Append("  DailyBreakdown: ").Append(DailyBreakdown).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SalesReport);
        }

        /// <summary>
        /// Returns true if SalesReport instances are equal
        /// </summary>
        /// <param name="input">Instance of SalesReport to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SalesReport input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.StartDate == input.StartDate ||
                    (this.StartDate != null &&
                    this.StartDate.Equals(input.StartDate))
                ) && 
                (
                    this.EndDate == input.EndDate ||
                    (this.EndDate != null &&
                    this.EndDate.Equals(input.EndDate))
                ) && 
                (
                    this.TotalSales == input.TotalSales ||
                    (this.TotalSales != null &&
                    this.TotalSales.Equals(input.TotalSales))
                ) && 
                (
                    this.TotalRevenue == input.TotalRevenue ||
                    (this.TotalRevenue != null &&
                    this.TotalRevenue.Equals(input.TotalRevenue))
                ) && 
                (
                    this.AverageOrderValue == input.AverageOrderValue ||
                    (this.AverageOrderValue != null &&
                    this.AverageOrderValue.Equals(input.AverageOrderValue))
                ) && 
                (
                    this.TopSellingProducts == input.TopSellingProducts ||
                    this.TopSellingProducts != null &&
                    input.TopSellingProducts != null &&
                    this.TopSellingProducts.SequenceEqual(input.TopSellingProducts)
                ) && 
                (
                    this.LeastSellingProducts == input.LeastSellingProducts ||
                    this.LeastSellingProducts != null &&
                    input.LeastSellingProducts != null &&
                    this.LeastSellingProducts.SequenceEqual(input.LeastSellingProducts)
                ) && 
                (
                    this.DailyBreakdown == input.DailyBreakdown ||
                    this.DailyBreakdown != null &&
                    input.DailyBreakdown != null &&
                    this.DailyBreakdown.SequenceEqual(input.DailyBreakdown)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.StartDate != null)
                    hashCode = hashCode * 59 + this.StartDate.GetHashCode();
                if (this.EndDate != null)
                    hashCode = hashCode * 59 + this.EndDate.GetHashCode();
                if (this.TotalSales != null)
                    hashCode = hashCode * 59 + this.TotalSales.GetHashCode();
                if (this.TotalRevenue != null)
                    hashCode = hashCode * 59 + this.TotalRevenue.GetHashCode();
                if (this.AverageOrderValue != null)
                    hashCode = hashCode * 59 + this.AverageOrderValue.GetHashCode();
                if (this.TopSellingProducts != null)
                    hashCode = hashCode * 59 + this.TopSellingProducts.GetHashCode();
                if (this.LeastSellingProducts != null)
                    hashCode = hashCode * 59 + this.LeastSellingProducts.GetHashCode();
                if (this.DailyBreakdown != null)
                    hashCode = hashCode * 59 + this.DailyBreakdown.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
