/* 
 * E-commerce API
 *
 * API for E-commerce Platform
 *
 * OpenAPI spec version: 1.0.0
 * Contact: brandon.dunbar97@gmail.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface IAdminApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Retrieve a list of affiliates
        /// </summary>
        /// <remarks>
        /// Fetches a list of all affiliates associated with the platform.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;Affiliate&gt;</returns>
        List<Affiliate> ApiAdminAffiliatesGet ();

        /// <summary>
        /// Retrieve a list of affiliates
        /// </summary>
        /// <remarks>
        /// Fetches a list of all affiliates associated with the platform.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;Affiliate&gt;</returns>
        ApiResponse<List<Affiliate>> ApiAdminAffiliatesGetWithHttpInfo ();
        /// <summary>
        /// Add a new affiliate
        /// </summary>
        /// <remarks>
        /// Registers a new affiliate partner with the platform.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Data for the new affiliate.</param>
        /// <returns></returns>
        void ApiAdminAffiliatesPost (AffiliateCreate body);

        /// <summary>
        /// Add a new affiliate
        /// </summary>
        /// <remarks>
        /// Registers a new affiliate partner with the platform.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Data for the new affiliate.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiAdminAffiliatesPostWithHttpInfo (AffiliateCreate body);
        /// <summary>
        /// Retrieve a list of promotional banners
        /// </summary>
        /// <remarks>
        /// Fetches a list of all promotional banners currently on the platform.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;Banner&gt;</returns>
        List<Banner> ApiAdminContentBannersGet ();

        /// <summary>
        /// Retrieve a list of promotional banners
        /// </summary>
        /// <remarks>
        /// Fetches a list of all promotional banners currently on the platform.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;Banner&gt;</returns>
        ApiResponse<List<Banner>> ApiAdminContentBannersGetWithHttpInfo ();
        /// <summary>
        /// Create a new promotional banner
        /// </summary>
        /// <remarks>
        /// Allows administrators to add a new promotional banner.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Data for the new promotional banner.</param>
        /// <returns></returns>
        void ApiAdminContentBannersPost (BannerCreate body);

        /// <summary>
        /// Create a new promotional banner
        /// </summary>
        /// <remarks>
        /// Allows administrators to add a new promotional banner.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Data for the new promotional banner.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiAdminContentBannersPostWithHttpInfo (BannerCreate body);
        /// <summary>
        /// Retrieve a list of content pages
        /// </summary>
        /// <remarks>
        /// Fetches a list of all static content pages available on the platform.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;ContentPage&gt;</returns>
        List<ContentPage> ApiAdminContentPagesGet ();

        /// <summary>
        /// Retrieve a list of content pages
        /// </summary>
        /// <remarks>
        /// Fetches a list of all static content pages available on the platform.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;ContentPage&gt;</returns>
        ApiResponse<List<ContentPage>> ApiAdminContentPagesGetWithHttpInfo ();
        /// <summary>
        /// Retrieve a list of user feedback
        /// </summary>
        /// <remarks>
        /// Lists all feedback submissions with filtering and pagination capabilities.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">Filter feedback by status (e.g., reviewed, pending). (optional)</param>
        /// <param name="type">Filter feedback by type (e.g., bug, feature request, comment). (optional)</param>
        /// <param name="page">Pagination - page number. (optional)</param>
        /// <param name="limit">Pagination - number of feedback items per page. (optional)</param>
        /// <returns>List&lt;Feedback&gt;</returns>
        List<Feedback> ApiAdminFeedbackGet (string status = null, string type = null, int? page = null, int? limit = null);

        /// <summary>
        /// Retrieve a list of user feedback
        /// </summary>
        /// <remarks>
        /// Lists all feedback submissions with filtering and pagination capabilities.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">Filter feedback by status (e.g., reviewed, pending). (optional)</param>
        /// <param name="type">Filter feedback by type (e.g., bug, feature request, comment). (optional)</param>
        /// <param name="page">Pagination - page number. (optional)</param>
        /// <param name="limit">Pagination - number of feedback items per page. (optional)</param>
        /// <returns>ApiResponse of List&lt;Feedback&gt;</returns>
        ApiResponse<List<Feedback>> ApiAdminFeedbackGetWithHttpInfo (string status = null, string type = null, int? page = null, int? limit = null);
        /// <summary>
        /// Update feedback details
        /// </summary>
        /// <remarks>
        /// Allows administrators to update feedback status or add comments.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Feedback update details</param>
        /// <returns></returns>
        void ApiAdminFeedbackPut (FeedbackUpdate body);

        /// <summary>
        /// Update feedback details
        /// </summary>
        /// <remarks>
        /// Allows administrators to update feedback status or add comments.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Feedback update details</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiAdminFeedbackPutWithHttpInfo (FeedbackUpdate body);
        /// <summary>
        /// List all inventory items
        /// </summary>
        /// <remarks>
        /// Provides a list of all products with their current inventory levels and other related details.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="belowThreshold">Filter products that have inventory below a certain threshold. (optional)</param>
        /// <returns>List&lt;InventoryItem&gt;</returns>
        List<InventoryItem> ApiAdminInventoryGet (int? belowThreshold = null);

        /// <summary>
        /// List all inventory items
        /// </summary>
        /// <remarks>
        /// Provides a list of all products with their current inventory levels and other related details.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="belowThreshold">Filter products that have inventory below a certain threshold. (optional)</param>
        /// <returns>ApiResponse of List&lt;InventoryItem&gt;</returns>
        ApiResponse<List<InventoryItem>> ApiAdminInventoryGetWithHttpInfo (int? belowThreshold = null);
        /// <summary>
        /// Bulk update inventory
        /// </summary>
        /// <remarks>
        /// Allows administrators to update inventory levels for multiple products at once.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">List of inventory updates.</param>
        /// <returns></returns>
        void ApiAdminInventoryPut (List<InventoryUpdate> body);

        /// <summary>
        /// Bulk update inventory
        /// </summary>
        /// <remarks>
        /// Allows administrators to update inventory levels for multiple products at once.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">List of inventory updates.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiAdminInventoryPutWithHttpInfo (List<InventoryUpdate> body);
        /// <summary>
        /// Retrieve system logs
        /// </summary>
        /// <remarks>
        /// Fetches logs based on filters like date range, log level, or specific events.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">Starting date to filter logs. (optional)</param>
        /// <param name="endDate">Ending date to filter logs. (optional)</param>
        /// <param name="logLevel">Level of log (e.g., INFO, ERROR, WARNING). (optional)</param>
        /// <param name="_event">Specific event to filter logs. (optional)</param>
        /// <returns>List&lt;SystemLog&gt;</returns>
        List<SystemLog> ApiAdminLogsGet (DateTime? startDate = null, DateTime? endDate = null, string logLevel = null, string _event = null);

        /// <summary>
        /// Retrieve system logs
        /// </summary>
        /// <remarks>
        /// Fetches logs based on filters like date range, log level, or specific events.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">Starting date to filter logs. (optional)</param>
        /// <param name="endDate">Ending date to filter logs. (optional)</param>
        /// <param name="logLevel">Level of log (e.g., INFO, ERROR, WARNING). (optional)</param>
        /// <param name="_event">Specific event to filter logs. (optional)</param>
        /// <returns>ApiResponse of List&lt;SystemLog&gt;</returns>
        ApiResponse<List<SystemLog>> ApiAdminLogsGetWithHttpInfo (DateTime? startDate = null, DateTime? endDate = null, string logLevel = null, string _event = null);
        /// <summary>
        /// Retrieve system monitoring data
        /// </summary>
        /// <remarks>
        /// Fetches monitoring metrics based on specified filters like time range or specific metrics.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startTime">Starting timestamp to filter monitoring data. (optional)</param>
        /// <param name="endTime">Ending timestamp to filter monitoring data. (optional)</param>
        /// <param name="metric">Specific metric to retrieve (e.g., \&quot;CPU_Usage\&quot;, \&quot;Response_Time\&quot;). (optional)</param>
        /// <returns>List&lt;MonitoringMetric&gt;</returns>
        List<MonitoringMetric> ApiAdminMonitoringGet (DateTime? startTime = null, DateTime? endTime = null, string metric = null);

        /// <summary>
        /// Retrieve system monitoring data
        /// </summary>
        /// <remarks>
        /// Fetches monitoring metrics based on specified filters like time range or specific metrics.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startTime">Starting timestamp to filter monitoring data. (optional)</param>
        /// <param name="endTime">Ending timestamp to filter monitoring data. (optional)</param>
        /// <param name="metric">Specific metric to retrieve (e.g., \&quot;CPU_Usage\&quot;, \&quot;Response_Time\&quot;). (optional)</param>
        /// <returns>ApiResponse of List&lt;MonitoringMetric&gt;</returns>
        ApiResponse<List<MonitoringMetric>> ApiAdminMonitoringGetWithHttpInfo (DateTime? startTime = null, DateTime? endTime = null, string metric = null);
        /// <summary>
        /// Send a notification to a user
        /// </summary>
        /// <remarks>
        /// Allows authorized entities (e.g., administrators or automated systems) to send a notification to a specific user.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Notification details and target user</param>
        /// <returns></returns>
        void ApiAdminNotificationsPost (AdminNotificationsBody body);

        /// <summary>
        /// Send a notification to a user
        /// </summary>
        /// <remarks>
        /// Allows authorized entities (e.g., administrators or automated systems) to send a notification to a specific user.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Notification details and target user</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiAdminNotificationsPostWithHttpInfo (AdminNotificationsBody body);
        /// <summary>
        /// List all orders
        /// </summary>
        /// <remarks>
        /// Provides a list of all orders placed on the platform, with filters for date, status, etc.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">Filter orders by their status (e.g., \&quot;pending\&quot;, \&quot;shipped\&quot;, \&quot;completed\&quot;, \&quot;returned\&quot;). (optional)</param>
        /// <param name="fromDate">Filter orders placed after this date. (optional)</param>
        /// <param name="toDate">Filter orders placed before this date. (optional)</param>
        /// <returns>List&lt;Order&gt;</returns>
        List<Order> ApiAdminOrdersGet (string status = null, DateTime? fromDate = null, DateTime? toDate = null);

        /// <summary>
        /// List all orders
        /// </summary>
        /// <remarks>
        /// Provides a list of all orders placed on the platform, with filters for date, status, etc.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">Filter orders by their status (e.g., \&quot;pending\&quot;, \&quot;shipped\&quot;, \&quot;completed\&quot;, \&quot;returned\&quot;). (optional)</param>
        /// <param name="fromDate">Filter orders placed after this date. (optional)</param>
        /// <param name="toDate">Filter orders placed before this date. (optional)</param>
        /// <returns>ApiResponse of List&lt;Order&gt;</returns>
        ApiResponse<List<Order>> ApiAdminOrdersGetWithHttpInfo (string status = null, DateTime? fromDate = null, DateTime? toDate = null);
        /// <summary>
        /// Bulk update orders
        /// </summary>
        /// <remarks>
        /// Allows administrators to update multiple orders at once, typically for changing order status.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">List of orders with updated data.</param>
        /// <returns></returns>
        void ApiAdminOrdersPut (List<OrderUpdate> body);

        /// <summary>
        /// Bulk update orders
        /// </summary>
        /// <remarks>
        /// Allows administrators to update multiple orders at once, typically for changing order status.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">List of orders with updated data.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiAdminOrdersPutWithHttpInfo (List<OrderUpdate> body);
        /// <summary>
        /// Retrieve a list of business partnerships
        /// </summary>
        /// <remarks>
        /// Fetches a list of all business partnerships associated with the platform.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;Partnership&gt;</returns>
        List<Partnership> ApiAdminPartnershipsGet ();

        /// <summary>
        /// Retrieve a list of business partnerships
        /// </summary>
        /// <remarks>
        /// Fetches a list of all business partnerships associated with the platform.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;Partnership&gt;</returns>
        ApiResponse<List<Partnership>> ApiAdminPartnershipsGetWithHttpInfo ();
        /// <summary>
        /// Add a new business partnership
        /// </summary>
        /// <remarks>
        /// Registers a new business partnership or collaboration with the platform.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Data for the new partnership.</param>
        /// <returns></returns>
        void ApiAdminPartnershipsPost (PartnershipCreate body);

        /// <summary>
        /// Add a new business partnership
        /// </summary>
        /// <remarks>
        /// Registers a new business partnership or collaboration with the platform.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Data for the new partnership.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiAdminPartnershipsPostWithHttpInfo (PartnershipCreate body);
        /// <summary>
        /// Delete a promotion
        /// </summary>
        /// <remarks>
        /// Allows administrators to delete an existing promotion.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="promotionId">ID of the promotion to delete.</param>
        /// <returns></returns>
        void ApiAdminPromotionsDelete (int? promotionId);

        /// <summary>
        /// Delete a promotion
        /// </summary>
        /// <remarks>
        /// Allows administrators to delete an existing promotion.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="promotionId">ID of the promotion to delete.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiAdminPromotionsDeleteWithHttpInfo (int? promotionId);
        /// <summary>
        /// List all active promotions
        /// </summary>
        /// <remarks>
        /// Provides a list of all active promotions on the platform.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;Promotion&gt;</returns>
        List<Promotion> ApiAdminPromotionsGet ();

        /// <summary>
        /// List all active promotions
        /// </summary>
        /// <remarks>
        /// Provides a list of all active promotions on the platform.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;Promotion&gt;</returns>
        ApiResponse<List<Promotion>> ApiAdminPromotionsGetWithHttpInfo ();
        /// <summary>
        /// Create a new promotion
        /// </summary>
        /// <remarks>
        /// Allows administrators to create a new promotion or discount.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Details of the new promotion.</param>
        /// <returns></returns>
        void ApiAdminPromotionsPost (Promotion body);

        /// <summary>
        /// Create a new promotion
        /// </summary>
        /// <remarks>
        /// Allows administrators to create a new promotion or discount.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Details of the new promotion.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiAdminPromotionsPostWithHttpInfo (Promotion body);
        /// <summary>
        /// Bulk update promotions
        /// </summary>
        /// <remarks>
        /// Allows administrators to update multiple promotions at once.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">List of promotions with updated data.</param>
        /// <returns></returns>
        void ApiAdminPromotionsPut (List<PromotionUpdate> body);

        /// <summary>
        /// Bulk update promotions
        /// </summary>
        /// <remarks>
        /// Allows administrators to update multiple promotions at once.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">List of promotions with updated data.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiAdminPromotionsPutWithHttpInfo (List<PromotionUpdate> body);
        /// <summary>
        /// Generate and retrieve a sales report
        /// </summary>
        /// <remarks>
        /// Provides an overview of sales, including total sales, revenue, top-selling products, and other related metrics.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">Start date for the report period. (optional)</param>
        /// <param name="endDate">End date for the report period. (optional)</param>
        /// <param name="granularity">Level of detail or aggregation for the report, e.g., daily, weekly, monthly. (optional)</param>
        /// <returns>SalesReport</returns>
        SalesReport ApiAdminReportsSalesGet (DateTime? startDate = null, DateTime? endDate = null, string granularity = null);

        /// <summary>
        /// Generate and retrieve a sales report
        /// </summary>
        /// <remarks>
        /// Provides an overview of sales, including total sales, revenue, top-selling products, and other related metrics.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">Start date for the report period. (optional)</param>
        /// <param name="endDate">End date for the report period. (optional)</param>
        /// <param name="granularity">Level of detail or aggregation for the report, e.g., daily, weekly, monthly. (optional)</param>
        /// <returns>ApiResponse of SalesReport</returns>
        ApiResponse<SalesReport> ApiAdminReportsSalesGetWithHttpInfo (DateTime? startDate = null, DateTime? endDate = null, string granularity = null);
        /// <summary>
        /// Generate and retrieve a user activity report
        /// </summary>
        /// <remarks>
        /// Provides insights into user behaviors, including login frequency, pages visited, time spent, and other metrics.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">Start date for the report period. (optional)</param>
        /// <param name="endDate">End date for the report period. (optional)</param>
        /// <param name="granularity">Level of detail or aggregation for the report, e.g., daily, weekly, monthly. (optional)</param>
        /// <returns>UserActivityReport</returns>
        UserActivityReport ApiAdminReportsUserActivityGet (DateTime? startDate = null, DateTime? endDate = null, string granularity = null);

        /// <summary>
        /// Generate and retrieve a user activity report
        /// </summary>
        /// <remarks>
        /// Provides insights into user behaviors, including login frequency, pages visited, time spent, and other metrics.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">Start date for the report period. (optional)</param>
        /// <param name="endDate">End date for the report period. (optional)</param>
        /// <param name="granularity">Level of detail or aggregation for the report, e.g., daily, weekly, monthly. (optional)</param>
        /// <returns>ApiResponse of UserActivityReport</returns>
        ApiResponse<UserActivityReport> ApiAdminReportsUserActivityGetWithHttpInfo (DateTime? startDate = null, DateTime? endDate = null, string granularity = null);
        /// <summary>
        /// Delete a specific review
        /// </summary>
        /// <remarks>
        /// Allows administrators to delete inappropriate or irrelevant reviews.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reviewId">ID of the review to be deleted.</param>
        /// <returns></returns>
        void ApiAdminReviewsDelete (long? reviewId);

        /// <summary>
        /// Delete a specific review
        /// </summary>
        /// <remarks>
        /// Allows administrators to delete inappropriate or irrelevant reviews.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reviewId">ID of the review to be deleted.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiAdminReviewsDeleteWithHttpInfo (long? reviewId);
        /// <summary>
        /// Retrieve a list of product reviews
        /// </summary>
        /// <remarks>
        /// Lists all product reviews with filtering and pagination capabilities.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">Filter reviews by specific product ID. (optional)</param>
        /// <param name="userId">Filter reviews by specific user ID. (optional)</param>
        /// <param name="status">Filter reviews by status (e.g., approved, pending, rejected). (optional)</param>
        /// <param name="page">Pagination - page number. (optional)</param>
        /// <param name="limit">Pagination - number of reviews per page. (optional)</param>
        /// <returns>List&lt;Review&gt;</returns>
        List<Review> ApiAdminReviewsGet (long? productId = null, long? userId = null, string status = null, int? page = null, int? limit = null);

        /// <summary>
        /// Retrieve a list of product reviews
        /// </summary>
        /// <remarks>
        /// Lists all product reviews with filtering and pagination capabilities.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">Filter reviews by specific product ID. (optional)</param>
        /// <param name="userId">Filter reviews by specific user ID. (optional)</param>
        /// <param name="status">Filter reviews by status (e.g., approved, pending, rejected). (optional)</param>
        /// <param name="page">Pagination - page number. (optional)</param>
        /// <param name="limit">Pagination - number of reviews per page. (optional)</param>
        /// <returns>ApiResponse of List&lt;Review&gt;</returns>
        ApiResponse<List<Review>> ApiAdminReviewsGetWithHttpInfo (long? productId = null, long? userId = null, string status = null, int? page = null, int? limit = null);
        /// <summary>
        /// Update the status of a review
        /// </summary>
        /// <remarks>
        /// Allows administrators to approve, reject, or update review status.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Review update details</param>
        /// <returns></returns>
        void ApiAdminReviewsPut (ReviewUpdate body);

        /// <summary>
        /// Update the status of a review
        /// </summary>
        /// <remarks>
        /// Allows administrators to approve, reject, or update review status.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Review update details</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiAdminReviewsPutWithHttpInfo (ReviewUpdate body);
        /// <summary>
        /// Retrieve platform settings
        /// </summary>
        /// <remarks>
        /// Fetches the current configuration and settings of the platform.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>PlatformSettings</returns>
        PlatformSettings ApiAdminSettingsGet ();

        /// <summary>
        /// Retrieve platform settings
        /// </summary>
        /// <remarks>
        /// Fetches the current configuration and settings of the platform.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of PlatformSettings</returns>
        ApiResponse<PlatformSettings> ApiAdminSettingsGetWithHttpInfo ();
        /// <summary>
        /// Update platform settings
        /// </summary>
        /// <remarks>
        /// Allows administrators to modify and configure platform settings.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Updated platform settings data.</param>
        /// <returns></returns>
        void ApiAdminSettingsPut (PlatformSettingsUpdate body);

        /// <summary>
        /// Update platform settings
        /// </summary>
        /// <remarks>
        /// Allows administrators to modify and configure platform settings.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Updated platform settings data.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiAdminSettingsPutWithHttpInfo (PlatformSettingsUpdate body);
        /// <summary>
        /// Bulk delete users
        /// </summary>
        /// <remarks>
        /// Allows administrators to delete multiple users at once.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">A list of user IDs to be deleted.</param>
        /// <returns></returns>
        void ApiAdminUsersDelete (List<int?> body);

        /// <summary>
        /// Bulk delete users
        /// </summary>
        /// <remarks>
        /// Allows administrators to delete multiple users at once.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">A list of user IDs to be deleted.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiAdminUsersDeleteWithHttpInfo (List<int?> body);
        /// <summary>
        /// List all users
        /// </summary>
        /// <remarks>
        /// Provides a list of all registered users on the platform.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;User&gt;</returns>
        List<User> ApiAdminUsersGet ();

        /// <summary>
        /// List all users
        /// </summary>
        /// <remarks>
        /// Provides a list of all registered users on the platform.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;User&gt;</returns>
        ApiResponse<List<User>> ApiAdminUsersGetWithHttpInfo ();
        /// <summary>
        /// Add a new user
        /// </summary>
        /// <remarks>
        /// Allows administrators to manually add a new user to the platform.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">User data for the new user.</param>
        /// <returns></returns>
        void ApiAdminUsersPost (UserRegistration body);

        /// <summary>
        /// Add a new user
        /// </summary>
        /// <remarks>
        /// Allows administrators to manually add a new user to the platform.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">User data for the new user.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiAdminUsersPostWithHttpInfo (UserRegistration body);
        /// <summary>
        /// Bulk update users
        /// </summary>
        /// <remarks>
        /// Allows administrators to update multiple users at once.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">A list of users with updated data.</param>
        /// <returns></returns>
        void ApiAdminUsersPut (List<UserUpdate> body);

        /// <summary>
        /// Bulk update users
        /// </summary>
        /// <remarks>
        /// Allows administrators to update multiple users at once.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">A list of users with updated data.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiAdminUsersPutWithHttpInfo (List<UserUpdate> body);
        /// <summary>
        /// Unban a specific user
        /// </summary>
        /// <remarks>
        /// Allows administrators to lift a ban on a user, restoring their access to the platform.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">ID of the user to unban.</param>
        /// <returns></returns>
        void ApiAdminUsersUserIdBansDelete (int? userId);

        /// <summary>
        /// Unban a specific user
        /// </summary>
        /// <remarks>
        /// Allows administrators to lift a ban on a user, restoring their access to the platform.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">ID of the user to unban.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiAdminUsersUserIdBansDeleteWithHttpInfo (int? userId);
        /// <summary>
        /// Ban a specific user
        /// </summary>
        /// <remarks>
        /// Allows administrators to ban a user, preventing them from accessing the platform or making transactions.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Details and reason for the ban.</param>
        /// <param name="userId">ID of the user to ban.</param>
        /// <returns></returns>
        void ApiAdminUsersUserIdBansPost (UserIdBansBody body, int? userId);

        /// <summary>
        /// Ban a specific user
        /// </summary>
        /// <remarks>
        /// Allows administrators to ban a user, preventing them from accessing the platform or making transactions.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Details and reason for the ban.</param>
        /// <param name="userId">ID of the user to ban.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiAdminUsersUserIdBansPostWithHttpInfo (UserIdBansBody body, int? userId);
        /// <summary>
        /// Remove roles from a specific user
        /// </summary>
        /// <remarks>
        /// Allows administrators to remove specific roles from a user.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">List of roles to be removed from the user.</param>
        /// <param name="userId">ID of the user to remove roles from.</param>
        /// <returns></returns>
        void ApiAdminUsersUserIdRolesDelete (List<string> body, int? userId);

        /// <summary>
        /// Remove roles from a specific user
        /// </summary>
        /// <remarks>
        /// Allows administrators to remove specific roles from a user.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">List of roles to be removed from the user.</param>
        /// <param name="userId">ID of the user to remove roles from.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiAdminUsersUserIdRolesDeleteWithHttpInfo (List<string> body, int? userId);
        /// <summary>
        /// List roles for a specific user
        /// </summary>
        /// <remarks>
        /// Provides a list of roles assigned to the specified user.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">ID of the user to retrieve roles for.</param>
        /// <returns>List&lt;string&gt;</returns>
        List<string> ApiAdminUsersUserIdRolesGet (int? userId);

        /// <summary>
        /// List roles for a specific user
        /// </summary>
        /// <remarks>
        /// Provides a list of roles assigned to the specified user.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">ID of the user to retrieve roles for.</param>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        ApiResponse<List<string>> ApiAdminUsersUserIdRolesGetWithHttpInfo (int? userId);
        /// <summary>
        /// Assign or update roles for a specific user
        /// </summary>
        /// <remarks>
        /// Allows administrators to assign or modify roles for a given user.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">List of roles to be assigned to the user.</param>
        /// <param name="userId">ID of the user to assign or update roles.</param>
        /// <returns></returns>
        void ApiAdminUsersUserIdRolesPut (List<string> body, int? userId);

        /// <summary>
        /// Assign or update roles for a specific user
        /// </summary>
        /// <remarks>
        /// Allows administrators to assign or modify roles for a given user.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">List of roles to be assigned to the user.</param>
        /// <param name="userId">ID of the user to assign or update roles.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiAdminUsersUserIdRolesPutWithHttpInfo (List<string> body, int? userId);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Retrieve a list of affiliates
        /// </summary>
        /// <remarks>
        /// Fetches a list of all affiliates associated with the platform.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;Affiliate&gt;</returns>
        System.Threading.Tasks.Task<List<Affiliate>> ApiAdminAffiliatesGetAsync ();

        /// <summary>
        /// Retrieve a list of affiliates
        /// </summary>
        /// <remarks>
        /// Fetches a list of all affiliates associated with the platform.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;Affiliate&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Affiliate>>> ApiAdminAffiliatesGetAsyncWithHttpInfo ();
        /// <summary>
        /// Add a new affiliate
        /// </summary>
        /// <remarks>
        /// Registers a new affiliate partner with the platform.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Data for the new affiliate.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiAdminAffiliatesPostAsync (AffiliateCreate body);

        /// <summary>
        /// Add a new affiliate
        /// </summary>
        /// <remarks>
        /// Registers a new affiliate partner with the platform.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Data for the new affiliate.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiAdminAffiliatesPostAsyncWithHttpInfo (AffiliateCreate body);
        /// <summary>
        /// Retrieve a list of promotional banners
        /// </summary>
        /// <remarks>
        /// Fetches a list of all promotional banners currently on the platform.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;Banner&gt;</returns>
        System.Threading.Tasks.Task<List<Banner>> ApiAdminContentBannersGetAsync ();

        /// <summary>
        /// Retrieve a list of promotional banners
        /// </summary>
        /// <remarks>
        /// Fetches a list of all promotional banners currently on the platform.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;Banner&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Banner>>> ApiAdminContentBannersGetAsyncWithHttpInfo ();
        /// <summary>
        /// Create a new promotional banner
        /// </summary>
        /// <remarks>
        /// Allows administrators to add a new promotional banner.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Data for the new promotional banner.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiAdminContentBannersPostAsync (BannerCreate body);

        /// <summary>
        /// Create a new promotional banner
        /// </summary>
        /// <remarks>
        /// Allows administrators to add a new promotional banner.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Data for the new promotional banner.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiAdminContentBannersPostAsyncWithHttpInfo (BannerCreate body);
        /// <summary>
        /// Retrieve a list of content pages
        /// </summary>
        /// <remarks>
        /// Fetches a list of all static content pages available on the platform.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;ContentPage&gt;</returns>
        System.Threading.Tasks.Task<List<ContentPage>> ApiAdminContentPagesGetAsync ();

        /// <summary>
        /// Retrieve a list of content pages
        /// </summary>
        /// <remarks>
        /// Fetches a list of all static content pages available on the platform.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;ContentPage&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ContentPage>>> ApiAdminContentPagesGetAsyncWithHttpInfo ();
        /// <summary>
        /// Retrieve a list of user feedback
        /// </summary>
        /// <remarks>
        /// Lists all feedback submissions with filtering and pagination capabilities.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">Filter feedback by status (e.g., reviewed, pending). (optional)</param>
        /// <param name="type">Filter feedback by type (e.g., bug, feature request, comment). (optional)</param>
        /// <param name="page">Pagination - page number. (optional)</param>
        /// <param name="limit">Pagination - number of feedback items per page. (optional)</param>
        /// <returns>Task of List&lt;Feedback&gt;</returns>
        System.Threading.Tasks.Task<List<Feedback>> ApiAdminFeedbackGetAsync (string status = null, string type = null, int? page = null, int? limit = null);

        /// <summary>
        /// Retrieve a list of user feedback
        /// </summary>
        /// <remarks>
        /// Lists all feedback submissions with filtering and pagination capabilities.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">Filter feedback by status (e.g., reviewed, pending). (optional)</param>
        /// <param name="type">Filter feedback by type (e.g., bug, feature request, comment). (optional)</param>
        /// <param name="page">Pagination - page number. (optional)</param>
        /// <param name="limit">Pagination - number of feedback items per page. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Feedback&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Feedback>>> ApiAdminFeedbackGetAsyncWithHttpInfo (string status = null, string type = null, int? page = null, int? limit = null);
        /// <summary>
        /// Update feedback details
        /// </summary>
        /// <remarks>
        /// Allows administrators to update feedback status or add comments.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Feedback update details</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiAdminFeedbackPutAsync (FeedbackUpdate body);

        /// <summary>
        /// Update feedback details
        /// </summary>
        /// <remarks>
        /// Allows administrators to update feedback status or add comments.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Feedback update details</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiAdminFeedbackPutAsyncWithHttpInfo (FeedbackUpdate body);
        /// <summary>
        /// List all inventory items
        /// </summary>
        /// <remarks>
        /// Provides a list of all products with their current inventory levels and other related details.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="belowThreshold">Filter products that have inventory below a certain threshold. (optional)</param>
        /// <returns>Task of List&lt;InventoryItem&gt;</returns>
        System.Threading.Tasks.Task<List<InventoryItem>> ApiAdminInventoryGetAsync (int? belowThreshold = null);

        /// <summary>
        /// List all inventory items
        /// </summary>
        /// <remarks>
        /// Provides a list of all products with their current inventory levels and other related details.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="belowThreshold">Filter products that have inventory below a certain threshold. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;InventoryItem&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<InventoryItem>>> ApiAdminInventoryGetAsyncWithHttpInfo (int? belowThreshold = null);
        /// <summary>
        /// Bulk update inventory
        /// </summary>
        /// <remarks>
        /// Allows administrators to update inventory levels for multiple products at once.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">List of inventory updates.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiAdminInventoryPutAsync (List<InventoryUpdate> body);

        /// <summary>
        /// Bulk update inventory
        /// </summary>
        /// <remarks>
        /// Allows administrators to update inventory levels for multiple products at once.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">List of inventory updates.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiAdminInventoryPutAsyncWithHttpInfo (List<InventoryUpdate> body);
        /// <summary>
        /// Retrieve system logs
        /// </summary>
        /// <remarks>
        /// Fetches logs based on filters like date range, log level, or specific events.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">Starting date to filter logs. (optional)</param>
        /// <param name="endDate">Ending date to filter logs. (optional)</param>
        /// <param name="logLevel">Level of log (e.g., INFO, ERROR, WARNING). (optional)</param>
        /// <param name="_event">Specific event to filter logs. (optional)</param>
        /// <returns>Task of List&lt;SystemLog&gt;</returns>
        System.Threading.Tasks.Task<List<SystemLog>> ApiAdminLogsGetAsync (DateTime? startDate = null, DateTime? endDate = null, string logLevel = null, string _event = null);

        /// <summary>
        /// Retrieve system logs
        /// </summary>
        /// <remarks>
        /// Fetches logs based on filters like date range, log level, or specific events.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">Starting date to filter logs. (optional)</param>
        /// <param name="endDate">Ending date to filter logs. (optional)</param>
        /// <param name="logLevel">Level of log (e.g., INFO, ERROR, WARNING). (optional)</param>
        /// <param name="_event">Specific event to filter logs. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;SystemLog&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<SystemLog>>> ApiAdminLogsGetAsyncWithHttpInfo (DateTime? startDate = null, DateTime? endDate = null, string logLevel = null, string _event = null);
        /// <summary>
        /// Retrieve system monitoring data
        /// </summary>
        /// <remarks>
        /// Fetches monitoring metrics based on specified filters like time range or specific metrics.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startTime">Starting timestamp to filter monitoring data. (optional)</param>
        /// <param name="endTime">Ending timestamp to filter monitoring data. (optional)</param>
        /// <param name="metric">Specific metric to retrieve (e.g., \&quot;CPU_Usage\&quot;, \&quot;Response_Time\&quot;). (optional)</param>
        /// <returns>Task of List&lt;MonitoringMetric&gt;</returns>
        System.Threading.Tasks.Task<List<MonitoringMetric>> ApiAdminMonitoringGetAsync (DateTime? startTime = null, DateTime? endTime = null, string metric = null);

        /// <summary>
        /// Retrieve system monitoring data
        /// </summary>
        /// <remarks>
        /// Fetches monitoring metrics based on specified filters like time range or specific metrics.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startTime">Starting timestamp to filter monitoring data. (optional)</param>
        /// <param name="endTime">Ending timestamp to filter monitoring data. (optional)</param>
        /// <param name="metric">Specific metric to retrieve (e.g., \&quot;CPU_Usage\&quot;, \&quot;Response_Time\&quot;). (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;MonitoringMetric&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<MonitoringMetric>>> ApiAdminMonitoringGetAsyncWithHttpInfo (DateTime? startTime = null, DateTime? endTime = null, string metric = null);
        /// <summary>
        /// Send a notification to a user
        /// </summary>
        /// <remarks>
        /// Allows authorized entities (e.g., administrators or automated systems) to send a notification to a specific user.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Notification details and target user</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiAdminNotificationsPostAsync (AdminNotificationsBody body);

        /// <summary>
        /// Send a notification to a user
        /// </summary>
        /// <remarks>
        /// Allows authorized entities (e.g., administrators or automated systems) to send a notification to a specific user.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Notification details and target user</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiAdminNotificationsPostAsyncWithHttpInfo (AdminNotificationsBody body);
        /// <summary>
        /// List all orders
        /// </summary>
        /// <remarks>
        /// Provides a list of all orders placed on the platform, with filters for date, status, etc.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">Filter orders by their status (e.g., \&quot;pending\&quot;, \&quot;shipped\&quot;, \&quot;completed\&quot;, \&quot;returned\&quot;). (optional)</param>
        /// <param name="fromDate">Filter orders placed after this date. (optional)</param>
        /// <param name="toDate">Filter orders placed before this date. (optional)</param>
        /// <returns>Task of List&lt;Order&gt;</returns>
        System.Threading.Tasks.Task<List<Order>> ApiAdminOrdersGetAsync (string status = null, DateTime? fromDate = null, DateTime? toDate = null);

        /// <summary>
        /// List all orders
        /// </summary>
        /// <remarks>
        /// Provides a list of all orders placed on the platform, with filters for date, status, etc.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">Filter orders by their status (e.g., \&quot;pending\&quot;, \&quot;shipped\&quot;, \&quot;completed\&quot;, \&quot;returned\&quot;). (optional)</param>
        /// <param name="fromDate">Filter orders placed after this date. (optional)</param>
        /// <param name="toDate">Filter orders placed before this date. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Order&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Order>>> ApiAdminOrdersGetAsyncWithHttpInfo (string status = null, DateTime? fromDate = null, DateTime? toDate = null);
        /// <summary>
        /// Bulk update orders
        /// </summary>
        /// <remarks>
        /// Allows administrators to update multiple orders at once, typically for changing order status.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">List of orders with updated data.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiAdminOrdersPutAsync (List<OrderUpdate> body);

        /// <summary>
        /// Bulk update orders
        /// </summary>
        /// <remarks>
        /// Allows administrators to update multiple orders at once, typically for changing order status.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">List of orders with updated data.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiAdminOrdersPutAsyncWithHttpInfo (List<OrderUpdate> body);
        /// <summary>
        /// Retrieve a list of business partnerships
        /// </summary>
        /// <remarks>
        /// Fetches a list of all business partnerships associated with the platform.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;Partnership&gt;</returns>
        System.Threading.Tasks.Task<List<Partnership>> ApiAdminPartnershipsGetAsync ();

        /// <summary>
        /// Retrieve a list of business partnerships
        /// </summary>
        /// <remarks>
        /// Fetches a list of all business partnerships associated with the platform.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;Partnership&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Partnership>>> ApiAdminPartnershipsGetAsyncWithHttpInfo ();
        /// <summary>
        /// Add a new business partnership
        /// </summary>
        /// <remarks>
        /// Registers a new business partnership or collaboration with the platform.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Data for the new partnership.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiAdminPartnershipsPostAsync (PartnershipCreate body);

        /// <summary>
        /// Add a new business partnership
        /// </summary>
        /// <remarks>
        /// Registers a new business partnership or collaboration with the platform.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Data for the new partnership.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiAdminPartnershipsPostAsyncWithHttpInfo (PartnershipCreate body);
        /// <summary>
        /// Delete a promotion
        /// </summary>
        /// <remarks>
        /// Allows administrators to delete an existing promotion.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="promotionId">ID of the promotion to delete.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiAdminPromotionsDeleteAsync (int? promotionId);

        /// <summary>
        /// Delete a promotion
        /// </summary>
        /// <remarks>
        /// Allows administrators to delete an existing promotion.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="promotionId">ID of the promotion to delete.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiAdminPromotionsDeleteAsyncWithHttpInfo (int? promotionId);
        /// <summary>
        /// List all active promotions
        /// </summary>
        /// <remarks>
        /// Provides a list of all active promotions on the platform.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;Promotion&gt;</returns>
        System.Threading.Tasks.Task<List<Promotion>> ApiAdminPromotionsGetAsync ();

        /// <summary>
        /// List all active promotions
        /// </summary>
        /// <remarks>
        /// Provides a list of all active promotions on the platform.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;Promotion&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Promotion>>> ApiAdminPromotionsGetAsyncWithHttpInfo ();
        /// <summary>
        /// Create a new promotion
        /// </summary>
        /// <remarks>
        /// Allows administrators to create a new promotion or discount.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Details of the new promotion.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiAdminPromotionsPostAsync (Promotion body);

        /// <summary>
        /// Create a new promotion
        /// </summary>
        /// <remarks>
        /// Allows administrators to create a new promotion or discount.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Details of the new promotion.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiAdminPromotionsPostAsyncWithHttpInfo (Promotion body);
        /// <summary>
        /// Bulk update promotions
        /// </summary>
        /// <remarks>
        /// Allows administrators to update multiple promotions at once.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">List of promotions with updated data.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiAdminPromotionsPutAsync (List<PromotionUpdate> body);

        /// <summary>
        /// Bulk update promotions
        /// </summary>
        /// <remarks>
        /// Allows administrators to update multiple promotions at once.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">List of promotions with updated data.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiAdminPromotionsPutAsyncWithHttpInfo (List<PromotionUpdate> body);
        /// <summary>
        /// Generate and retrieve a sales report
        /// </summary>
        /// <remarks>
        /// Provides an overview of sales, including total sales, revenue, top-selling products, and other related metrics.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">Start date for the report period. (optional)</param>
        /// <param name="endDate">End date for the report period. (optional)</param>
        /// <param name="granularity">Level of detail or aggregation for the report, e.g., daily, weekly, monthly. (optional)</param>
        /// <returns>Task of SalesReport</returns>
        System.Threading.Tasks.Task<SalesReport> ApiAdminReportsSalesGetAsync (DateTime? startDate = null, DateTime? endDate = null, string granularity = null);

        /// <summary>
        /// Generate and retrieve a sales report
        /// </summary>
        /// <remarks>
        /// Provides an overview of sales, including total sales, revenue, top-selling products, and other related metrics.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">Start date for the report period. (optional)</param>
        /// <param name="endDate">End date for the report period. (optional)</param>
        /// <param name="granularity">Level of detail or aggregation for the report, e.g., daily, weekly, monthly. (optional)</param>
        /// <returns>Task of ApiResponse (SalesReport)</returns>
        System.Threading.Tasks.Task<ApiResponse<SalesReport>> ApiAdminReportsSalesGetAsyncWithHttpInfo (DateTime? startDate = null, DateTime? endDate = null, string granularity = null);
        /// <summary>
        /// Generate and retrieve a user activity report
        /// </summary>
        /// <remarks>
        /// Provides insights into user behaviors, including login frequency, pages visited, time spent, and other metrics.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">Start date for the report period. (optional)</param>
        /// <param name="endDate">End date for the report period. (optional)</param>
        /// <param name="granularity">Level of detail or aggregation for the report, e.g., daily, weekly, monthly. (optional)</param>
        /// <returns>Task of UserActivityReport</returns>
        System.Threading.Tasks.Task<UserActivityReport> ApiAdminReportsUserActivityGetAsync (DateTime? startDate = null, DateTime? endDate = null, string granularity = null);

        /// <summary>
        /// Generate and retrieve a user activity report
        /// </summary>
        /// <remarks>
        /// Provides insights into user behaviors, including login frequency, pages visited, time spent, and other metrics.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">Start date for the report period. (optional)</param>
        /// <param name="endDate">End date for the report period. (optional)</param>
        /// <param name="granularity">Level of detail or aggregation for the report, e.g., daily, weekly, monthly. (optional)</param>
        /// <returns>Task of ApiResponse (UserActivityReport)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserActivityReport>> ApiAdminReportsUserActivityGetAsyncWithHttpInfo (DateTime? startDate = null, DateTime? endDate = null, string granularity = null);
        /// <summary>
        /// Delete a specific review
        /// </summary>
        /// <remarks>
        /// Allows administrators to delete inappropriate or irrelevant reviews.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reviewId">ID of the review to be deleted.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiAdminReviewsDeleteAsync (long? reviewId);

        /// <summary>
        /// Delete a specific review
        /// </summary>
        /// <remarks>
        /// Allows administrators to delete inappropriate or irrelevant reviews.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reviewId">ID of the review to be deleted.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiAdminReviewsDeleteAsyncWithHttpInfo (long? reviewId);
        /// <summary>
        /// Retrieve a list of product reviews
        /// </summary>
        /// <remarks>
        /// Lists all product reviews with filtering and pagination capabilities.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">Filter reviews by specific product ID. (optional)</param>
        /// <param name="userId">Filter reviews by specific user ID. (optional)</param>
        /// <param name="status">Filter reviews by status (e.g., approved, pending, rejected). (optional)</param>
        /// <param name="page">Pagination - page number. (optional)</param>
        /// <param name="limit">Pagination - number of reviews per page. (optional)</param>
        /// <returns>Task of List&lt;Review&gt;</returns>
        System.Threading.Tasks.Task<List<Review>> ApiAdminReviewsGetAsync (long? productId = null, long? userId = null, string status = null, int? page = null, int? limit = null);

        /// <summary>
        /// Retrieve a list of product reviews
        /// </summary>
        /// <remarks>
        /// Lists all product reviews with filtering and pagination capabilities.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">Filter reviews by specific product ID. (optional)</param>
        /// <param name="userId">Filter reviews by specific user ID. (optional)</param>
        /// <param name="status">Filter reviews by status (e.g., approved, pending, rejected). (optional)</param>
        /// <param name="page">Pagination - page number. (optional)</param>
        /// <param name="limit">Pagination - number of reviews per page. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Review&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Review>>> ApiAdminReviewsGetAsyncWithHttpInfo (long? productId = null, long? userId = null, string status = null, int? page = null, int? limit = null);
        /// <summary>
        /// Update the status of a review
        /// </summary>
        /// <remarks>
        /// Allows administrators to approve, reject, or update review status.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Review update details</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiAdminReviewsPutAsync (ReviewUpdate body);

        /// <summary>
        /// Update the status of a review
        /// </summary>
        /// <remarks>
        /// Allows administrators to approve, reject, or update review status.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Review update details</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiAdminReviewsPutAsyncWithHttpInfo (ReviewUpdate body);
        /// <summary>
        /// Retrieve platform settings
        /// </summary>
        /// <remarks>
        /// Fetches the current configuration and settings of the platform.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of PlatformSettings</returns>
        System.Threading.Tasks.Task<PlatformSettings> ApiAdminSettingsGetAsync ();

        /// <summary>
        /// Retrieve platform settings
        /// </summary>
        /// <remarks>
        /// Fetches the current configuration and settings of the platform.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (PlatformSettings)</returns>
        System.Threading.Tasks.Task<ApiResponse<PlatformSettings>> ApiAdminSettingsGetAsyncWithHttpInfo ();
        /// <summary>
        /// Update platform settings
        /// </summary>
        /// <remarks>
        /// Allows administrators to modify and configure platform settings.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Updated platform settings data.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiAdminSettingsPutAsync (PlatformSettingsUpdate body);

        /// <summary>
        /// Update platform settings
        /// </summary>
        /// <remarks>
        /// Allows administrators to modify and configure platform settings.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Updated platform settings data.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiAdminSettingsPutAsyncWithHttpInfo (PlatformSettingsUpdate body);
        /// <summary>
        /// Bulk delete users
        /// </summary>
        /// <remarks>
        /// Allows administrators to delete multiple users at once.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">A list of user IDs to be deleted.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiAdminUsersDeleteAsync (List<int?> body);

        /// <summary>
        /// Bulk delete users
        /// </summary>
        /// <remarks>
        /// Allows administrators to delete multiple users at once.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">A list of user IDs to be deleted.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiAdminUsersDeleteAsyncWithHttpInfo (List<int?> body);
        /// <summary>
        /// List all users
        /// </summary>
        /// <remarks>
        /// Provides a list of all registered users on the platform.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;User&gt;</returns>
        System.Threading.Tasks.Task<List<User>> ApiAdminUsersGetAsync ();

        /// <summary>
        /// List all users
        /// </summary>
        /// <remarks>
        /// Provides a list of all registered users on the platform.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;User&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<User>>> ApiAdminUsersGetAsyncWithHttpInfo ();
        /// <summary>
        /// Add a new user
        /// </summary>
        /// <remarks>
        /// Allows administrators to manually add a new user to the platform.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">User data for the new user.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiAdminUsersPostAsync (UserRegistration body);

        /// <summary>
        /// Add a new user
        /// </summary>
        /// <remarks>
        /// Allows administrators to manually add a new user to the platform.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">User data for the new user.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiAdminUsersPostAsyncWithHttpInfo (UserRegistration body);
        /// <summary>
        /// Bulk update users
        /// </summary>
        /// <remarks>
        /// Allows administrators to update multiple users at once.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">A list of users with updated data.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiAdminUsersPutAsync (List<UserUpdate> body);

        /// <summary>
        /// Bulk update users
        /// </summary>
        /// <remarks>
        /// Allows administrators to update multiple users at once.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">A list of users with updated data.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiAdminUsersPutAsyncWithHttpInfo (List<UserUpdate> body);
        /// <summary>
        /// Unban a specific user
        /// </summary>
        /// <remarks>
        /// Allows administrators to lift a ban on a user, restoring their access to the platform.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">ID of the user to unban.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiAdminUsersUserIdBansDeleteAsync (int? userId);

        /// <summary>
        /// Unban a specific user
        /// </summary>
        /// <remarks>
        /// Allows administrators to lift a ban on a user, restoring their access to the platform.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">ID of the user to unban.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiAdminUsersUserIdBansDeleteAsyncWithHttpInfo (int? userId);
        /// <summary>
        /// Ban a specific user
        /// </summary>
        /// <remarks>
        /// Allows administrators to ban a user, preventing them from accessing the platform or making transactions.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Details and reason for the ban.</param>
        /// <param name="userId">ID of the user to ban.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiAdminUsersUserIdBansPostAsync (UserIdBansBody body, int? userId);

        /// <summary>
        /// Ban a specific user
        /// </summary>
        /// <remarks>
        /// Allows administrators to ban a user, preventing them from accessing the platform or making transactions.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Details and reason for the ban.</param>
        /// <param name="userId">ID of the user to ban.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiAdminUsersUserIdBansPostAsyncWithHttpInfo (UserIdBansBody body, int? userId);
        /// <summary>
        /// Remove roles from a specific user
        /// </summary>
        /// <remarks>
        /// Allows administrators to remove specific roles from a user.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">List of roles to be removed from the user.</param>
        /// <param name="userId">ID of the user to remove roles from.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiAdminUsersUserIdRolesDeleteAsync (List<string> body, int? userId);

        /// <summary>
        /// Remove roles from a specific user
        /// </summary>
        /// <remarks>
        /// Allows administrators to remove specific roles from a user.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">List of roles to be removed from the user.</param>
        /// <param name="userId">ID of the user to remove roles from.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiAdminUsersUserIdRolesDeleteAsyncWithHttpInfo (List<string> body, int? userId);
        /// <summary>
        /// List roles for a specific user
        /// </summary>
        /// <remarks>
        /// Provides a list of roles assigned to the specified user.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">ID of the user to retrieve roles for.</param>
        /// <returns>Task of List&lt;string&gt;</returns>
        System.Threading.Tasks.Task<List<string>> ApiAdminUsersUserIdRolesGetAsync (int? userId);

        /// <summary>
        /// List roles for a specific user
        /// </summary>
        /// <remarks>
        /// Provides a list of roles assigned to the specified user.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">ID of the user to retrieve roles for.</param>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<string>>> ApiAdminUsersUserIdRolesGetAsyncWithHttpInfo (int? userId);
        /// <summary>
        /// Assign or update roles for a specific user
        /// </summary>
        /// <remarks>
        /// Allows administrators to assign or modify roles for a given user.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">List of roles to be assigned to the user.</param>
        /// <param name="userId">ID of the user to assign or update roles.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiAdminUsersUserIdRolesPutAsync (List<string> body, int? userId);

        /// <summary>
        /// Assign or update roles for a specific user
        /// </summary>
        /// <remarks>
        /// Allows administrators to assign or modify roles for a given user.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">List of roles to be assigned to the user.</param>
        /// <param name="userId">ID of the user to assign or update roles.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiAdminUsersUserIdRolesPutAsyncWithHttpInfo (List<string> body, int? userId);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class AdminApi : IAdminApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AdminApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AdminApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AdminApi"/> class
        /// </summary>
        /// <returns></returns>
        public AdminApi()
        {
            this.Configuration = IO.Swagger.Client.Configuration.Default;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AdminApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public AdminApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Retrieve a list of affiliates Fetches a list of all affiliates associated with the platform.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;Affiliate&gt;</returns>
        public List<Affiliate> ApiAdminAffiliatesGet ()
        {
             ApiResponse<List<Affiliate>> localVarResponse = ApiAdminAffiliatesGetWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a list of affiliates Fetches a list of all affiliates associated with the platform.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;Affiliate&gt;</returns>
        public ApiResponse< List<Affiliate> > ApiAdminAffiliatesGetWithHttpInfo ()
        {

            var localVarPath = "/api/admin/affiliates";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (BearerAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiAdminAffiliatesGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Affiliate>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Affiliate>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Affiliate>)));
        }

        /// <summary>
        /// Retrieve a list of affiliates Fetches a list of all affiliates associated with the platform.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;Affiliate&gt;</returns>
        public async System.Threading.Tasks.Task<List<Affiliate>> ApiAdminAffiliatesGetAsync ()
        {
             ApiResponse<List<Affiliate>> localVarResponse = await ApiAdminAffiliatesGetAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve a list of affiliates Fetches a list of all affiliates associated with the platform.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;Affiliate&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Affiliate>>> ApiAdminAffiliatesGetAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/admin/affiliates";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (BearerAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiAdminAffiliatesGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Affiliate>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Affiliate>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Affiliate>)));
        }

        /// <summary>
        /// Add a new affiliate Registers a new affiliate partner with the platform.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Data for the new affiliate.</param>
        /// <returns></returns>
        public void ApiAdminAffiliatesPost (AffiliateCreate body)
        {
             ApiAdminAffiliatesPostWithHttpInfo(body);
        }

        /// <summary>
        /// Add a new affiliate Registers a new affiliate partner with the platform.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Data for the new affiliate.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ApiAdminAffiliatesPostWithHttpInfo (AffiliateCreate body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AdminApi->ApiAdminAffiliatesPost");

            var localVarPath = "/api/admin/affiliates";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (BearerAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiAdminAffiliatesPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Add a new affiliate Registers a new affiliate partner with the platform.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Data for the new affiliate.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiAdminAffiliatesPostAsync (AffiliateCreate body)
        {
             await ApiAdminAffiliatesPostAsyncWithHttpInfo(body);

        }

        /// <summary>
        /// Add a new affiliate Registers a new affiliate partner with the platform.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Data for the new affiliate.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ApiAdminAffiliatesPostAsyncWithHttpInfo (AffiliateCreate body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AdminApi->ApiAdminAffiliatesPost");

            var localVarPath = "/api/admin/affiliates";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (BearerAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiAdminAffiliatesPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Retrieve a list of promotional banners Fetches a list of all promotional banners currently on the platform.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;Banner&gt;</returns>
        public List<Banner> ApiAdminContentBannersGet ()
        {
             ApiResponse<List<Banner>> localVarResponse = ApiAdminContentBannersGetWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a list of promotional banners Fetches a list of all promotional banners currently on the platform.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;Banner&gt;</returns>
        public ApiResponse< List<Banner> > ApiAdminContentBannersGetWithHttpInfo ()
        {

            var localVarPath = "/api/admin/content/banners";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (BearerAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiAdminContentBannersGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Banner>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Banner>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Banner>)));
        }

        /// <summary>
        /// Retrieve a list of promotional banners Fetches a list of all promotional banners currently on the platform.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;Banner&gt;</returns>
        public async System.Threading.Tasks.Task<List<Banner>> ApiAdminContentBannersGetAsync ()
        {
             ApiResponse<List<Banner>> localVarResponse = await ApiAdminContentBannersGetAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve a list of promotional banners Fetches a list of all promotional banners currently on the platform.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;Banner&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Banner>>> ApiAdminContentBannersGetAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/admin/content/banners";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (BearerAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiAdminContentBannersGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Banner>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Banner>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Banner>)));
        }

        /// <summary>
        /// Create a new promotional banner Allows administrators to add a new promotional banner.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Data for the new promotional banner.</param>
        /// <returns></returns>
        public void ApiAdminContentBannersPost (BannerCreate body)
        {
             ApiAdminContentBannersPostWithHttpInfo(body);
        }

        /// <summary>
        /// Create a new promotional banner Allows administrators to add a new promotional banner.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Data for the new promotional banner.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ApiAdminContentBannersPostWithHttpInfo (BannerCreate body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AdminApi->ApiAdminContentBannersPost");

            var localVarPath = "/api/admin/content/banners";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (BearerAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiAdminContentBannersPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Create a new promotional banner Allows administrators to add a new promotional banner.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Data for the new promotional banner.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiAdminContentBannersPostAsync (BannerCreate body)
        {
             await ApiAdminContentBannersPostAsyncWithHttpInfo(body);

        }

        /// <summary>
        /// Create a new promotional banner Allows administrators to add a new promotional banner.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Data for the new promotional banner.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ApiAdminContentBannersPostAsyncWithHttpInfo (BannerCreate body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AdminApi->ApiAdminContentBannersPost");

            var localVarPath = "/api/admin/content/banners";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (BearerAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiAdminContentBannersPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Retrieve a list of content pages Fetches a list of all static content pages available on the platform.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;ContentPage&gt;</returns>
        public List<ContentPage> ApiAdminContentPagesGet ()
        {
             ApiResponse<List<ContentPage>> localVarResponse = ApiAdminContentPagesGetWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a list of content pages Fetches a list of all static content pages available on the platform.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;ContentPage&gt;</returns>
        public ApiResponse< List<ContentPage> > ApiAdminContentPagesGetWithHttpInfo ()
        {

            var localVarPath = "/api/admin/content/pages";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (BearerAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiAdminContentPagesGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ContentPage>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<ContentPage>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ContentPage>)));
        }

        /// <summary>
        /// Retrieve a list of content pages Fetches a list of all static content pages available on the platform.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;ContentPage&gt;</returns>
        public async System.Threading.Tasks.Task<List<ContentPage>> ApiAdminContentPagesGetAsync ()
        {
             ApiResponse<List<ContentPage>> localVarResponse = await ApiAdminContentPagesGetAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve a list of content pages Fetches a list of all static content pages available on the platform.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;ContentPage&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ContentPage>>> ApiAdminContentPagesGetAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/admin/content/pages";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (BearerAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiAdminContentPagesGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ContentPage>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<ContentPage>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ContentPage>)));
        }

        /// <summary>
        /// Retrieve a list of user feedback Lists all feedback submissions with filtering and pagination capabilities.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">Filter feedback by status (e.g., reviewed, pending). (optional)</param>
        /// <param name="type">Filter feedback by type (e.g., bug, feature request, comment). (optional)</param>
        /// <param name="page">Pagination - page number. (optional)</param>
        /// <param name="limit">Pagination - number of feedback items per page. (optional)</param>
        /// <returns>List&lt;Feedback&gt;</returns>
        public List<Feedback> ApiAdminFeedbackGet (string status = null, string type = null, int? page = null, int? limit = null)
        {
             ApiResponse<List<Feedback>> localVarResponse = ApiAdminFeedbackGetWithHttpInfo(status, type, page, limit);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a list of user feedback Lists all feedback submissions with filtering and pagination capabilities.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">Filter feedback by status (e.g., reviewed, pending). (optional)</param>
        /// <param name="type">Filter feedback by type (e.g., bug, feature request, comment). (optional)</param>
        /// <param name="page">Pagination - page number. (optional)</param>
        /// <param name="limit">Pagination - number of feedback items per page. (optional)</param>
        /// <returns>ApiResponse of List&lt;Feedback&gt;</returns>
        public ApiResponse< List<Feedback> > ApiAdminFeedbackGetWithHttpInfo (string status = null, string type = null, int? page = null, int? limit = null)
        {

            var localVarPath = "/api/admin/feedback";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (status != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "status", status)); // query parameter
            if (type != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "type", type)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            // authentication (BearerAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiAdminFeedbackGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Feedback>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Feedback>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Feedback>)));
        }

        /// <summary>
        /// Retrieve a list of user feedback Lists all feedback submissions with filtering and pagination capabilities.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">Filter feedback by status (e.g., reviewed, pending). (optional)</param>
        /// <param name="type">Filter feedback by type (e.g., bug, feature request, comment). (optional)</param>
        /// <param name="page">Pagination - page number. (optional)</param>
        /// <param name="limit">Pagination - number of feedback items per page. (optional)</param>
        /// <returns>Task of List&lt;Feedback&gt;</returns>
        public async System.Threading.Tasks.Task<List<Feedback>> ApiAdminFeedbackGetAsync (string status = null, string type = null, int? page = null, int? limit = null)
        {
             ApiResponse<List<Feedback>> localVarResponse = await ApiAdminFeedbackGetAsyncWithHttpInfo(status, type, page, limit);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve a list of user feedback Lists all feedback submissions with filtering and pagination capabilities.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">Filter feedback by status (e.g., reviewed, pending). (optional)</param>
        /// <param name="type">Filter feedback by type (e.g., bug, feature request, comment). (optional)</param>
        /// <param name="page">Pagination - page number. (optional)</param>
        /// <param name="limit">Pagination - number of feedback items per page. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Feedback&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Feedback>>> ApiAdminFeedbackGetAsyncWithHttpInfo (string status = null, string type = null, int? page = null, int? limit = null)
        {

            var localVarPath = "/api/admin/feedback";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (status != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "status", status)); // query parameter
            if (type != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "type", type)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            // authentication (BearerAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiAdminFeedbackGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Feedback>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Feedback>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Feedback>)));
        }

        /// <summary>
        /// Update feedback details Allows administrators to update feedback status or add comments.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Feedback update details</param>
        /// <returns></returns>
        public void ApiAdminFeedbackPut (FeedbackUpdate body)
        {
             ApiAdminFeedbackPutWithHttpInfo(body);
        }

        /// <summary>
        /// Update feedback details Allows administrators to update feedback status or add comments.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Feedback update details</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ApiAdminFeedbackPutWithHttpInfo (FeedbackUpdate body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AdminApi->ApiAdminFeedbackPut");

            var localVarPath = "/api/admin/feedback";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (BearerAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiAdminFeedbackPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Update feedback details Allows administrators to update feedback status or add comments.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Feedback update details</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiAdminFeedbackPutAsync (FeedbackUpdate body)
        {
             await ApiAdminFeedbackPutAsyncWithHttpInfo(body);

        }

        /// <summary>
        /// Update feedback details Allows administrators to update feedback status or add comments.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Feedback update details</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ApiAdminFeedbackPutAsyncWithHttpInfo (FeedbackUpdate body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AdminApi->ApiAdminFeedbackPut");

            var localVarPath = "/api/admin/feedback";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (BearerAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiAdminFeedbackPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// List all inventory items Provides a list of all products with their current inventory levels and other related details.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="belowThreshold">Filter products that have inventory below a certain threshold. (optional)</param>
        /// <returns>List&lt;InventoryItem&gt;</returns>
        public List<InventoryItem> ApiAdminInventoryGet (int? belowThreshold = null)
        {
             ApiResponse<List<InventoryItem>> localVarResponse = ApiAdminInventoryGetWithHttpInfo(belowThreshold);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List all inventory items Provides a list of all products with their current inventory levels and other related details.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="belowThreshold">Filter products that have inventory below a certain threshold. (optional)</param>
        /// <returns>ApiResponse of List&lt;InventoryItem&gt;</returns>
        public ApiResponse< List<InventoryItem> > ApiAdminInventoryGetWithHttpInfo (int? belowThreshold = null)
        {

            var localVarPath = "/api/admin/inventory";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (belowThreshold != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "belowThreshold", belowThreshold)); // query parameter
            // authentication (BearerAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiAdminInventoryGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<InventoryItem>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<InventoryItem>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<InventoryItem>)));
        }

        /// <summary>
        /// List all inventory items Provides a list of all products with their current inventory levels and other related details.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="belowThreshold">Filter products that have inventory below a certain threshold. (optional)</param>
        /// <returns>Task of List&lt;InventoryItem&gt;</returns>
        public async System.Threading.Tasks.Task<List<InventoryItem>> ApiAdminInventoryGetAsync (int? belowThreshold = null)
        {
             ApiResponse<List<InventoryItem>> localVarResponse = await ApiAdminInventoryGetAsyncWithHttpInfo(belowThreshold);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List all inventory items Provides a list of all products with their current inventory levels and other related details.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="belowThreshold">Filter products that have inventory below a certain threshold. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;InventoryItem&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<InventoryItem>>> ApiAdminInventoryGetAsyncWithHttpInfo (int? belowThreshold = null)
        {

            var localVarPath = "/api/admin/inventory";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (belowThreshold != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "belowThreshold", belowThreshold)); // query parameter
            // authentication (BearerAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiAdminInventoryGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<InventoryItem>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<InventoryItem>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<InventoryItem>)));
        }

        /// <summary>
        /// Bulk update inventory Allows administrators to update inventory levels for multiple products at once.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">List of inventory updates.</param>
        /// <returns></returns>
        public void ApiAdminInventoryPut (List<InventoryUpdate> body)
        {
             ApiAdminInventoryPutWithHttpInfo(body);
        }

        /// <summary>
        /// Bulk update inventory Allows administrators to update inventory levels for multiple products at once.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">List of inventory updates.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ApiAdminInventoryPutWithHttpInfo (List<InventoryUpdate> body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AdminApi->ApiAdminInventoryPut");

            var localVarPath = "/api/admin/inventory";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (BearerAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiAdminInventoryPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Bulk update inventory Allows administrators to update inventory levels for multiple products at once.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">List of inventory updates.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiAdminInventoryPutAsync (List<InventoryUpdate> body)
        {
             await ApiAdminInventoryPutAsyncWithHttpInfo(body);

        }

        /// <summary>
        /// Bulk update inventory Allows administrators to update inventory levels for multiple products at once.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">List of inventory updates.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ApiAdminInventoryPutAsyncWithHttpInfo (List<InventoryUpdate> body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AdminApi->ApiAdminInventoryPut");

            var localVarPath = "/api/admin/inventory";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (BearerAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiAdminInventoryPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Retrieve system logs Fetches logs based on filters like date range, log level, or specific events.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">Starting date to filter logs. (optional)</param>
        /// <param name="endDate">Ending date to filter logs. (optional)</param>
        /// <param name="logLevel">Level of log (e.g., INFO, ERROR, WARNING). (optional)</param>
        /// <param name="_event">Specific event to filter logs. (optional)</param>
        /// <returns>List&lt;SystemLog&gt;</returns>
        public List<SystemLog> ApiAdminLogsGet (DateTime? startDate = null, DateTime? endDate = null, string logLevel = null, string _event = null)
        {
             ApiResponse<List<SystemLog>> localVarResponse = ApiAdminLogsGetWithHttpInfo(startDate, endDate, logLevel, _event);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve system logs Fetches logs based on filters like date range, log level, or specific events.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">Starting date to filter logs. (optional)</param>
        /// <param name="endDate">Ending date to filter logs. (optional)</param>
        /// <param name="logLevel">Level of log (e.g., INFO, ERROR, WARNING). (optional)</param>
        /// <param name="_event">Specific event to filter logs. (optional)</param>
        /// <returns>ApiResponse of List&lt;SystemLog&gt;</returns>
        public ApiResponse< List<SystemLog> > ApiAdminLogsGetWithHttpInfo (DateTime? startDate = null, DateTime? endDate = null, string logLevel = null, string _event = null)
        {

            var localVarPath = "/api/admin/logs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startDate", startDate)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endDate", endDate)); // query parameter
            if (logLevel != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "logLevel", logLevel)); // query parameter
            if (_event != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "event", _event)); // query parameter
            // authentication (BearerAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiAdminLogsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<SystemLog>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<SystemLog>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<SystemLog>)));
        }

        /// <summary>
        /// Retrieve system logs Fetches logs based on filters like date range, log level, or specific events.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">Starting date to filter logs. (optional)</param>
        /// <param name="endDate">Ending date to filter logs. (optional)</param>
        /// <param name="logLevel">Level of log (e.g., INFO, ERROR, WARNING). (optional)</param>
        /// <param name="_event">Specific event to filter logs. (optional)</param>
        /// <returns>Task of List&lt;SystemLog&gt;</returns>
        public async System.Threading.Tasks.Task<List<SystemLog>> ApiAdminLogsGetAsync (DateTime? startDate = null, DateTime? endDate = null, string logLevel = null, string _event = null)
        {
             ApiResponse<List<SystemLog>> localVarResponse = await ApiAdminLogsGetAsyncWithHttpInfo(startDate, endDate, logLevel, _event);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve system logs Fetches logs based on filters like date range, log level, or specific events.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">Starting date to filter logs. (optional)</param>
        /// <param name="endDate">Ending date to filter logs. (optional)</param>
        /// <param name="logLevel">Level of log (e.g., INFO, ERROR, WARNING). (optional)</param>
        /// <param name="_event">Specific event to filter logs. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;SystemLog&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<SystemLog>>> ApiAdminLogsGetAsyncWithHttpInfo (DateTime? startDate = null, DateTime? endDate = null, string logLevel = null, string _event = null)
        {

            var localVarPath = "/api/admin/logs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startDate", startDate)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endDate", endDate)); // query parameter
            if (logLevel != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "logLevel", logLevel)); // query parameter
            if (_event != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "event", _event)); // query parameter
            // authentication (BearerAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiAdminLogsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<SystemLog>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<SystemLog>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<SystemLog>)));
        }

        /// <summary>
        /// Retrieve system monitoring data Fetches monitoring metrics based on specified filters like time range or specific metrics.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startTime">Starting timestamp to filter monitoring data. (optional)</param>
        /// <param name="endTime">Ending timestamp to filter monitoring data. (optional)</param>
        /// <param name="metric">Specific metric to retrieve (e.g., \&quot;CPU_Usage\&quot;, \&quot;Response_Time\&quot;). (optional)</param>
        /// <returns>List&lt;MonitoringMetric&gt;</returns>
        public List<MonitoringMetric> ApiAdminMonitoringGet (DateTime? startTime = null, DateTime? endTime = null, string metric = null)
        {
             ApiResponse<List<MonitoringMetric>> localVarResponse = ApiAdminMonitoringGetWithHttpInfo(startTime, endTime, metric);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve system monitoring data Fetches monitoring metrics based on specified filters like time range or specific metrics.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startTime">Starting timestamp to filter monitoring data. (optional)</param>
        /// <param name="endTime">Ending timestamp to filter monitoring data. (optional)</param>
        /// <param name="metric">Specific metric to retrieve (e.g., \&quot;CPU_Usage\&quot;, \&quot;Response_Time\&quot;). (optional)</param>
        /// <returns>ApiResponse of List&lt;MonitoringMetric&gt;</returns>
        public ApiResponse< List<MonitoringMetric> > ApiAdminMonitoringGetWithHttpInfo (DateTime? startTime = null, DateTime? endTime = null, string metric = null)
        {

            var localVarPath = "/api/admin/monitoring";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (startTime != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startTime", startTime)); // query parameter
            if (endTime != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endTime", endTime)); // query parameter
            if (metric != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "metric", metric)); // query parameter
            // authentication (BearerAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiAdminMonitoringGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<MonitoringMetric>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<MonitoringMetric>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<MonitoringMetric>)));
        }

        /// <summary>
        /// Retrieve system monitoring data Fetches monitoring metrics based on specified filters like time range or specific metrics.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startTime">Starting timestamp to filter monitoring data. (optional)</param>
        /// <param name="endTime">Ending timestamp to filter monitoring data. (optional)</param>
        /// <param name="metric">Specific metric to retrieve (e.g., \&quot;CPU_Usage\&quot;, \&quot;Response_Time\&quot;). (optional)</param>
        /// <returns>Task of List&lt;MonitoringMetric&gt;</returns>
        public async System.Threading.Tasks.Task<List<MonitoringMetric>> ApiAdminMonitoringGetAsync (DateTime? startTime = null, DateTime? endTime = null, string metric = null)
        {
             ApiResponse<List<MonitoringMetric>> localVarResponse = await ApiAdminMonitoringGetAsyncWithHttpInfo(startTime, endTime, metric);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve system monitoring data Fetches monitoring metrics based on specified filters like time range or specific metrics.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startTime">Starting timestamp to filter monitoring data. (optional)</param>
        /// <param name="endTime">Ending timestamp to filter monitoring data. (optional)</param>
        /// <param name="metric">Specific metric to retrieve (e.g., \&quot;CPU_Usage\&quot;, \&quot;Response_Time\&quot;). (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;MonitoringMetric&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<MonitoringMetric>>> ApiAdminMonitoringGetAsyncWithHttpInfo (DateTime? startTime = null, DateTime? endTime = null, string metric = null)
        {

            var localVarPath = "/api/admin/monitoring";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (startTime != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startTime", startTime)); // query parameter
            if (endTime != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endTime", endTime)); // query parameter
            if (metric != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "metric", metric)); // query parameter
            // authentication (BearerAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiAdminMonitoringGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<MonitoringMetric>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<MonitoringMetric>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<MonitoringMetric>)));
        }

        /// <summary>
        /// Send a notification to a user Allows authorized entities (e.g., administrators or automated systems) to send a notification to a specific user.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Notification details and target user</param>
        /// <returns></returns>
        public void ApiAdminNotificationsPost (AdminNotificationsBody body)
        {
             ApiAdminNotificationsPostWithHttpInfo(body);
        }

        /// <summary>
        /// Send a notification to a user Allows authorized entities (e.g., administrators or automated systems) to send a notification to a specific user.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Notification details and target user</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ApiAdminNotificationsPostWithHttpInfo (AdminNotificationsBody body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AdminApi->ApiAdminNotificationsPost");

            var localVarPath = "/api/admin/notifications";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (BearerAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiAdminNotificationsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Send a notification to a user Allows authorized entities (e.g., administrators or automated systems) to send a notification to a specific user.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Notification details and target user</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiAdminNotificationsPostAsync (AdminNotificationsBody body)
        {
             await ApiAdminNotificationsPostAsyncWithHttpInfo(body);

        }

        /// <summary>
        /// Send a notification to a user Allows authorized entities (e.g., administrators or automated systems) to send a notification to a specific user.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Notification details and target user</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ApiAdminNotificationsPostAsyncWithHttpInfo (AdminNotificationsBody body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AdminApi->ApiAdminNotificationsPost");

            var localVarPath = "/api/admin/notifications";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (BearerAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiAdminNotificationsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// List all orders Provides a list of all orders placed on the platform, with filters for date, status, etc.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">Filter orders by their status (e.g., \&quot;pending\&quot;, \&quot;shipped\&quot;, \&quot;completed\&quot;, \&quot;returned\&quot;). (optional)</param>
        /// <param name="fromDate">Filter orders placed after this date. (optional)</param>
        /// <param name="toDate">Filter orders placed before this date. (optional)</param>
        /// <returns>List&lt;Order&gt;</returns>
        public List<Order> ApiAdminOrdersGet (string status = null, DateTime? fromDate = null, DateTime? toDate = null)
        {
             ApiResponse<List<Order>> localVarResponse = ApiAdminOrdersGetWithHttpInfo(status, fromDate, toDate);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List all orders Provides a list of all orders placed on the platform, with filters for date, status, etc.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">Filter orders by their status (e.g., \&quot;pending\&quot;, \&quot;shipped\&quot;, \&quot;completed\&quot;, \&quot;returned\&quot;). (optional)</param>
        /// <param name="fromDate">Filter orders placed after this date. (optional)</param>
        /// <param name="toDate">Filter orders placed before this date. (optional)</param>
        /// <returns>ApiResponse of List&lt;Order&gt;</returns>
        public ApiResponse< List<Order> > ApiAdminOrdersGetWithHttpInfo (string status = null, DateTime? fromDate = null, DateTime? toDate = null)
        {

            var localVarPath = "/api/admin/orders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (status != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "status", status)); // query parameter
            if (fromDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fromDate", fromDate)); // query parameter
            if (toDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "toDate", toDate)); // query parameter
            // authentication (BearerAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiAdminOrdersGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Order>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Order>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Order>)));
        }

        /// <summary>
        /// List all orders Provides a list of all orders placed on the platform, with filters for date, status, etc.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">Filter orders by their status (e.g., \&quot;pending\&quot;, \&quot;shipped\&quot;, \&quot;completed\&quot;, \&quot;returned\&quot;). (optional)</param>
        /// <param name="fromDate">Filter orders placed after this date. (optional)</param>
        /// <param name="toDate">Filter orders placed before this date. (optional)</param>
        /// <returns>Task of List&lt;Order&gt;</returns>
        public async System.Threading.Tasks.Task<List<Order>> ApiAdminOrdersGetAsync (string status = null, DateTime? fromDate = null, DateTime? toDate = null)
        {
             ApiResponse<List<Order>> localVarResponse = await ApiAdminOrdersGetAsyncWithHttpInfo(status, fromDate, toDate);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List all orders Provides a list of all orders placed on the platform, with filters for date, status, etc.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">Filter orders by their status (e.g., \&quot;pending\&quot;, \&quot;shipped\&quot;, \&quot;completed\&quot;, \&quot;returned\&quot;). (optional)</param>
        /// <param name="fromDate">Filter orders placed after this date. (optional)</param>
        /// <param name="toDate">Filter orders placed before this date. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Order&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Order>>> ApiAdminOrdersGetAsyncWithHttpInfo (string status = null, DateTime? fromDate = null, DateTime? toDate = null)
        {

            var localVarPath = "/api/admin/orders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (status != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "status", status)); // query parameter
            if (fromDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fromDate", fromDate)); // query parameter
            if (toDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "toDate", toDate)); // query parameter
            // authentication (BearerAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiAdminOrdersGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Order>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Order>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Order>)));
        }

        /// <summary>
        /// Bulk update orders Allows administrators to update multiple orders at once, typically for changing order status.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">List of orders with updated data.</param>
        /// <returns></returns>
        public void ApiAdminOrdersPut (List<OrderUpdate> body)
        {
             ApiAdminOrdersPutWithHttpInfo(body);
        }

        /// <summary>
        /// Bulk update orders Allows administrators to update multiple orders at once, typically for changing order status.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">List of orders with updated data.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ApiAdminOrdersPutWithHttpInfo (List<OrderUpdate> body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AdminApi->ApiAdminOrdersPut");

            var localVarPath = "/api/admin/orders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (BearerAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiAdminOrdersPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Bulk update orders Allows administrators to update multiple orders at once, typically for changing order status.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">List of orders with updated data.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiAdminOrdersPutAsync (List<OrderUpdate> body)
        {
             await ApiAdminOrdersPutAsyncWithHttpInfo(body);

        }

        /// <summary>
        /// Bulk update orders Allows administrators to update multiple orders at once, typically for changing order status.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">List of orders with updated data.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ApiAdminOrdersPutAsyncWithHttpInfo (List<OrderUpdate> body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AdminApi->ApiAdminOrdersPut");

            var localVarPath = "/api/admin/orders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (BearerAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiAdminOrdersPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Retrieve a list of business partnerships Fetches a list of all business partnerships associated with the platform.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;Partnership&gt;</returns>
        public List<Partnership> ApiAdminPartnershipsGet ()
        {
             ApiResponse<List<Partnership>> localVarResponse = ApiAdminPartnershipsGetWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a list of business partnerships Fetches a list of all business partnerships associated with the platform.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;Partnership&gt;</returns>
        public ApiResponse< List<Partnership> > ApiAdminPartnershipsGetWithHttpInfo ()
        {

            var localVarPath = "/api/admin/partnerships";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (BearerAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiAdminPartnershipsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Partnership>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Partnership>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Partnership>)));
        }

        /// <summary>
        /// Retrieve a list of business partnerships Fetches a list of all business partnerships associated with the platform.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;Partnership&gt;</returns>
        public async System.Threading.Tasks.Task<List<Partnership>> ApiAdminPartnershipsGetAsync ()
        {
             ApiResponse<List<Partnership>> localVarResponse = await ApiAdminPartnershipsGetAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve a list of business partnerships Fetches a list of all business partnerships associated with the platform.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;Partnership&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Partnership>>> ApiAdminPartnershipsGetAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/admin/partnerships";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (BearerAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiAdminPartnershipsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Partnership>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Partnership>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Partnership>)));
        }

        /// <summary>
        /// Add a new business partnership Registers a new business partnership or collaboration with the platform.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Data for the new partnership.</param>
        /// <returns></returns>
        public void ApiAdminPartnershipsPost (PartnershipCreate body)
        {
             ApiAdminPartnershipsPostWithHttpInfo(body);
        }

        /// <summary>
        /// Add a new business partnership Registers a new business partnership or collaboration with the platform.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Data for the new partnership.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ApiAdminPartnershipsPostWithHttpInfo (PartnershipCreate body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AdminApi->ApiAdminPartnershipsPost");

            var localVarPath = "/api/admin/partnerships";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (BearerAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiAdminPartnershipsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Add a new business partnership Registers a new business partnership or collaboration with the platform.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Data for the new partnership.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiAdminPartnershipsPostAsync (PartnershipCreate body)
        {
             await ApiAdminPartnershipsPostAsyncWithHttpInfo(body);

        }

        /// <summary>
        /// Add a new business partnership Registers a new business partnership or collaboration with the platform.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Data for the new partnership.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ApiAdminPartnershipsPostAsyncWithHttpInfo (PartnershipCreate body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AdminApi->ApiAdminPartnershipsPost");

            var localVarPath = "/api/admin/partnerships";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (BearerAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiAdminPartnershipsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Delete a promotion Allows administrators to delete an existing promotion.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="promotionId">ID of the promotion to delete.</param>
        /// <returns></returns>
        public void ApiAdminPromotionsDelete (int? promotionId)
        {
             ApiAdminPromotionsDeleteWithHttpInfo(promotionId);
        }

        /// <summary>
        /// Delete a promotion Allows administrators to delete an existing promotion.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="promotionId">ID of the promotion to delete.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ApiAdminPromotionsDeleteWithHttpInfo (int? promotionId)
        {
            // verify the required parameter 'promotionId' is set
            if (promotionId == null)
                throw new ApiException(400, "Missing required parameter 'promotionId' when calling AdminApi->ApiAdminPromotionsDelete");

            var localVarPath = "/api/admin/promotions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (promotionId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "promotionId", promotionId)); // query parameter
            // authentication (BearerAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiAdminPromotionsDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Delete a promotion Allows administrators to delete an existing promotion.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="promotionId">ID of the promotion to delete.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiAdminPromotionsDeleteAsync (int? promotionId)
        {
             await ApiAdminPromotionsDeleteAsyncWithHttpInfo(promotionId);

        }

        /// <summary>
        /// Delete a promotion Allows administrators to delete an existing promotion.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="promotionId">ID of the promotion to delete.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ApiAdminPromotionsDeleteAsyncWithHttpInfo (int? promotionId)
        {
            // verify the required parameter 'promotionId' is set
            if (promotionId == null)
                throw new ApiException(400, "Missing required parameter 'promotionId' when calling AdminApi->ApiAdminPromotionsDelete");

            var localVarPath = "/api/admin/promotions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (promotionId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "promotionId", promotionId)); // query parameter
            // authentication (BearerAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiAdminPromotionsDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// List all active promotions Provides a list of all active promotions on the platform.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;Promotion&gt;</returns>
        public List<Promotion> ApiAdminPromotionsGet ()
        {
             ApiResponse<List<Promotion>> localVarResponse = ApiAdminPromotionsGetWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// List all active promotions Provides a list of all active promotions on the platform.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;Promotion&gt;</returns>
        public ApiResponse< List<Promotion> > ApiAdminPromotionsGetWithHttpInfo ()
        {

            var localVarPath = "/api/admin/promotions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (BearerAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiAdminPromotionsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Promotion>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Promotion>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Promotion>)));
        }

        /// <summary>
        /// List all active promotions Provides a list of all active promotions on the platform.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;Promotion&gt;</returns>
        public async System.Threading.Tasks.Task<List<Promotion>> ApiAdminPromotionsGetAsync ()
        {
             ApiResponse<List<Promotion>> localVarResponse = await ApiAdminPromotionsGetAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// List all active promotions Provides a list of all active promotions on the platform.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;Promotion&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Promotion>>> ApiAdminPromotionsGetAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/admin/promotions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (BearerAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiAdminPromotionsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Promotion>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Promotion>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Promotion>)));
        }

        /// <summary>
        /// Create a new promotion Allows administrators to create a new promotion or discount.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Details of the new promotion.</param>
        /// <returns></returns>
        public void ApiAdminPromotionsPost (Promotion body)
        {
             ApiAdminPromotionsPostWithHttpInfo(body);
        }

        /// <summary>
        /// Create a new promotion Allows administrators to create a new promotion or discount.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Details of the new promotion.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ApiAdminPromotionsPostWithHttpInfo (Promotion body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AdminApi->ApiAdminPromotionsPost");

            var localVarPath = "/api/admin/promotions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (BearerAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiAdminPromotionsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Create a new promotion Allows administrators to create a new promotion or discount.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Details of the new promotion.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiAdminPromotionsPostAsync (Promotion body)
        {
             await ApiAdminPromotionsPostAsyncWithHttpInfo(body);

        }

        /// <summary>
        /// Create a new promotion Allows administrators to create a new promotion or discount.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Details of the new promotion.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ApiAdminPromotionsPostAsyncWithHttpInfo (Promotion body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AdminApi->ApiAdminPromotionsPost");

            var localVarPath = "/api/admin/promotions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (BearerAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiAdminPromotionsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Bulk update promotions Allows administrators to update multiple promotions at once.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">List of promotions with updated data.</param>
        /// <returns></returns>
        public void ApiAdminPromotionsPut (List<PromotionUpdate> body)
        {
             ApiAdminPromotionsPutWithHttpInfo(body);
        }

        /// <summary>
        /// Bulk update promotions Allows administrators to update multiple promotions at once.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">List of promotions with updated data.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ApiAdminPromotionsPutWithHttpInfo (List<PromotionUpdate> body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AdminApi->ApiAdminPromotionsPut");

            var localVarPath = "/api/admin/promotions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (BearerAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiAdminPromotionsPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Bulk update promotions Allows administrators to update multiple promotions at once.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">List of promotions with updated data.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiAdminPromotionsPutAsync (List<PromotionUpdate> body)
        {
             await ApiAdminPromotionsPutAsyncWithHttpInfo(body);

        }

        /// <summary>
        /// Bulk update promotions Allows administrators to update multiple promotions at once.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">List of promotions with updated data.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ApiAdminPromotionsPutAsyncWithHttpInfo (List<PromotionUpdate> body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AdminApi->ApiAdminPromotionsPut");

            var localVarPath = "/api/admin/promotions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (BearerAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiAdminPromotionsPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Generate and retrieve a sales report Provides an overview of sales, including total sales, revenue, top-selling products, and other related metrics.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">Start date for the report period. (optional)</param>
        /// <param name="endDate">End date for the report period. (optional)</param>
        /// <param name="granularity">Level of detail or aggregation for the report, e.g., daily, weekly, monthly. (optional)</param>
        /// <returns>SalesReport</returns>
        public SalesReport ApiAdminReportsSalesGet (DateTime? startDate = null, DateTime? endDate = null, string granularity = null)
        {
             ApiResponse<SalesReport> localVarResponse = ApiAdminReportsSalesGetWithHttpInfo(startDate, endDate, granularity);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Generate and retrieve a sales report Provides an overview of sales, including total sales, revenue, top-selling products, and other related metrics.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">Start date for the report period. (optional)</param>
        /// <param name="endDate">End date for the report period. (optional)</param>
        /// <param name="granularity">Level of detail or aggregation for the report, e.g., daily, weekly, monthly. (optional)</param>
        /// <returns>ApiResponse of SalesReport</returns>
        public ApiResponse< SalesReport > ApiAdminReportsSalesGetWithHttpInfo (DateTime? startDate = null, DateTime? endDate = null, string granularity = null)
        {

            var localVarPath = "/api/admin/reports/sales";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startDate", startDate)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endDate", endDate)); // query parameter
            if (granularity != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "granularity", granularity)); // query parameter
            // authentication (BearerAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiAdminReportsSalesGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SalesReport>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SalesReport) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SalesReport)));
        }

        /// <summary>
        /// Generate and retrieve a sales report Provides an overview of sales, including total sales, revenue, top-selling products, and other related metrics.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">Start date for the report period. (optional)</param>
        /// <param name="endDate">End date for the report period. (optional)</param>
        /// <param name="granularity">Level of detail or aggregation for the report, e.g., daily, weekly, monthly. (optional)</param>
        /// <returns>Task of SalesReport</returns>
        public async System.Threading.Tasks.Task<SalesReport> ApiAdminReportsSalesGetAsync (DateTime? startDate = null, DateTime? endDate = null, string granularity = null)
        {
             ApiResponse<SalesReport> localVarResponse = await ApiAdminReportsSalesGetAsyncWithHttpInfo(startDate, endDate, granularity);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Generate and retrieve a sales report Provides an overview of sales, including total sales, revenue, top-selling products, and other related metrics.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">Start date for the report period. (optional)</param>
        /// <param name="endDate">End date for the report period. (optional)</param>
        /// <param name="granularity">Level of detail or aggregation for the report, e.g., daily, weekly, monthly. (optional)</param>
        /// <returns>Task of ApiResponse (SalesReport)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SalesReport>> ApiAdminReportsSalesGetAsyncWithHttpInfo (DateTime? startDate = null, DateTime? endDate = null, string granularity = null)
        {

            var localVarPath = "/api/admin/reports/sales";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startDate", startDate)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endDate", endDate)); // query parameter
            if (granularity != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "granularity", granularity)); // query parameter
            // authentication (BearerAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiAdminReportsSalesGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SalesReport>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SalesReport) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SalesReport)));
        }

        /// <summary>
        /// Generate and retrieve a user activity report Provides insights into user behaviors, including login frequency, pages visited, time spent, and other metrics.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">Start date for the report period. (optional)</param>
        /// <param name="endDate">End date for the report period. (optional)</param>
        /// <param name="granularity">Level of detail or aggregation for the report, e.g., daily, weekly, monthly. (optional)</param>
        /// <returns>UserActivityReport</returns>
        public UserActivityReport ApiAdminReportsUserActivityGet (DateTime? startDate = null, DateTime? endDate = null, string granularity = null)
        {
             ApiResponse<UserActivityReport> localVarResponse = ApiAdminReportsUserActivityGetWithHttpInfo(startDate, endDate, granularity);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Generate and retrieve a user activity report Provides insights into user behaviors, including login frequency, pages visited, time spent, and other metrics.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">Start date for the report period. (optional)</param>
        /// <param name="endDate">End date for the report period. (optional)</param>
        /// <param name="granularity">Level of detail or aggregation for the report, e.g., daily, weekly, monthly. (optional)</param>
        /// <returns>ApiResponse of UserActivityReport</returns>
        public ApiResponse< UserActivityReport > ApiAdminReportsUserActivityGetWithHttpInfo (DateTime? startDate = null, DateTime? endDate = null, string granularity = null)
        {

            var localVarPath = "/api/admin/reports/user-activity";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startDate", startDate)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endDate", endDate)); // query parameter
            if (granularity != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "granularity", granularity)); // query parameter
            // authentication (BearerAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiAdminReportsUserActivityGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserActivityReport>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (UserActivityReport) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserActivityReport)));
        }

        /// <summary>
        /// Generate and retrieve a user activity report Provides insights into user behaviors, including login frequency, pages visited, time spent, and other metrics.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">Start date for the report period. (optional)</param>
        /// <param name="endDate">End date for the report period. (optional)</param>
        /// <param name="granularity">Level of detail or aggregation for the report, e.g., daily, weekly, monthly. (optional)</param>
        /// <returns>Task of UserActivityReport</returns>
        public async System.Threading.Tasks.Task<UserActivityReport> ApiAdminReportsUserActivityGetAsync (DateTime? startDate = null, DateTime? endDate = null, string granularity = null)
        {
             ApiResponse<UserActivityReport> localVarResponse = await ApiAdminReportsUserActivityGetAsyncWithHttpInfo(startDate, endDate, granularity);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Generate and retrieve a user activity report Provides insights into user behaviors, including login frequency, pages visited, time spent, and other metrics.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">Start date for the report period. (optional)</param>
        /// <param name="endDate">End date for the report period. (optional)</param>
        /// <param name="granularity">Level of detail or aggregation for the report, e.g., daily, weekly, monthly. (optional)</param>
        /// <returns>Task of ApiResponse (UserActivityReport)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UserActivityReport>> ApiAdminReportsUserActivityGetAsyncWithHttpInfo (DateTime? startDate = null, DateTime? endDate = null, string granularity = null)
        {

            var localVarPath = "/api/admin/reports/user-activity";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startDate", startDate)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endDate", endDate)); // query parameter
            if (granularity != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "granularity", granularity)); // query parameter
            // authentication (BearerAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiAdminReportsUserActivityGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserActivityReport>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (UserActivityReport) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserActivityReport)));
        }

        /// <summary>
        /// Delete a specific review Allows administrators to delete inappropriate or irrelevant reviews.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reviewId">ID of the review to be deleted.</param>
        /// <returns></returns>
        public void ApiAdminReviewsDelete (long? reviewId)
        {
             ApiAdminReviewsDeleteWithHttpInfo(reviewId);
        }

        /// <summary>
        /// Delete a specific review Allows administrators to delete inappropriate or irrelevant reviews.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reviewId">ID of the review to be deleted.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ApiAdminReviewsDeleteWithHttpInfo (long? reviewId)
        {
            // verify the required parameter 'reviewId' is set
            if (reviewId == null)
                throw new ApiException(400, "Missing required parameter 'reviewId' when calling AdminApi->ApiAdminReviewsDelete");

            var localVarPath = "/api/admin/reviews";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (reviewId != null) localVarPathParams.Add("reviewId", this.Configuration.ApiClient.ParameterToString(reviewId)); // path parameter
            // authentication (BearerAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiAdminReviewsDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Delete a specific review Allows administrators to delete inappropriate or irrelevant reviews.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reviewId">ID of the review to be deleted.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiAdminReviewsDeleteAsync (long? reviewId)
        {
             await ApiAdminReviewsDeleteAsyncWithHttpInfo(reviewId);

        }

        /// <summary>
        /// Delete a specific review Allows administrators to delete inappropriate or irrelevant reviews.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reviewId">ID of the review to be deleted.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ApiAdminReviewsDeleteAsyncWithHttpInfo (long? reviewId)
        {
            // verify the required parameter 'reviewId' is set
            if (reviewId == null)
                throw new ApiException(400, "Missing required parameter 'reviewId' when calling AdminApi->ApiAdminReviewsDelete");

            var localVarPath = "/api/admin/reviews";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (reviewId != null) localVarPathParams.Add("reviewId", this.Configuration.ApiClient.ParameterToString(reviewId)); // path parameter
            // authentication (BearerAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiAdminReviewsDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Retrieve a list of product reviews Lists all product reviews with filtering and pagination capabilities.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">Filter reviews by specific product ID. (optional)</param>
        /// <param name="userId">Filter reviews by specific user ID. (optional)</param>
        /// <param name="status">Filter reviews by status (e.g., approved, pending, rejected). (optional)</param>
        /// <param name="page">Pagination - page number. (optional)</param>
        /// <param name="limit">Pagination - number of reviews per page. (optional)</param>
        /// <returns>List&lt;Review&gt;</returns>
        public List<Review> ApiAdminReviewsGet (long? productId = null, long? userId = null, string status = null, int? page = null, int? limit = null)
        {
             ApiResponse<List<Review>> localVarResponse = ApiAdminReviewsGetWithHttpInfo(productId, userId, status, page, limit);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a list of product reviews Lists all product reviews with filtering and pagination capabilities.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">Filter reviews by specific product ID. (optional)</param>
        /// <param name="userId">Filter reviews by specific user ID. (optional)</param>
        /// <param name="status">Filter reviews by status (e.g., approved, pending, rejected). (optional)</param>
        /// <param name="page">Pagination - page number. (optional)</param>
        /// <param name="limit">Pagination - number of reviews per page. (optional)</param>
        /// <returns>ApiResponse of List&lt;Review&gt;</returns>
        public ApiResponse< List<Review> > ApiAdminReviewsGetWithHttpInfo (long? productId = null, long? userId = null, string status = null, int? page = null, int? limit = null)
        {

            var localVarPath = "/api/admin/reviews";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (productId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "productId", productId)); // query parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter
            if (status != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "status", status)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            // authentication (BearerAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiAdminReviewsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Review>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Review>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Review>)));
        }

        /// <summary>
        /// Retrieve a list of product reviews Lists all product reviews with filtering and pagination capabilities.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">Filter reviews by specific product ID. (optional)</param>
        /// <param name="userId">Filter reviews by specific user ID. (optional)</param>
        /// <param name="status">Filter reviews by status (e.g., approved, pending, rejected). (optional)</param>
        /// <param name="page">Pagination - page number. (optional)</param>
        /// <param name="limit">Pagination - number of reviews per page. (optional)</param>
        /// <returns>Task of List&lt;Review&gt;</returns>
        public async System.Threading.Tasks.Task<List<Review>> ApiAdminReviewsGetAsync (long? productId = null, long? userId = null, string status = null, int? page = null, int? limit = null)
        {
             ApiResponse<List<Review>> localVarResponse = await ApiAdminReviewsGetAsyncWithHttpInfo(productId, userId, status, page, limit);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve a list of product reviews Lists all product reviews with filtering and pagination capabilities.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">Filter reviews by specific product ID. (optional)</param>
        /// <param name="userId">Filter reviews by specific user ID. (optional)</param>
        /// <param name="status">Filter reviews by status (e.g., approved, pending, rejected). (optional)</param>
        /// <param name="page">Pagination - page number. (optional)</param>
        /// <param name="limit">Pagination - number of reviews per page. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Review&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Review>>> ApiAdminReviewsGetAsyncWithHttpInfo (long? productId = null, long? userId = null, string status = null, int? page = null, int? limit = null)
        {

            var localVarPath = "/api/admin/reviews";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (productId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "productId", productId)); // query parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter
            if (status != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "status", status)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            // authentication (BearerAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiAdminReviewsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Review>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Review>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Review>)));
        }

        /// <summary>
        /// Update the status of a review Allows administrators to approve, reject, or update review status.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Review update details</param>
        /// <returns></returns>
        public void ApiAdminReviewsPut (ReviewUpdate body)
        {
             ApiAdminReviewsPutWithHttpInfo(body);
        }

        /// <summary>
        /// Update the status of a review Allows administrators to approve, reject, or update review status.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Review update details</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ApiAdminReviewsPutWithHttpInfo (ReviewUpdate body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AdminApi->ApiAdminReviewsPut");

            var localVarPath = "/api/admin/reviews";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (BearerAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiAdminReviewsPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Update the status of a review Allows administrators to approve, reject, or update review status.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Review update details</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiAdminReviewsPutAsync (ReviewUpdate body)
        {
             await ApiAdminReviewsPutAsyncWithHttpInfo(body);

        }

        /// <summary>
        /// Update the status of a review Allows administrators to approve, reject, or update review status.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Review update details</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ApiAdminReviewsPutAsyncWithHttpInfo (ReviewUpdate body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AdminApi->ApiAdminReviewsPut");

            var localVarPath = "/api/admin/reviews";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (BearerAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiAdminReviewsPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Retrieve platform settings Fetches the current configuration and settings of the platform.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>PlatformSettings</returns>
        public PlatformSettings ApiAdminSettingsGet ()
        {
             ApiResponse<PlatformSettings> localVarResponse = ApiAdminSettingsGetWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve platform settings Fetches the current configuration and settings of the platform.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of PlatformSettings</returns>
        public ApiResponse< PlatformSettings > ApiAdminSettingsGetWithHttpInfo ()
        {

            var localVarPath = "/api/admin/settings";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (BearerAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiAdminSettingsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PlatformSettings>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PlatformSettings) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PlatformSettings)));
        }

        /// <summary>
        /// Retrieve platform settings Fetches the current configuration and settings of the platform.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of PlatformSettings</returns>
        public async System.Threading.Tasks.Task<PlatformSettings> ApiAdminSettingsGetAsync ()
        {
             ApiResponse<PlatformSettings> localVarResponse = await ApiAdminSettingsGetAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve platform settings Fetches the current configuration and settings of the platform.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (PlatformSettings)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PlatformSettings>> ApiAdminSettingsGetAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/admin/settings";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (BearerAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiAdminSettingsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PlatformSettings>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PlatformSettings) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PlatformSettings)));
        }

        /// <summary>
        /// Update platform settings Allows administrators to modify and configure platform settings.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Updated platform settings data.</param>
        /// <returns></returns>
        public void ApiAdminSettingsPut (PlatformSettingsUpdate body)
        {
             ApiAdminSettingsPutWithHttpInfo(body);
        }

        /// <summary>
        /// Update platform settings Allows administrators to modify and configure platform settings.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Updated platform settings data.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ApiAdminSettingsPutWithHttpInfo (PlatformSettingsUpdate body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AdminApi->ApiAdminSettingsPut");

            var localVarPath = "/api/admin/settings";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (BearerAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiAdminSettingsPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Update platform settings Allows administrators to modify and configure platform settings.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Updated platform settings data.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiAdminSettingsPutAsync (PlatformSettingsUpdate body)
        {
             await ApiAdminSettingsPutAsyncWithHttpInfo(body);

        }

        /// <summary>
        /// Update platform settings Allows administrators to modify and configure platform settings.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Updated platform settings data.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ApiAdminSettingsPutAsyncWithHttpInfo (PlatformSettingsUpdate body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AdminApi->ApiAdminSettingsPut");

            var localVarPath = "/api/admin/settings";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (BearerAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiAdminSettingsPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Bulk delete users Allows administrators to delete multiple users at once.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">A list of user IDs to be deleted.</param>
        /// <returns></returns>
        public void ApiAdminUsersDelete (List<int?> body)
        {
             ApiAdminUsersDeleteWithHttpInfo(body);
        }

        /// <summary>
        /// Bulk delete users Allows administrators to delete multiple users at once.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">A list of user IDs to be deleted.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ApiAdminUsersDeleteWithHttpInfo (List<int?> body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AdminApi->ApiAdminUsersDelete");

            var localVarPath = "/api/admin/users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (BearerAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiAdminUsersDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Bulk delete users Allows administrators to delete multiple users at once.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">A list of user IDs to be deleted.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiAdminUsersDeleteAsync (List<int?> body)
        {
             await ApiAdminUsersDeleteAsyncWithHttpInfo(body);

        }

        /// <summary>
        /// Bulk delete users Allows administrators to delete multiple users at once.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">A list of user IDs to be deleted.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ApiAdminUsersDeleteAsyncWithHttpInfo (List<int?> body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AdminApi->ApiAdminUsersDelete");

            var localVarPath = "/api/admin/users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (BearerAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiAdminUsersDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// List all users Provides a list of all registered users on the platform.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;User&gt;</returns>
        public List<User> ApiAdminUsersGet ()
        {
             ApiResponse<List<User>> localVarResponse = ApiAdminUsersGetWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// List all users Provides a list of all registered users on the platform.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;User&gt;</returns>
        public ApiResponse< List<User> > ApiAdminUsersGetWithHttpInfo ()
        {

            var localVarPath = "/api/admin/users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (BearerAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiAdminUsersGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<User>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<User>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<User>)));
        }

        /// <summary>
        /// List all users Provides a list of all registered users on the platform.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;User&gt;</returns>
        public async System.Threading.Tasks.Task<List<User>> ApiAdminUsersGetAsync ()
        {
             ApiResponse<List<User>> localVarResponse = await ApiAdminUsersGetAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// List all users Provides a list of all registered users on the platform.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;User&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<User>>> ApiAdminUsersGetAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/admin/users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (BearerAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiAdminUsersGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<User>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<User>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<User>)));
        }

        /// <summary>
        /// Add a new user Allows administrators to manually add a new user to the platform.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">User data for the new user.</param>
        /// <returns></returns>
        public void ApiAdminUsersPost (UserRegistration body)
        {
             ApiAdminUsersPostWithHttpInfo(body);
        }

        /// <summary>
        /// Add a new user Allows administrators to manually add a new user to the platform.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">User data for the new user.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ApiAdminUsersPostWithHttpInfo (UserRegistration body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AdminApi->ApiAdminUsersPost");

            var localVarPath = "/api/admin/users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (BearerAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiAdminUsersPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Add a new user Allows administrators to manually add a new user to the platform.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">User data for the new user.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiAdminUsersPostAsync (UserRegistration body)
        {
             await ApiAdminUsersPostAsyncWithHttpInfo(body);

        }

        /// <summary>
        /// Add a new user Allows administrators to manually add a new user to the platform.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">User data for the new user.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ApiAdminUsersPostAsyncWithHttpInfo (UserRegistration body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AdminApi->ApiAdminUsersPost");

            var localVarPath = "/api/admin/users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (BearerAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiAdminUsersPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Bulk update users Allows administrators to update multiple users at once.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">A list of users with updated data.</param>
        /// <returns></returns>
        public void ApiAdminUsersPut (List<UserUpdate> body)
        {
             ApiAdminUsersPutWithHttpInfo(body);
        }

        /// <summary>
        /// Bulk update users Allows administrators to update multiple users at once.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">A list of users with updated data.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ApiAdminUsersPutWithHttpInfo (List<UserUpdate> body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AdminApi->ApiAdminUsersPut");

            var localVarPath = "/api/admin/users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (BearerAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiAdminUsersPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Bulk update users Allows administrators to update multiple users at once.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">A list of users with updated data.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiAdminUsersPutAsync (List<UserUpdate> body)
        {
             await ApiAdminUsersPutAsyncWithHttpInfo(body);

        }

        /// <summary>
        /// Bulk update users Allows administrators to update multiple users at once.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">A list of users with updated data.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ApiAdminUsersPutAsyncWithHttpInfo (List<UserUpdate> body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AdminApi->ApiAdminUsersPut");

            var localVarPath = "/api/admin/users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (BearerAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiAdminUsersPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Unban a specific user Allows administrators to lift a ban on a user, restoring their access to the platform.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">ID of the user to unban.</param>
        /// <returns></returns>
        public void ApiAdminUsersUserIdBansDelete (int? userId)
        {
             ApiAdminUsersUserIdBansDeleteWithHttpInfo(userId);
        }

        /// <summary>
        /// Unban a specific user Allows administrators to lift a ban on a user, restoring their access to the platform.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">ID of the user to unban.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ApiAdminUsersUserIdBansDeleteWithHttpInfo (int? userId)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling AdminApi->ApiAdminUsersUserIdBansDelete");

            var localVarPath = "/api/admin/users/{userId}/bans";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("userId", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            // authentication (BearerAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiAdminUsersUserIdBansDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Unban a specific user Allows administrators to lift a ban on a user, restoring their access to the platform.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">ID of the user to unban.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiAdminUsersUserIdBansDeleteAsync (int? userId)
        {
             await ApiAdminUsersUserIdBansDeleteAsyncWithHttpInfo(userId);

        }

        /// <summary>
        /// Unban a specific user Allows administrators to lift a ban on a user, restoring their access to the platform.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">ID of the user to unban.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ApiAdminUsersUserIdBansDeleteAsyncWithHttpInfo (int? userId)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling AdminApi->ApiAdminUsersUserIdBansDelete");

            var localVarPath = "/api/admin/users/{userId}/bans";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("userId", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            // authentication (BearerAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiAdminUsersUserIdBansDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Ban a specific user Allows administrators to ban a user, preventing them from accessing the platform or making transactions.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Details and reason for the ban.</param>
        /// <param name="userId">ID of the user to ban.</param>
        /// <returns></returns>
        public void ApiAdminUsersUserIdBansPost (UserIdBansBody body, int? userId)
        {
             ApiAdminUsersUserIdBansPostWithHttpInfo(body, userId);
        }

        /// <summary>
        /// Ban a specific user Allows administrators to ban a user, preventing them from accessing the platform or making transactions.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Details and reason for the ban.</param>
        /// <param name="userId">ID of the user to ban.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ApiAdminUsersUserIdBansPostWithHttpInfo (UserIdBansBody body, int? userId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AdminApi->ApiAdminUsersUserIdBansPost");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling AdminApi->ApiAdminUsersUserIdBansPost");

            var localVarPath = "/api/admin/users/{userId}/bans";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("userId", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (BearerAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiAdminUsersUserIdBansPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Ban a specific user Allows administrators to ban a user, preventing them from accessing the platform or making transactions.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Details and reason for the ban.</param>
        /// <param name="userId">ID of the user to ban.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiAdminUsersUserIdBansPostAsync (UserIdBansBody body, int? userId)
        {
             await ApiAdminUsersUserIdBansPostAsyncWithHttpInfo(body, userId);

        }

        /// <summary>
        /// Ban a specific user Allows administrators to ban a user, preventing them from accessing the platform or making transactions.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Details and reason for the ban.</param>
        /// <param name="userId">ID of the user to ban.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ApiAdminUsersUserIdBansPostAsyncWithHttpInfo (UserIdBansBody body, int? userId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AdminApi->ApiAdminUsersUserIdBansPost");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling AdminApi->ApiAdminUsersUserIdBansPost");

            var localVarPath = "/api/admin/users/{userId}/bans";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("userId", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (BearerAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiAdminUsersUserIdBansPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Remove roles from a specific user Allows administrators to remove specific roles from a user.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">List of roles to be removed from the user.</param>
        /// <param name="userId">ID of the user to remove roles from.</param>
        /// <returns></returns>
        public void ApiAdminUsersUserIdRolesDelete (List<string> body, int? userId)
        {
             ApiAdminUsersUserIdRolesDeleteWithHttpInfo(body, userId);
        }

        /// <summary>
        /// Remove roles from a specific user Allows administrators to remove specific roles from a user.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">List of roles to be removed from the user.</param>
        /// <param name="userId">ID of the user to remove roles from.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ApiAdminUsersUserIdRolesDeleteWithHttpInfo (List<string> body, int? userId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AdminApi->ApiAdminUsersUserIdRolesDelete");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling AdminApi->ApiAdminUsersUserIdRolesDelete");

            var localVarPath = "/api/admin/users/{userId}/roles";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("userId", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (BearerAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiAdminUsersUserIdRolesDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Remove roles from a specific user Allows administrators to remove specific roles from a user.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">List of roles to be removed from the user.</param>
        /// <param name="userId">ID of the user to remove roles from.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiAdminUsersUserIdRolesDeleteAsync (List<string> body, int? userId)
        {
             await ApiAdminUsersUserIdRolesDeleteAsyncWithHttpInfo(body, userId);

        }

        /// <summary>
        /// Remove roles from a specific user Allows administrators to remove specific roles from a user.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">List of roles to be removed from the user.</param>
        /// <param name="userId">ID of the user to remove roles from.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ApiAdminUsersUserIdRolesDeleteAsyncWithHttpInfo (List<string> body, int? userId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AdminApi->ApiAdminUsersUserIdRolesDelete");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling AdminApi->ApiAdminUsersUserIdRolesDelete");

            var localVarPath = "/api/admin/users/{userId}/roles";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("userId", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (BearerAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiAdminUsersUserIdRolesDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// List roles for a specific user Provides a list of roles assigned to the specified user.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">ID of the user to retrieve roles for.</param>
        /// <returns>List&lt;string&gt;</returns>
        public List<string> ApiAdminUsersUserIdRolesGet (int? userId)
        {
             ApiResponse<List<string>> localVarResponse = ApiAdminUsersUserIdRolesGetWithHttpInfo(userId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List roles for a specific user Provides a list of roles assigned to the specified user.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">ID of the user to retrieve roles for.</param>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        public ApiResponse< List<string> > ApiAdminUsersUserIdRolesGetWithHttpInfo (int? userId)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling AdminApi->ApiAdminUsersUserIdRolesGet");

            var localVarPath = "/api/admin/users/{userId}/roles";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("userId", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            // authentication (BearerAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiAdminUsersUserIdRolesGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<string>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<string>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<string>)));
        }

        /// <summary>
        /// List roles for a specific user Provides a list of roles assigned to the specified user.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">ID of the user to retrieve roles for.</param>
        /// <returns>Task of List&lt;string&gt;</returns>
        public async System.Threading.Tasks.Task<List<string>> ApiAdminUsersUserIdRolesGetAsync (int? userId)
        {
             ApiResponse<List<string>> localVarResponse = await ApiAdminUsersUserIdRolesGetAsyncWithHttpInfo(userId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List roles for a specific user Provides a list of roles assigned to the specified user.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">ID of the user to retrieve roles for.</param>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<string>>> ApiAdminUsersUserIdRolesGetAsyncWithHttpInfo (int? userId)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling AdminApi->ApiAdminUsersUserIdRolesGet");

            var localVarPath = "/api/admin/users/{userId}/roles";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("userId", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            // authentication (BearerAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiAdminUsersUserIdRolesGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<string>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<string>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<string>)));
        }

        /// <summary>
        /// Assign or update roles for a specific user Allows administrators to assign or modify roles for a given user.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">List of roles to be assigned to the user.</param>
        /// <param name="userId">ID of the user to assign or update roles.</param>
        /// <returns></returns>
        public void ApiAdminUsersUserIdRolesPut (List<string> body, int? userId)
        {
             ApiAdminUsersUserIdRolesPutWithHttpInfo(body, userId);
        }

        /// <summary>
        /// Assign or update roles for a specific user Allows administrators to assign or modify roles for a given user.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">List of roles to be assigned to the user.</param>
        /// <param name="userId">ID of the user to assign or update roles.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ApiAdminUsersUserIdRolesPutWithHttpInfo (List<string> body, int? userId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AdminApi->ApiAdminUsersUserIdRolesPut");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling AdminApi->ApiAdminUsersUserIdRolesPut");

            var localVarPath = "/api/admin/users/{userId}/roles";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("userId", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (BearerAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiAdminUsersUserIdRolesPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Assign or update roles for a specific user Allows administrators to assign or modify roles for a given user.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">List of roles to be assigned to the user.</param>
        /// <param name="userId">ID of the user to assign or update roles.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiAdminUsersUserIdRolesPutAsync (List<string> body, int? userId)
        {
             await ApiAdminUsersUserIdRolesPutAsyncWithHttpInfo(body, userId);

        }

        /// <summary>
        /// Assign or update roles for a specific user Allows administrators to assign or modify roles for a given user.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">List of roles to be assigned to the user.</param>
        /// <param name="userId">ID of the user to assign or update roles.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ApiAdminUsersUserIdRolesPutAsyncWithHttpInfo (List<string> body, int? userId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AdminApi->ApiAdminUsersUserIdRolesPut");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling AdminApi->ApiAdminUsersUserIdRolesPut");

            var localVarPath = "/api/admin/users/{userId}/roles";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("userId", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (BearerAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiAdminUsersUserIdRolesPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

    }
}
