/* 
 * E-commerce API
 *
 * API for E-commerce Platform
 *
 * OpenAPI spec version: 1.0.0
 * Contact: brandon.dunbar97@gmail.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface IProductsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Bulk update products
        /// </summary>
        /// <remarks>
        /// Allows for bulk updates to multiple products at once.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">A list of products with updated data.</param>
        /// <returns></returns>
        void ApiProductsBatchUpdatePut (List<ProductUpdate> body);

        /// <summary>
        /// Bulk update products
        /// </summary>
        /// <remarks>
        /// Allows for bulk updates to multiple products at once.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">A list of products with updated data.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiProductsBatchUpdatePutWithHttpInfo (List<ProductUpdate> body);
        /// <summary>
        /// Retrieve all product categories
        /// </summary>
        /// <remarks>
        /// Provides a list of all product categories available.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;Category&gt;</returns>
        List<Category> ApiProductsCategoriesGet ();

        /// <summary>
        /// Retrieve all product categories
        /// </summary>
        /// <remarks>
        /// Provides a list of all product categories available.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;Category&gt;</returns>
        ApiResponse<List<Category>> ApiProductsCategoriesGetWithHttpInfo ();
        /// <summary>
        /// Create a new product category
        /// </summary>
        /// <remarks>
        /// Allows administrators to add a new product category.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Category details</param>
        /// <returns></returns>
        void ApiProductsCategoriesPost (CategoryInput body);

        /// <summary>
        /// Create a new product category
        /// </summary>
        /// <remarks>
        /// Allows administrators to add a new product category.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Category details</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiProductsCategoriesPostWithHttpInfo (CategoryInput body);
        /// <summary>
        /// List all products
        /// </summary>
        /// <remarks>
        /// Returns a list of all products. Supports pagination, filtering, and sorting.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number for pagination. (optional)</param>
        /// <param name="limit">Number of products per page for pagination. (optional)</param>
        /// <param name="sort">Sorting criteria (e.g., \&quot;price_asc\&quot;, \&quot;name_desc\&quot;). (optional)</param>
        /// <returns>List&lt;Product&gt;</returns>
        List<Product> ApiProductsGet (int? page = null, int? limit = null, string sort = null);

        /// <summary>
        /// List all products
        /// </summary>
        /// <remarks>
        /// Returns a list of all products. Supports pagination, filtering, and sorting.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number for pagination. (optional)</param>
        /// <param name="limit">Number of products per page for pagination. (optional)</param>
        /// <param name="sort">Sorting criteria (e.g., \&quot;price_asc\&quot;, \&quot;name_desc\&quot;). (optional)</param>
        /// <returns>ApiResponse of List&lt;Product&gt;</returns>
        ApiResponse<List<Product>> ApiProductsGetWithHttpInfo (int? page = null, int? limit = null, string sort = null);
        /// <summary>
        /// Add a new product
        /// </summary>
        /// <remarks>
        /// Creates a new product based on the provided data and returns the details of the newly added product.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Product data</param>
        /// <returns>Product</returns>
        Product ApiProductsPost (Product body);

        /// <summary>
        /// Add a new product
        /// </summary>
        /// <remarks>
        /// Creates a new product based on the provided data and returns the details of the newly added product.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Product data</param>
        /// <returns>ApiResponse of Product</returns>
        ApiResponse<Product> ApiProductsPostWithHttpInfo (Product body);
        /// <summary>
        /// Retrieve details of a specific product
        /// </summary>
        /// <remarks>
        /// Returns the detailed information of a product identified by the provided product ID.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">ID of the product to retrieve</param>
        /// <returns>Product</returns>
        Product ApiProductsProductIdGet (int? productId);

        /// <summary>
        /// Retrieve details of a specific product
        /// </summary>
        /// <remarks>
        /// Returns the detailed information of a product identified by the provided product ID.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">ID of the product to retrieve</param>
        /// <returns>ApiResponse of Product</returns>
        ApiResponse<Product> ApiProductsProductIdGetWithHttpInfo (int? productId);
        /// <summary>
        /// Delete a specific image for a product
        /// </summary>
        /// <remarks>
        /// Allows administrators or authorized users to delete an image associated with the given product.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">ID of the product to delete an image for.</param>
        /// <param name="imageId">ID or identifier of the image to be deleted.</param>
        /// <returns></returns>
        void ApiProductsProductIdImagesDelete (int? productId, string imageId);

        /// <summary>
        /// Delete a specific image for a product
        /// </summary>
        /// <remarks>
        /// Allows administrators or authorized users to delete an image associated with the given product.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">ID of the product to delete an image for.</param>
        /// <param name="imageId">ID or identifier of the image to be deleted.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiProductsProductIdImagesDeleteWithHttpInfo (int? productId, string imageId);
        /// <summary>
        /// Retrieve images for a specific product
        /// </summary>
        /// <remarks>
        /// Provides a list of image URLs or metadata associated with the given product.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">ID of the product to retrieve images for.</param>
        /// <returns>List&lt;ProductImage&gt;</returns>
        List<ProductImage> ApiProductsProductIdImagesGet (int? productId);

        /// <summary>
        /// Retrieve images for a specific product
        /// </summary>
        /// <remarks>
        /// Provides a list of image URLs or metadata associated with the given product.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">ID of the product to retrieve images for.</param>
        /// <returns>ApiResponse of List&lt;ProductImage&gt;</returns>
        ApiResponse<List<ProductImage>> ApiProductsProductIdImagesGetWithHttpInfo (int? productId);
        /// <summary>
        /// Upload a new image for a specific product
        /// </summary>
        /// <remarks>
        /// Allows administrators or authorized users to upload a new image for the given product.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Image to be uploaded</param>
        /// <param name="productId">ID of the product to upload an image for.</param>
        /// <returns></returns>
        void ApiProductsProductIdImagesPost (Object body, int? productId);

        /// <summary>
        /// Upload a new image for a specific product
        /// </summary>
        /// <remarks>
        /// Allows administrators or authorized users to upload a new image for the given product.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Image to be uploaded</param>
        /// <param name="productId">ID of the product to upload an image for.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiProductsProductIdImagesPostWithHttpInfo (Object body, int? productId);
        /// <summary>
        /// Retrieve inventory data for a specific product
        /// </summary>
        /// <remarks>
        /// Provides current stock levels and inventory status for the given product.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">ID of the product to retrieve inventory data for.</param>
        /// <returns>ProductInventory</returns>
        ProductInventory ApiProductsProductIdInventoryGet (int? productId);

        /// <summary>
        /// Retrieve inventory data for a specific product
        /// </summary>
        /// <remarks>
        /// Provides current stock levels and inventory status for the given product.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">ID of the product to retrieve inventory data for.</param>
        /// <returns>ApiResponse of ProductInventory</returns>
        ApiResponse<ProductInventory> ApiProductsProductIdInventoryGetWithHttpInfo (int? productId);
        /// <summary>
        /// Update inventory data for a specific product
        /// </summary>
        /// <remarks>
        /// Allows administrators or authorized users to update stock levels and inventory status for the given product.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Updated inventory data</param>
        /// <param name="productId">ID of the product to update inventory data for.</param>
        /// <returns></returns>
        void ApiProductsProductIdInventoryPut (ProductInventoryUpdate body, int? productId);

        /// <summary>
        /// Update inventory data for a specific product
        /// </summary>
        /// <remarks>
        /// Allows administrators or authorized users to update stock levels and inventory status for the given product.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Updated inventory data</param>
        /// <param name="productId">ID of the product to update inventory data for.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiProductsProductIdInventoryPutWithHttpInfo (ProductInventoryUpdate body, int? productId);
        /// <summary>
        /// Retrieve price history for a specific product
        /// </summary>
        /// <remarks>
        /// Provides a chronological list of price changes for the given product.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">ID of the product to retrieve price history for.</param>
        /// <returns>List&lt;ProductPriceHistoryItem&gt;</returns>
        List<ProductPriceHistoryItem> ApiProductsProductIdPriceHistoryGet (int? productId);

        /// <summary>
        /// Retrieve price history for a specific product
        /// </summary>
        /// <remarks>
        /// Provides a chronological list of price changes for the given product.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">ID of the product to retrieve price history for.</param>
        /// <returns>ApiResponse of List&lt;ProductPriceHistoryItem&gt;</returns>
        ApiResponse<List<ProductPriceHistoryItem>> ApiProductsProductIdPriceHistoryGetWithHttpInfo (int? productId);
        /// <summary>
        /// Retrieve promotions for a specific product
        /// </summary>
        /// <remarks>
        /// Provides a list of active and past promotions associated with the given product.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">ID of the product to retrieve promotions for.</param>
        /// <returns>List&lt;ProductPromotion&gt;</returns>
        List<ProductPromotion> ApiProductsProductIdPromotionsGet (int? productId);

        /// <summary>
        /// Retrieve promotions for a specific product
        /// </summary>
        /// <remarks>
        /// Provides a list of active and past promotions associated with the given product.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">ID of the product to retrieve promotions for.</param>
        /// <returns>ApiResponse of List&lt;ProductPromotion&gt;</returns>
        ApiResponse<List<ProductPromotion>> ApiProductsProductIdPromotionsGetWithHttpInfo (int? productId);
        /// <summary>
        /// Retrieve products related to a specific product
        /// </summary>
        /// <remarks>
        /// Provides a list of products that are related to the given product.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">ID of the product to retrieve related products for.</param>
        /// <param name="limit">Limit the number of related products returned (default is 5). (optional, default to 5)</param>
        /// <returns>List&lt;Product&gt;</returns>
        List<Product> ApiProductsProductIdRelatedGet (int? productId, int? limit = null);

        /// <summary>
        /// Retrieve products related to a specific product
        /// </summary>
        /// <remarks>
        /// Provides a list of products that are related to the given product.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">ID of the product to retrieve related products for.</param>
        /// <param name="limit">Limit the number of related products returned (default is 5). (optional, default to 5)</param>
        /// <returns>ApiResponse of List&lt;Product&gt;</returns>
        ApiResponse<List<Product>> ApiProductsProductIdRelatedGetWithHttpInfo (int? productId, int? limit = null);
        /// <summary>
        /// Retrieve reviews for a specific product
        /// </summary>
        /// <remarks>
        /// Provides a list of reviews for the given product.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">ID of the product to retrieve reviews for.</param>
        /// <returns>List&lt;Review&gt;</returns>
        List<Review> ApiProductsProductIdReviewsGet (int? productId);

        /// <summary>
        /// Retrieve reviews for a specific product
        /// </summary>
        /// <remarks>
        /// Provides a list of reviews for the given product.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">ID of the product to retrieve reviews for.</param>
        /// <returns>ApiResponse of List&lt;Review&gt;</returns>
        ApiResponse<List<Review>> ApiProductsProductIdReviewsGetWithHttpInfo (int? productId);
        /// <summary>
        /// Add a review for a specific product
        /// </summary>
        /// <remarks>
        /// Allows authenticated users to submit a review for the given product.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Review details</param>
        /// <param name="productId">ID of the product to review.</param>
        /// <returns></returns>
        void ApiProductsProductIdReviewsPost (ReviewInput body, int? productId);

        /// <summary>
        /// Add a review for a specific product
        /// </summary>
        /// <remarks>
        /// Allows authenticated users to submit a review for the given product.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Review details</param>
        /// <param name="productId">ID of the product to review.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiProductsProductIdReviewsPostWithHttpInfo (ReviewInput body, int? productId);
        /// <summary>
        /// Retrieve product recommendations for the user
        /// </summary>
        /// <remarks>
        /// Provides a list of recommended products based on user behavior, popular products, or other algorithms.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Limit the number of recommended products returned (default is 10). (optional, default to 10)</param>
        /// <returns>List&lt;Product&gt;</returns>
        List<Product> ApiProductsRecommendationsGet (int? limit = null);

        /// <summary>
        /// Retrieve product recommendations for the user
        /// </summary>
        /// <remarks>
        /// Provides a list of recommended products based on user behavior, popular products, or other algorithms.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Limit the number of recommended products returned (default is 10). (optional, default to 10)</param>
        /// <returns>ApiResponse of List&lt;Product&gt;</returns>
        ApiResponse<List<Product>> ApiProductsRecommendationsGetWithHttpInfo (int? limit = null);
        /// <summary>
        /// Search for products
        /// </summary>
        /// <remarks>
        /// Allows users to search for products based on keywords, categories, price range, and other criteria.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyword">Search term or keyword. (optional)</param>
        /// <param name="categoryId">ID of the product category to filter by. (optional)</param>
        /// <param name="minPrice">Minimum price for filtering. (optional)</param>
        /// <param name="maxPrice">Maximum price for filtering. (optional)</param>
        /// <param name="sortBy">Sort the results by date, price, or rating. (optional)</param>
        /// <param name="sortOrder">Order of sorting (ascending or descending). (optional)</param>
        /// <returns>List&lt;Product&gt;</returns>
        List<Product> ApiProductsSearchGet (string keyword = null, int? categoryId = null, float? minPrice = null, float? maxPrice = null, string sortBy = null, string sortOrder = null);

        /// <summary>
        /// Search for products
        /// </summary>
        /// <remarks>
        /// Allows users to search for products based on keywords, categories, price range, and other criteria.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyword">Search term or keyword. (optional)</param>
        /// <param name="categoryId">ID of the product category to filter by. (optional)</param>
        /// <param name="minPrice">Minimum price for filtering. (optional)</param>
        /// <param name="maxPrice">Maximum price for filtering. (optional)</param>
        /// <param name="sortBy">Sort the results by date, price, or rating. (optional)</param>
        /// <param name="sortOrder">Order of sorting (ascending or descending). (optional)</param>
        /// <returns>ApiResponse of List&lt;Product&gt;</returns>
        ApiResponse<List<Product>> ApiProductsSearchGetWithHttpInfo (string keyword = null, int? categoryId = null, float? minPrice = null, float? maxPrice = null, string sortBy = null, string sortOrder = null);
        /// <summary>
        /// List all product tags
        /// </summary>
        /// <remarks>
        /// Provides a list of all tags associated with products.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;string&gt;</returns>
        List<string> ApiProductsTagsGet ();

        /// <summary>
        /// List all product tags
        /// </summary>
        /// <remarks>
        /// Provides a list of all tags associated with products.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        ApiResponse<List<string>> ApiProductsTagsGetWithHttpInfo ();
        /// <summary>
        /// Add new product tags
        /// </summary>
        /// <remarks>
        /// Allows administrators or authorized users to add new tags for products.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">A list of tags to be added.</param>
        /// <returns></returns>
        void ApiProductsTagsPost (List<string> body);

        /// <summary>
        /// Add new product tags
        /// </summary>
        /// <remarks>
        /// Allows administrators or authorized users to add new tags for products.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">A list of tags to be added.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiProductsTagsPostWithHttpInfo (List<string> body);
        /// <summary>
        /// Retrieve top-rated products
        /// </summary>
        /// <remarks>
        /// Provides a list of products with the highest average ratings.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Limit the number of top-rated products returned (default is 10). (optional, default to 10)</param>
        /// <param name="minReviewsCount">Minimum number of reviews a product should have to be considered in top-rated (optional filter). (optional)</param>
        /// <returns>List&lt;Product&gt;</returns>
        List<Product> ApiProductsTopRatedGet (int? limit = null, int? minReviewsCount = null);

        /// <summary>
        /// Retrieve top-rated products
        /// </summary>
        /// <remarks>
        /// Provides a list of products with the highest average ratings.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Limit the number of top-rated products returned (default is 10). (optional, default to 10)</param>
        /// <param name="minReviewsCount">Minimum number of reviews a product should have to be considered in top-rated (optional filter). (optional)</param>
        /// <returns>ApiResponse of List&lt;Product&gt;</returns>
        ApiResponse<List<Product>> ApiProductsTopRatedGetWithHttpInfo (int? limit = null, int? minReviewsCount = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Bulk update products
        /// </summary>
        /// <remarks>
        /// Allows for bulk updates to multiple products at once.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">A list of products with updated data.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiProductsBatchUpdatePutAsync (List<ProductUpdate> body);

        /// <summary>
        /// Bulk update products
        /// </summary>
        /// <remarks>
        /// Allows for bulk updates to multiple products at once.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">A list of products with updated data.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiProductsBatchUpdatePutAsyncWithHttpInfo (List<ProductUpdate> body);
        /// <summary>
        /// Retrieve all product categories
        /// </summary>
        /// <remarks>
        /// Provides a list of all product categories available.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;Category&gt;</returns>
        System.Threading.Tasks.Task<List<Category>> ApiProductsCategoriesGetAsync ();

        /// <summary>
        /// Retrieve all product categories
        /// </summary>
        /// <remarks>
        /// Provides a list of all product categories available.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;Category&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Category>>> ApiProductsCategoriesGetAsyncWithHttpInfo ();
        /// <summary>
        /// Create a new product category
        /// </summary>
        /// <remarks>
        /// Allows administrators to add a new product category.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Category details</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiProductsCategoriesPostAsync (CategoryInput body);

        /// <summary>
        /// Create a new product category
        /// </summary>
        /// <remarks>
        /// Allows administrators to add a new product category.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Category details</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiProductsCategoriesPostAsyncWithHttpInfo (CategoryInput body);
        /// <summary>
        /// List all products
        /// </summary>
        /// <remarks>
        /// Returns a list of all products. Supports pagination, filtering, and sorting.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number for pagination. (optional)</param>
        /// <param name="limit">Number of products per page for pagination. (optional)</param>
        /// <param name="sort">Sorting criteria (e.g., \&quot;price_asc\&quot;, \&quot;name_desc\&quot;). (optional)</param>
        /// <returns>Task of List&lt;Product&gt;</returns>
        System.Threading.Tasks.Task<List<Product>> ApiProductsGetAsync (int? page = null, int? limit = null, string sort = null);

        /// <summary>
        /// List all products
        /// </summary>
        /// <remarks>
        /// Returns a list of all products. Supports pagination, filtering, and sorting.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number for pagination. (optional)</param>
        /// <param name="limit">Number of products per page for pagination. (optional)</param>
        /// <param name="sort">Sorting criteria (e.g., \&quot;price_asc\&quot;, \&quot;name_desc\&quot;). (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Product&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Product>>> ApiProductsGetAsyncWithHttpInfo (int? page = null, int? limit = null, string sort = null);
        /// <summary>
        /// Add a new product
        /// </summary>
        /// <remarks>
        /// Creates a new product based on the provided data and returns the details of the newly added product.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Product data</param>
        /// <returns>Task of Product</returns>
        System.Threading.Tasks.Task<Product> ApiProductsPostAsync (Product body);

        /// <summary>
        /// Add a new product
        /// </summary>
        /// <remarks>
        /// Creates a new product based on the provided data and returns the details of the newly added product.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Product data</param>
        /// <returns>Task of ApiResponse (Product)</returns>
        System.Threading.Tasks.Task<ApiResponse<Product>> ApiProductsPostAsyncWithHttpInfo (Product body);
        /// <summary>
        /// Retrieve details of a specific product
        /// </summary>
        /// <remarks>
        /// Returns the detailed information of a product identified by the provided product ID.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">ID of the product to retrieve</param>
        /// <returns>Task of Product</returns>
        System.Threading.Tasks.Task<Product> ApiProductsProductIdGetAsync (int? productId);

        /// <summary>
        /// Retrieve details of a specific product
        /// </summary>
        /// <remarks>
        /// Returns the detailed information of a product identified by the provided product ID.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">ID of the product to retrieve</param>
        /// <returns>Task of ApiResponse (Product)</returns>
        System.Threading.Tasks.Task<ApiResponse<Product>> ApiProductsProductIdGetAsyncWithHttpInfo (int? productId);
        /// <summary>
        /// Delete a specific image for a product
        /// </summary>
        /// <remarks>
        /// Allows administrators or authorized users to delete an image associated with the given product.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">ID of the product to delete an image for.</param>
        /// <param name="imageId">ID or identifier of the image to be deleted.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiProductsProductIdImagesDeleteAsync (int? productId, string imageId);

        /// <summary>
        /// Delete a specific image for a product
        /// </summary>
        /// <remarks>
        /// Allows administrators or authorized users to delete an image associated with the given product.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">ID of the product to delete an image for.</param>
        /// <param name="imageId">ID or identifier of the image to be deleted.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiProductsProductIdImagesDeleteAsyncWithHttpInfo (int? productId, string imageId);
        /// <summary>
        /// Retrieve images for a specific product
        /// </summary>
        /// <remarks>
        /// Provides a list of image URLs or metadata associated with the given product.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">ID of the product to retrieve images for.</param>
        /// <returns>Task of List&lt;ProductImage&gt;</returns>
        System.Threading.Tasks.Task<List<ProductImage>> ApiProductsProductIdImagesGetAsync (int? productId);

        /// <summary>
        /// Retrieve images for a specific product
        /// </summary>
        /// <remarks>
        /// Provides a list of image URLs or metadata associated with the given product.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">ID of the product to retrieve images for.</param>
        /// <returns>Task of ApiResponse (List&lt;ProductImage&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ProductImage>>> ApiProductsProductIdImagesGetAsyncWithHttpInfo (int? productId);
        /// <summary>
        /// Upload a new image for a specific product
        /// </summary>
        /// <remarks>
        /// Allows administrators or authorized users to upload a new image for the given product.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Image to be uploaded</param>
        /// <param name="productId">ID of the product to upload an image for.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiProductsProductIdImagesPostAsync (Object body, int? productId);

        /// <summary>
        /// Upload a new image for a specific product
        /// </summary>
        /// <remarks>
        /// Allows administrators or authorized users to upload a new image for the given product.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Image to be uploaded</param>
        /// <param name="productId">ID of the product to upload an image for.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiProductsProductIdImagesPostAsyncWithHttpInfo (Object body, int? productId);
        /// <summary>
        /// Retrieve inventory data for a specific product
        /// </summary>
        /// <remarks>
        /// Provides current stock levels and inventory status for the given product.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">ID of the product to retrieve inventory data for.</param>
        /// <returns>Task of ProductInventory</returns>
        System.Threading.Tasks.Task<ProductInventory> ApiProductsProductIdInventoryGetAsync (int? productId);

        /// <summary>
        /// Retrieve inventory data for a specific product
        /// </summary>
        /// <remarks>
        /// Provides current stock levels and inventory status for the given product.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">ID of the product to retrieve inventory data for.</param>
        /// <returns>Task of ApiResponse (ProductInventory)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProductInventory>> ApiProductsProductIdInventoryGetAsyncWithHttpInfo (int? productId);
        /// <summary>
        /// Update inventory data for a specific product
        /// </summary>
        /// <remarks>
        /// Allows administrators or authorized users to update stock levels and inventory status for the given product.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Updated inventory data</param>
        /// <param name="productId">ID of the product to update inventory data for.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiProductsProductIdInventoryPutAsync (ProductInventoryUpdate body, int? productId);

        /// <summary>
        /// Update inventory data for a specific product
        /// </summary>
        /// <remarks>
        /// Allows administrators or authorized users to update stock levels and inventory status for the given product.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Updated inventory data</param>
        /// <param name="productId">ID of the product to update inventory data for.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiProductsProductIdInventoryPutAsyncWithHttpInfo (ProductInventoryUpdate body, int? productId);
        /// <summary>
        /// Retrieve price history for a specific product
        /// </summary>
        /// <remarks>
        /// Provides a chronological list of price changes for the given product.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">ID of the product to retrieve price history for.</param>
        /// <returns>Task of List&lt;ProductPriceHistoryItem&gt;</returns>
        System.Threading.Tasks.Task<List<ProductPriceHistoryItem>> ApiProductsProductIdPriceHistoryGetAsync (int? productId);

        /// <summary>
        /// Retrieve price history for a specific product
        /// </summary>
        /// <remarks>
        /// Provides a chronological list of price changes for the given product.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">ID of the product to retrieve price history for.</param>
        /// <returns>Task of ApiResponse (List&lt;ProductPriceHistoryItem&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ProductPriceHistoryItem>>> ApiProductsProductIdPriceHistoryGetAsyncWithHttpInfo (int? productId);
        /// <summary>
        /// Retrieve promotions for a specific product
        /// </summary>
        /// <remarks>
        /// Provides a list of active and past promotions associated with the given product.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">ID of the product to retrieve promotions for.</param>
        /// <returns>Task of List&lt;ProductPromotion&gt;</returns>
        System.Threading.Tasks.Task<List<ProductPromotion>> ApiProductsProductIdPromotionsGetAsync (int? productId);

        /// <summary>
        /// Retrieve promotions for a specific product
        /// </summary>
        /// <remarks>
        /// Provides a list of active and past promotions associated with the given product.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">ID of the product to retrieve promotions for.</param>
        /// <returns>Task of ApiResponse (List&lt;ProductPromotion&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ProductPromotion>>> ApiProductsProductIdPromotionsGetAsyncWithHttpInfo (int? productId);
        /// <summary>
        /// Retrieve products related to a specific product
        /// </summary>
        /// <remarks>
        /// Provides a list of products that are related to the given product.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">ID of the product to retrieve related products for.</param>
        /// <param name="limit">Limit the number of related products returned (default is 5). (optional, default to 5)</param>
        /// <returns>Task of List&lt;Product&gt;</returns>
        System.Threading.Tasks.Task<List<Product>> ApiProductsProductIdRelatedGetAsync (int? productId, int? limit = null);

        /// <summary>
        /// Retrieve products related to a specific product
        /// </summary>
        /// <remarks>
        /// Provides a list of products that are related to the given product.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">ID of the product to retrieve related products for.</param>
        /// <param name="limit">Limit the number of related products returned (default is 5). (optional, default to 5)</param>
        /// <returns>Task of ApiResponse (List&lt;Product&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Product>>> ApiProductsProductIdRelatedGetAsyncWithHttpInfo (int? productId, int? limit = null);
        /// <summary>
        /// Retrieve reviews for a specific product
        /// </summary>
        /// <remarks>
        /// Provides a list of reviews for the given product.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">ID of the product to retrieve reviews for.</param>
        /// <returns>Task of List&lt;Review&gt;</returns>
        System.Threading.Tasks.Task<List<Review>> ApiProductsProductIdReviewsGetAsync (int? productId);

        /// <summary>
        /// Retrieve reviews for a specific product
        /// </summary>
        /// <remarks>
        /// Provides a list of reviews for the given product.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">ID of the product to retrieve reviews for.</param>
        /// <returns>Task of ApiResponse (List&lt;Review&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Review>>> ApiProductsProductIdReviewsGetAsyncWithHttpInfo (int? productId);
        /// <summary>
        /// Add a review for a specific product
        /// </summary>
        /// <remarks>
        /// Allows authenticated users to submit a review for the given product.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Review details</param>
        /// <param name="productId">ID of the product to review.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiProductsProductIdReviewsPostAsync (ReviewInput body, int? productId);

        /// <summary>
        /// Add a review for a specific product
        /// </summary>
        /// <remarks>
        /// Allows authenticated users to submit a review for the given product.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Review details</param>
        /// <param name="productId">ID of the product to review.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiProductsProductIdReviewsPostAsyncWithHttpInfo (ReviewInput body, int? productId);
        /// <summary>
        /// Retrieve product recommendations for the user
        /// </summary>
        /// <remarks>
        /// Provides a list of recommended products based on user behavior, popular products, or other algorithms.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Limit the number of recommended products returned (default is 10). (optional, default to 10)</param>
        /// <returns>Task of List&lt;Product&gt;</returns>
        System.Threading.Tasks.Task<List<Product>> ApiProductsRecommendationsGetAsync (int? limit = null);

        /// <summary>
        /// Retrieve product recommendations for the user
        /// </summary>
        /// <remarks>
        /// Provides a list of recommended products based on user behavior, popular products, or other algorithms.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Limit the number of recommended products returned (default is 10). (optional, default to 10)</param>
        /// <returns>Task of ApiResponse (List&lt;Product&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Product>>> ApiProductsRecommendationsGetAsyncWithHttpInfo (int? limit = null);
        /// <summary>
        /// Search for products
        /// </summary>
        /// <remarks>
        /// Allows users to search for products based on keywords, categories, price range, and other criteria.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyword">Search term or keyword. (optional)</param>
        /// <param name="categoryId">ID of the product category to filter by. (optional)</param>
        /// <param name="minPrice">Minimum price for filtering. (optional)</param>
        /// <param name="maxPrice">Maximum price for filtering. (optional)</param>
        /// <param name="sortBy">Sort the results by date, price, or rating. (optional)</param>
        /// <param name="sortOrder">Order of sorting (ascending or descending). (optional)</param>
        /// <returns>Task of List&lt;Product&gt;</returns>
        System.Threading.Tasks.Task<List<Product>> ApiProductsSearchGetAsync (string keyword = null, int? categoryId = null, float? minPrice = null, float? maxPrice = null, string sortBy = null, string sortOrder = null);

        /// <summary>
        /// Search for products
        /// </summary>
        /// <remarks>
        /// Allows users to search for products based on keywords, categories, price range, and other criteria.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyword">Search term or keyword. (optional)</param>
        /// <param name="categoryId">ID of the product category to filter by. (optional)</param>
        /// <param name="minPrice">Minimum price for filtering. (optional)</param>
        /// <param name="maxPrice">Maximum price for filtering. (optional)</param>
        /// <param name="sortBy">Sort the results by date, price, or rating. (optional)</param>
        /// <param name="sortOrder">Order of sorting (ascending or descending). (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Product&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Product>>> ApiProductsSearchGetAsyncWithHttpInfo (string keyword = null, int? categoryId = null, float? minPrice = null, float? maxPrice = null, string sortBy = null, string sortOrder = null);
        /// <summary>
        /// List all product tags
        /// </summary>
        /// <remarks>
        /// Provides a list of all tags associated with products.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;string&gt;</returns>
        System.Threading.Tasks.Task<List<string>> ApiProductsTagsGetAsync ();

        /// <summary>
        /// List all product tags
        /// </summary>
        /// <remarks>
        /// Provides a list of all tags associated with products.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<string>>> ApiProductsTagsGetAsyncWithHttpInfo ();
        /// <summary>
        /// Add new product tags
        /// </summary>
        /// <remarks>
        /// Allows administrators or authorized users to add new tags for products.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">A list of tags to be added.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiProductsTagsPostAsync (List<string> body);

        /// <summary>
        /// Add new product tags
        /// </summary>
        /// <remarks>
        /// Allows administrators or authorized users to add new tags for products.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">A list of tags to be added.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiProductsTagsPostAsyncWithHttpInfo (List<string> body);
        /// <summary>
        /// Retrieve top-rated products
        /// </summary>
        /// <remarks>
        /// Provides a list of products with the highest average ratings.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Limit the number of top-rated products returned (default is 10). (optional, default to 10)</param>
        /// <param name="minReviewsCount">Minimum number of reviews a product should have to be considered in top-rated (optional filter). (optional)</param>
        /// <returns>Task of List&lt;Product&gt;</returns>
        System.Threading.Tasks.Task<List<Product>> ApiProductsTopRatedGetAsync (int? limit = null, int? minReviewsCount = null);

        /// <summary>
        /// Retrieve top-rated products
        /// </summary>
        /// <remarks>
        /// Provides a list of products with the highest average ratings.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Limit the number of top-rated products returned (default is 10). (optional, default to 10)</param>
        /// <param name="minReviewsCount">Minimum number of reviews a product should have to be considered in top-rated (optional filter). (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Product&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Product>>> ApiProductsTopRatedGetAsyncWithHttpInfo (int? limit = null, int? minReviewsCount = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class ProductsApi : IProductsApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ProductsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ProductsApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ProductsApi"/> class
        /// </summary>
        /// <returns></returns>
        public ProductsApi()
        {
            this.Configuration = IO.Swagger.Client.Configuration.Default;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ProductsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ProductsApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Bulk update products Allows for bulk updates to multiple products at once.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">A list of products with updated data.</param>
        /// <returns></returns>
        public void ApiProductsBatchUpdatePut (List<ProductUpdate> body)
        {
             ApiProductsBatchUpdatePutWithHttpInfo(body);
        }

        /// <summary>
        /// Bulk update products Allows for bulk updates to multiple products at once.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">A list of products with updated data.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ApiProductsBatchUpdatePutWithHttpInfo (List<ProductUpdate> body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ProductsApi->ApiProductsBatchUpdatePut");

            var localVarPath = "/api/products/batch-update";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (BearerAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiProductsBatchUpdatePut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Bulk update products Allows for bulk updates to multiple products at once.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">A list of products with updated data.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiProductsBatchUpdatePutAsync (List<ProductUpdate> body)
        {
             await ApiProductsBatchUpdatePutAsyncWithHttpInfo(body);

        }

        /// <summary>
        /// Bulk update products Allows for bulk updates to multiple products at once.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">A list of products with updated data.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ApiProductsBatchUpdatePutAsyncWithHttpInfo (List<ProductUpdate> body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ProductsApi->ApiProductsBatchUpdatePut");

            var localVarPath = "/api/products/batch-update";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (BearerAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiProductsBatchUpdatePut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Retrieve all product categories Provides a list of all product categories available.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;Category&gt;</returns>
        public List<Category> ApiProductsCategoriesGet ()
        {
             ApiResponse<List<Category>> localVarResponse = ApiProductsCategoriesGetWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve all product categories Provides a list of all product categories available.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;Category&gt;</returns>
        public ApiResponse< List<Category> > ApiProductsCategoriesGetWithHttpInfo ()
        {

            var localVarPath = "/api/products/categories";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (BearerAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiProductsCategoriesGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Category>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Category>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Category>)));
        }

        /// <summary>
        /// Retrieve all product categories Provides a list of all product categories available.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;Category&gt;</returns>
        public async System.Threading.Tasks.Task<List<Category>> ApiProductsCategoriesGetAsync ()
        {
             ApiResponse<List<Category>> localVarResponse = await ApiProductsCategoriesGetAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve all product categories Provides a list of all product categories available.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;Category&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Category>>> ApiProductsCategoriesGetAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/products/categories";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (BearerAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiProductsCategoriesGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Category>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Category>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Category>)));
        }

        /// <summary>
        /// Create a new product category Allows administrators to add a new product category.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Category details</param>
        /// <returns></returns>
        public void ApiProductsCategoriesPost (CategoryInput body)
        {
             ApiProductsCategoriesPostWithHttpInfo(body);
        }

        /// <summary>
        /// Create a new product category Allows administrators to add a new product category.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Category details</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ApiProductsCategoriesPostWithHttpInfo (CategoryInput body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ProductsApi->ApiProductsCategoriesPost");

            var localVarPath = "/api/products/categories";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (BearerAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiProductsCategoriesPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Create a new product category Allows administrators to add a new product category.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Category details</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiProductsCategoriesPostAsync (CategoryInput body)
        {
             await ApiProductsCategoriesPostAsyncWithHttpInfo(body);

        }

        /// <summary>
        /// Create a new product category Allows administrators to add a new product category.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Category details</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ApiProductsCategoriesPostAsyncWithHttpInfo (CategoryInput body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ProductsApi->ApiProductsCategoriesPost");

            var localVarPath = "/api/products/categories";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (BearerAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiProductsCategoriesPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// List all products Returns a list of all products. Supports pagination, filtering, and sorting.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number for pagination. (optional)</param>
        /// <param name="limit">Number of products per page for pagination. (optional)</param>
        /// <param name="sort">Sorting criteria (e.g., \&quot;price_asc\&quot;, \&quot;name_desc\&quot;). (optional)</param>
        /// <returns>List&lt;Product&gt;</returns>
        public List<Product> ApiProductsGet (int? page = null, int? limit = null, string sort = null)
        {
             ApiResponse<List<Product>> localVarResponse = ApiProductsGetWithHttpInfo(page, limit, sort);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List all products Returns a list of all products. Supports pagination, filtering, and sorting.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number for pagination. (optional)</param>
        /// <param name="limit">Number of products per page for pagination. (optional)</param>
        /// <param name="sort">Sorting criteria (e.g., \&quot;price_asc\&quot;, \&quot;name_desc\&quot;). (optional)</param>
        /// <returns>ApiResponse of List&lt;Product&gt;</returns>
        public ApiResponse< List<Product> > ApiProductsGetWithHttpInfo (int? page = null, int? limit = null, string sort = null)
        {

            var localVarPath = "/api/products";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter
            // authentication (BearerAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiProductsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Product>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Product>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Product>)));
        }

        /// <summary>
        /// List all products Returns a list of all products. Supports pagination, filtering, and sorting.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number for pagination. (optional)</param>
        /// <param name="limit">Number of products per page for pagination. (optional)</param>
        /// <param name="sort">Sorting criteria (e.g., \&quot;price_asc\&quot;, \&quot;name_desc\&quot;). (optional)</param>
        /// <returns>Task of List&lt;Product&gt;</returns>
        public async System.Threading.Tasks.Task<List<Product>> ApiProductsGetAsync (int? page = null, int? limit = null, string sort = null)
        {
             ApiResponse<List<Product>> localVarResponse = await ApiProductsGetAsyncWithHttpInfo(page, limit, sort);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List all products Returns a list of all products. Supports pagination, filtering, and sorting.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number for pagination. (optional)</param>
        /// <param name="limit">Number of products per page for pagination. (optional)</param>
        /// <param name="sort">Sorting criteria (e.g., \&quot;price_asc\&quot;, \&quot;name_desc\&quot;). (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Product&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Product>>> ApiProductsGetAsyncWithHttpInfo (int? page = null, int? limit = null, string sort = null)
        {

            var localVarPath = "/api/products";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter
            // authentication (BearerAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiProductsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Product>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Product>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Product>)));
        }

        /// <summary>
        /// Add a new product Creates a new product based on the provided data and returns the details of the newly added product.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Product data</param>
        /// <returns>Product</returns>
        public Product ApiProductsPost (Product body)
        {
             ApiResponse<Product> localVarResponse = ApiProductsPostWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add a new product Creates a new product based on the provided data and returns the details of the newly added product.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Product data</param>
        /// <returns>ApiResponse of Product</returns>
        public ApiResponse< Product > ApiProductsPostWithHttpInfo (Product body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ProductsApi->ApiProductsPost");

            var localVarPath = "/api/products";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (BearerAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiProductsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Product>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Product) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Product)));
        }

        /// <summary>
        /// Add a new product Creates a new product based on the provided data and returns the details of the newly added product.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Product data</param>
        /// <returns>Task of Product</returns>
        public async System.Threading.Tasks.Task<Product> ApiProductsPostAsync (Product body)
        {
             ApiResponse<Product> localVarResponse = await ApiProductsPostAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add a new product Creates a new product based on the provided data and returns the details of the newly added product.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Product data</param>
        /// <returns>Task of ApiResponse (Product)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Product>> ApiProductsPostAsyncWithHttpInfo (Product body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ProductsApi->ApiProductsPost");

            var localVarPath = "/api/products";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (BearerAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiProductsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Product>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Product) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Product)));
        }

        /// <summary>
        /// Retrieve details of a specific product Returns the detailed information of a product identified by the provided product ID.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">ID of the product to retrieve</param>
        /// <returns>Product</returns>
        public Product ApiProductsProductIdGet (int? productId)
        {
             ApiResponse<Product> localVarResponse = ApiProductsProductIdGetWithHttpInfo(productId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve details of a specific product Returns the detailed information of a product identified by the provided product ID.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">ID of the product to retrieve</param>
        /// <returns>ApiResponse of Product</returns>
        public ApiResponse< Product > ApiProductsProductIdGetWithHttpInfo (int? productId)
        {
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling ProductsApi->ApiProductsProductIdGet");

            var localVarPath = "/api/products/{productId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (productId != null) localVarPathParams.Add("productId", this.Configuration.ApiClient.ParameterToString(productId)); // path parameter
            // authentication (BearerAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiProductsProductIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Product>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Product) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Product)));
        }

        /// <summary>
        /// Retrieve details of a specific product Returns the detailed information of a product identified by the provided product ID.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">ID of the product to retrieve</param>
        /// <returns>Task of Product</returns>
        public async System.Threading.Tasks.Task<Product> ApiProductsProductIdGetAsync (int? productId)
        {
             ApiResponse<Product> localVarResponse = await ApiProductsProductIdGetAsyncWithHttpInfo(productId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve details of a specific product Returns the detailed information of a product identified by the provided product ID.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">ID of the product to retrieve</param>
        /// <returns>Task of ApiResponse (Product)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Product>> ApiProductsProductIdGetAsyncWithHttpInfo (int? productId)
        {
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling ProductsApi->ApiProductsProductIdGet");

            var localVarPath = "/api/products/{productId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (productId != null) localVarPathParams.Add("productId", this.Configuration.ApiClient.ParameterToString(productId)); // path parameter
            // authentication (BearerAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiProductsProductIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Product>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Product) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Product)));
        }

        /// <summary>
        /// Delete a specific image for a product Allows administrators or authorized users to delete an image associated with the given product.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">ID of the product to delete an image for.</param>
        /// <param name="imageId">ID or identifier of the image to be deleted.</param>
        /// <returns></returns>
        public void ApiProductsProductIdImagesDelete (int? productId, string imageId)
        {
             ApiProductsProductIdImagesDeleteWithHttpInfo(productId, imageId);
        }

        /// <summary>
        /// Delete a specific image for a product Allows administrators or authorized users to delete an image associated with the given product.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">ID of the product to delete an image for.</param>
        /// <param name="imageId">ID or identifier of the image to be deleted.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ApiProductsProductIdImagesDeleteWithHttpInfo (int? productId, string imageId)
        {
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling ProductsApi->ApiProductsProductIdImagesDelete");
            // verify the required parameter 'imageId' is set
            if (imageId == null)
                throw new ApiException(400, "Missing required parameter 'imageId' when calling ProductsApi->ApiProductsProductIdImagesDelete");

            var localVarPath = "/api/products/{productId}/images";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (productId != null) localVarPathParams.Add("productId", this.Configuration.ApiClient.ParameterToString(productId)); // path parameter
            if (imageId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "imageId", imageId)); // query parameter
            // authentication (BearerAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiProductsProductIdImagesDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Delete a specific image for a product Allows administrators or authorized users to delete an image associated with the given product.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">ID of the product to delete an image for.</param>
        /// <param name="imageId">ID or identifier of the image to be deleted.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiProductsProductIdImagesDeleteAsync (int? productId, string imageId)
        {
             await ApiProductsProductIdImagesDeleteAsyncWithHttpInfo(productId, imageId);

        }

        /// <summary>
        /// Delete a specific image for a product Allows administrators or authorized users to delete an image associated with the given product.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">ID of the product to delete an image for.</param>
        /// <param name="imageId">ID or identifier of the image to be deleted.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ApiProductsProductIdImagesDeleteAsyncWithHttpInfo (int? productId, string imageId)
        {
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling ProductsApi->ApiProductsProductIdImagesDelete");
            // verify the required parameter 'imageId' is set
            if (imageId == null)
                throw new ApiException(400, "Missing required parameter 'imageId' when calling ProductsApi->ApiProductsProductIdImagesDelete");

            var localVarPath = "/api/products/{productId}/images";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (productId != null) localVarPathParams.Add("productId", this.Configuration.ApiClient.ParameterToString(productId)); // path parameter
            if (imageId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "imageId", imageId)); // query parameter
            // authentication (BearerAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiProductsProductIdImagesDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Retrieve images for a specific product Provides a list of image URLs or metadata associated with the given product.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">ID of the product to retrieve images for.</param>
        /// <returns>List&lt;ProductImage&gt;</returns>
        public List<ProductImage> ApiProductsProductIdImagesGet (int? productId)
        {
             ApiResponse<List<ProductImage>> localVarResponse = ApiProductsProductIdImagesGetWithHttpInfo(productId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve images for a specific product Provides a list of image URLs or metadata associated with the given product.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">ID of the product to retrieve images for.</param>
        /// <returns>ApiResponse of List&lt;ProductImage&gt;</returns>
        public ApiResponse< List<ProductImage> > ApiProductsProductIdImagesGetWithHttpInfo (int? productId)
        {
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling ProductsApi->ApiProductsProductIdImagesGet");

            var localVarPath = "/api/products/{productId}/images";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (productId != null) localVarPathParams.Add("productId", this.Configuration.ApiClient.ParameterToString(productId)); // path parameter
            // authentication (BearerAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiProductsProductIdImagesGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ProductImage>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<ProductImage>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ProductImage>)));
        }

        /// <summary>
        /// Retrieve images for a specific product Provides a list of image URLs or metadata associated with the given product.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">ID of the product to retrieve images for.</param>
        /// <returns>Task of List&lt;ProductImage&gt;</returns>
        public async System.Threading.Tasks.Task<List<ProductImage>> ApiProductsProductIdImagesGetAsync (int? productId)
        {
             ApiResponse<List<ProductImage>> localVarResponse = await ApiProductsProductIdImagesGetAsyncWithHttpInfo(productId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve images for a specific product Provides a list of image URLs or metadata associated with the given product.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">ID of the product to retrieve images for.</param>
        /// <returns>Task of ApiResponse (List&lt;ProductImage&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ProductImage>>> ApiProductsProductIdImagesGetAsyncWithHttpInfo (int? productId)
        {
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling ProductsApi->ApiProductsProductIdImagesGet");

            var localVarPath = "/api/products/{productId}/images";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (productId != null) localVarPathParams.Add("productId", this.Configuration.ApiClient.ParameterToString(productId)); // path parameter
            // authentication (BearerAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiProductsProductIdImagesGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ProductImage>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<ProductImage>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ProductImage>)));
        }

        /// <summary>
        /// Upload a new image for a specific product Allows administrators or authorized users to upload a new image for the given product.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Image to be uploaded</param>
        /// <param name="productId">ID of the product to upload an image for.</param>
        /// <returns></returns>
        public void ApiProductsProductIdImagesPost (Object body, int? productId)
        {
             ApiProductsProductIdImagesPostWithHttpInfo(body, productId);
        }

        /// <summary>
        /// Upload a new image for a specific product Allows administrators or authorized users to upload a new image for the given product.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Image to be uploaded</param>
        /// <param name="productId">ID of the product to upload an image for.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ApiProductsProductIdImagesPostWithHttpInfo (Object body, int? productId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ProductsApi->ApiProductsProductIdImagesPost");
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling ProductsApi->ApiProductsProductIdImagesPost");

            var localVarPath = "/api/products/{productId}/images";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "image/_*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (productId != null) localVarPathParams.Add("productId", this.Configuration.ApiClient.ParameterToString(productId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (BearerAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiProductsProductIdImagesPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Upload a new image for a specific product Allows administrators or authorized users to upload a new image for the given product.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Image to be uploaded</param>
        /// <param name="productId">ID of the product to upload an image for.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiProductsProductIdImagesPostAsync (Object body, int? productId)
        {
             await ApiProductsProductIdImagesPostAsyncWithHttpInfo(body, productId);

        }

        /// <summary>
        /// Upload a new image for a specific product Allows administrators or authorized users to upload a new image for the given product.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Image to be uploaded</param>
        /// <param name="productId">ID of the product to upload an image for.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ApiProductsProductIdImagesPostAsyncWithHttpInfo (Object body, int? productId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ProductsApi->ApiProductsProductIdImagesPost");
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling ProductsApi->ApiProductsProductIdImagesPost");

            var localVarPath = "/api/products/{productId}/images";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "image/_*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (productId != null) localVarPathParams.Add("productId", this.Configuration.ApiClient.ParameterToString(productId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (BearerAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiProductsProductIdImagesPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Retrieve inventory data for a specific product Provides current stock levels and inventory status for the given product.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">ID of the product to retrieve inventory data for.</param>
        /// <returns>ProductInventory</returns>
        public ProductInventory ApiProductsProductIdInventoryGet (int? productId)
        {
             ApiResponse<ProductInventory> localVarResponse = ApiProductsProductIdInventoryGetWithHttpInfo(productId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve inventory data for a specific product Provides current stock levels and inventory status for the given product.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">ID of the product to retrieve inventory data for.</param>
        /// <returns>ApiResponse of ProductInventory</returns>
        public ApiResponse< ProductInventory > ApiProductsProductIdInventoryGetWithHttpInfo (int? productId)
        {
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling ProductsApi->ApiProductsProductIdInventoryGet");

            var localVarPath = "/api/products/{productId}/inventory";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (productId != null) localVarPathParams.Add("productId", this.Configuration.ApiClient.ParameterToString(productId)); // path parameter
            // authentication (BearerAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiProductsProductIdInventoryGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProductInventory>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ProductInventory) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProductInventory)));
        }

        /// <summary>
        /// Retrieve inventory data for a specific product Provides current stock levels and inventory status for the given product.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">ID of the product to retrieve inventory data for.</param>
        /// <returns>Task of ProductInventory</returns>
        public async System.Threading.Tasks.Task<ProductInventory> ApiProductsProductIdInventoryGetAsync (int? productId)
        {
             ApiResponse<ProductInventory> localVarResponse = await ApiProductsProductIdInventoryGetAsyncWithHttpInfo(productId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve inventory data for a specific product Provides current stock levels and inventory status for the given product.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">ID of the product to retrieve inventory data for.</param>
        /// <returns>Task of ApiResponse (ProductInventory)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ProductInventory>> ApiProductsProductIdInventoryGetAsyncWithHttpInfo (int? productId)
        {
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling ProductsApi->ApiProductsProductIdInventoryGet");

            var localVarPath = "/api/products/{productId}/inventory";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (productId != null) localVarPathParams.Add("productId", this.Configuration.ApiClient.ParameterToString(productId)); // path parameter
            // authentication (BearerAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiProductsProductIdInventoryGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProductInventory>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ProductInventory) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProductInventory)));
        }

        /// <summary>
        /// Update inventory data for a specific product Allows administrators or authorized users to update stock levels and inventory status for the given product.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Updated inventory data</param>
        /// <param name="productId">ID of the product to update inventory data for.</param>
        /// <returns></returns>
        public void ApiProductsProductIdInventoryPut (ProductInventoryUpdate body, int? productId)
        {
             ApiProductsProductIdInventoryPutWithHttpInfo(body, productId);
        }

        /// <summary>
        /// Update inventory data for a specific product Allows administrators or authorized users to update stock levels and inventory status for the given product.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Updated inventory data</param>
        /// <param name="productId">ID of the product to update inventory data for.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ApiProductsProductIdInventoryPutWithHttpInfo (ProductInventoryUpdate body, int? productId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ProductsApi->ApiProductsProductIdInventoryPut");
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling ProductsApi->ApiProductsProductIdInventoryPut");

            var localVarPath = "/api/products/{productId}/inventory";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (productId != null) localVarPathParams.Add("productId", this.Configuration.ApiClient.ParameterToString(productId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (BearerAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiProductsProductIdInventoryPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Update inventory data for a specific product Allows administrators or authorized users to update stock levels and inventory status for the given product.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Updated inventory data</param>
        /// <param name="productId">ID of the product to update inventory data for.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiProductsProductIdInventoryPutAsync (ProductInventoryUpdate body, int? productId)
        {
             await ApiProductsProductIdInventoryPutAsyncWithHttpInfo(body, productId);

        }

        /// <summary>
        /// Update inventory data for a specific product Allows administrators or authorized users to update stock levels and inventory status for the given product.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Updated inventory data</param>
        /// <param name="productId">ID of the product to update inventory data for.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ApiProductsProductIdInventoryPutAsyncWithHttpInfo (ProductInventoryUpdate body, int? productId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ProductsApi->ApiProductsProductIdInventoryPut");
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling ProductsApi->ApiProductsProductIdInventoryPut");

            var localVarPath = "/api/products/{productId}/inventory";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (productId != null) localVarPathParams.Add("productId", this.Configuration.ApiClient.ParameterToString(productId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (BearerAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiProductsProductIdInventoryPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Retrieve price history for a specific product Provides a chronological list of price changes for the given product.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">ID of the product to retrieve price history for.</param>
        /// <returns>List&lt;ProductPriceHistoryItem&gt;</returns>
        public List<ProductPriceHistoryItem> ApiProductsProductIdPriceHistoryGet (int? productId)
        {
             ApiResponse<List<ProductPriceHistoryItem>> localVarResponse = ApiProductsProductIdPriceHistoryGetWithHttpInfo(productId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve price history for a specific product Provides a chronological list of price changes for the given product.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">ID of the product to retrieve price history for.</param>
        /// <returns>ApiResponse of List&lt;ProductPriceHistoryItem&gt;</returns>
        public ApiResponse< List<ProductPriceHistoryItem> > ApiProductsProductIdPriceHistoryGetWithHttpInfo (int? productId)
        {
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling ProductsApi->ApiProductsProductIdPriceHistoryGet");

            var localVarPath = "/api/products/{productId}/price-history";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (productId != null) localVarPathParams.Add("productId", this.Configuration.ApiClient.ParameterToString(productId)); // path parameter
            // authentication (BearerAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiProductsProductIdPriceHistoryGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ProductPriceHistoryItem>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<ProductPriceHistoryItem>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ProductPriceHistoryItem>)));
        }

        /// <summary>
        /// Retrieve price history for a specific product Provides a chronological list of price changes for the given product.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">ID of the product to retrieve price history for.</param>
        /// <returns>Task of List&lt;ProductPriceHistoryItem&gt;</returns>
        public async System.Threading.Tasks.Task<List<ProductPriceHistoryItem>> ApiProductsProductIdPriceHistoryGetAsync (int? productId)
        {
             ApiResponse<List<ProductPriceHistoryItem>> localVarResponse = await ApiProductsProductIdPriceHistoryGetAsyncWithHttpInfo(productId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve price history for a specific product Provides a chronological list of price changes for the given product.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">ID of the product to retrieve price history for.</param>
        /// <returns>Task of ApiResponse (List&lt;ProductPriceHistoryItem&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ProductPriceHistoryItem>>> ApiProductsProductIdPriceHistoryGetAsyncWithHttpInfo (int? productId)
        {
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling ProductsApi->ApiProductsProductIdPriceHistoryGet");

            var localVarPath = "/api/products/{productId}/price-history";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (productId != null) localVarPathParams.Add("productId", this.Configuration.ApiClient.ParameterToString(productId)); // path parameter
            // authentication (BearerAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiProductsProductIdPriceHistoryGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ProductPriceHistoryItem>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<ProductPriceHistoryItem>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ProductPriceHistoryItem>)));
        }

        /// <summary>
        /// Retrieve promotions for a specific product Provides a list of active and past promotions associated with the given product.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">ID of the product to retrieve promotions for.</param>
        /// <returns>List&lt;ProductPromotion&gt;</returns>
        public List<ProductPromotion> ApiProductsProductIdPromotionsGet (int? productId)
        {
             ApiResponse<List<ProductPromotion>> localVarResponse = ApiProductsProductIdPromotionsGetWithHttpInfo(productId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve promotions for a specific product Provides a list of active and past promotions associated with the given product.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">ID of the product to retrieve promotions for.</param>
        /// <returns>ApiResponse of List&lt;ProductPromotion&gt;</returns>
        public ApiResponse< List<ProductPromotion> > ApiProductsProductIdPromotionsGetWithHttpInfo (int? productId)
        {
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling ProductsApi->ApiProductsProductIdPromotionsGet");

            var localVarPath = "/api/products/{productId}/promotions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (productId != null) localVarPathParams.Add("productId", this.Configuration.ApiClient.ParameterToString(productId)); // path parameter
            // authentication (BearerAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiProductsProductIdPromotionsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ProductPromotion>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<ProductPromotion>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ProductPromotion>)));
        }

        /// <summary>
        /// Retrieve promotions for a specific product Provides a list of active and past promotions associated with the given product.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">ID of the product to retrieve promotions for.</param>
        /// <returns>Task of List&lt;ProductPromotion&gt;</returns>
        public async System.Threading.Tasks.Task<List<ProductPromotion>> ApiProductsProductIdPromotionsGetAsync (int? productId)
        {
             ApiResponse<List<ProductPromotion>> localVarResponse = await ApiProductsProductIdPromotionsGetAsyncWithHttpInfo(productId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve promotions for a specific product Provides a list of active and past promotions associated with the given product.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">ID of the product to retrieve promotions for.</param>
        /// <returns>Task of ApiResponse (List&lt;ProductPromotion&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ProductPromotion>>> ApiProductsProductIdPromotionsGetAsyncWithHttpInfo (int? productId)
        {
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling ProductsApi->ApiProductsProductIdPromotionsGet");

            var localVarPath = "/api/products/{productId}/promotions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (productId != null) localVarPathParams.Add("productId", this.Configuration.ApiClient.ParameterToString(productId)); // path parameter
            // authentication (BearerAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiProductsProductIdPromotionsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ProductPromotion>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<ProductPromotion>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ProductPromotion>)));
        }

        /// <summary>
        /// Retrieve products related to a specific product Provides a list of products that are related to the given product.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">ID of the product to retrieve related products for.</param>
        /// <param name="limit">Limit the number of related products returned (default is 5). (optional, default to 5)</param>
        /// <returns>List&lt;Product&gt;</returns>
        public List<Product> ApiProductsProductIdRelatedGet (int? productId, int? limit = null)
        {
             ApiResponse<List<Product>> localVarResponse = ApiProductsProductIdRelatedGetWithHttpInfo(productId, limit);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve products related to a specific product Provides a list of products that are related to the given product.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">ID of the product to retrieve related products for.</param>
        /// <param name="limit">Limit the number of related products returned (default is 5). (optional, default to 5)</param>
        /// <returns>ApiResponse of List&lt;Product&gt;</returns>
        public ApiResponse< List<Product> > ApiProductsProductIdRelatedGetWithHttpInfo (int? productId, int? limit = null)
        {
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling ProductsApi->ApiProductsProductIdRelatedGet");

            var localVarPath = "/api/products/{productId}/related";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (productId != null) localVarPathParams.Add("productId", this.Configuration.ApiClient.ParameterToString(productId)); // path parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            // authentication (BearerAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiProductsProductIdRelatedGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Product>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Product>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Product>)));
        }

        /// <summary>
        /// Retrieve products related to a specific product Provides a list of products that are related to the given product.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">ID of the product to retrieve related products for.</param>
        /// <param name="limit">Limit the number of related products returned (default is 5). (optional, default to 5)</param>
        /// <returns>Task of List&lt;Product&gt;</returns>
        public async System.Threading.Tasks.Task<List<Product>> ApiProductsProductIdRelatedGetAsync (int? productId, int? limit = null)
        {
             ApiResponse<List<Product>> localVarResponse = await ApiProductsProductIdRelatedGetAsyncWithHttpInfo(productId, limit);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve products related to a specific product Provides a list of products that are related to the given product.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">ID of the product to retrieve related products for.</param>
        /// <param name="limit">Limit the number of related products returned (default is 5). (optional, default to 5)</param>
        /// <returns>Task of ApiResponse (List&lt;Product&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Product>>> ApiProductsProductIdRelatedGetAsyncWithHttpInfo (int? productId, int? limit = null)
        {
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling ProductsApi->ApiProductsProductIdRelatedGet");

            var localVarPath = "/api/products/{productId}/related";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (productId != null) localVarPathParams.Add("productId", this.Configuration.ApiClient.ParameterToString(productId)); // path parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            // authentication (BearerAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiProductsProductIdRelatedGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Product>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Product>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Product>)));
        }

        /// <summary>
        /// Retrieve reviews for a specific product Provides a list of reviews for the given product.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">ID of the product to retrieve reviews for.</param>
        /// <returns>List&lt;Review&gt;</returns>
        public List<Review> ApiProductsProductIdReviewsGet (int? productId)
        {
             ApiResponse<List<Review>> localVarResponse = ApiProductsProductIdReviewsGetWithHttpInfo(productId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve reviews for a specific product Provides a list of reviews for the given product.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">ID of the product to retrieve reviews for.</param>
        /// <returns>ApiResponse of List&lt;Review&gt;</returns>
        public ApiResponse< List<Review> > ApiProductsProductIdReviewsGetWithHttpInfo (int? productId)
        {
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling ProductsApi->ApiProductsProductIdReviewsGet");

            var localVarPath = "/api/products/{productId}/reviews";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (productId != null) localVarPathParams.Add("productId", this.Configuration.ApiClient.ParameterToString(productId)); // path parameter
            // authentication (BearerAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiProductsProductIdReviewsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Review>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Review>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Review>)));
        }

        /// <summary>
        /// Retrieve reviews for a specific product Provides a list of reviews for the given product.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">ID of the product to retrieve reviews for.</param>
        /// <returns>Task of List&lt;Review&gt;</returns>
        public async System.Threading.Tasks.Task<List<Review>> ApiProductsProductIdReviewsGetAsync (int? productId)
        {
             ApiResponse<List<Review>> localVarResponse = await ApiProductsProductIdReviewsGetAsyncWithHttpInfo(productId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve reviews for a specific product Provides a list of reviews for the given product.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">ID of the product to retrieve reviews for.</param>
        /// <returns>Task of ApiResponse (List&lt;Review&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Review>>> ApiProductsProductIdReviewsGetAsyncWithHttpInfo (int? productId)
        {
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling ProductsApi->ApiProductsProductIdReviewsGet");

            var localVarPath = "/api/products/{productId}/reviews";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (productId != null) localVarPathParams.Add("productId", this.Configuration.ApiClient.ParameterToString(productId)); // path parameter
            // authentication (BearerAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiProductsProductIdReviewsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Review>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Review>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Review>)));
        }

        /// <summary>
        /// Add a review for a specific product Allows authenticated users to submit a review for the given product.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Review details</param>
        /// <param name="productId">ID of the product to review.</param>
        /// <returns></returns>
        public void ApiProductsProductIdReviewsPost (ReviewInput body, int? productId)
        {
             ApiProductsProductIdReviewsPostWithHttpInfo(body, productId);
        }

        /// <summary>
        /// Add a review for a specific product Allows authenticated users to submit a review for the given product.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Review details</param>
        /// <param name="productId">ID of the product to review.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ApiProductsProductIdReviewsPostWithHttpInfo (ReviewInput body, int? productId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ProductsApi->ApiProductsProductIdReviewsPost");
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling ProductsApi->ApiProductsProductIdReviewsPost");

            var localVarPath = "/api/products/{productId}/reviews";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (productId != null) localVarPathParams.Add("productId", this.Configuration.ApiClient.ParameterToString(productId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (BearerAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiProductsProductIdReviewsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Add a review for a specific product Allows authenticated users to submit a review for the given product.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Review details</param>
        /// <param name="productId">ID of the product to review.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiProductsProductIdReviewsPostAsync (ReviewInput body, int? productId)
        {
             await ApiProductsProductIdReviewsPostAsyncWithHttpInfo(body, productId);

        }

        /// <summary>
        /// Add a review for a specific product Allows authenticated users to submit a review for the given product.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Review details</param>
        /// <param name="productId">ID of the product to review.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ApiProductsProductIdReviewsPostAsyncWithHttpInfo (ReviewInput body, int? productId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ProductsApi->ApiProductsProductIdReviewsPost");
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling ProductsApi->ApiProductsProductIdReviewsPost");

            var localVarPath = "/api/products/{productId}/reviews";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (productId != null) localVarPathParams.Add("productId", this.Configuration.ApiClient.ParameterToString(productId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (BearerAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiProductsProductIdReviewsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Retrieve product recommendations for the user Provides a list of recommended products based on user behavior, popular products, or other algorithms.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Limit the number of recommended products returned (default is 10). (optional, default to 10)</param>
        /// <returns>List&lt;Product&gt;</returns>
        public List<Product> ApiProductsRecommendationsGet (int? limit = null)
        {
             ApiResponse<List<Product>> localVarResponse = ApiProductsRecommendationsGetWithHttpInfo(limit);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve product recommendations for the user Provides a list of recommended products based on user behavior, popular products, or other algorithms.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Limit the number of recommended products returned (default is 10). (optional, default to 10)</param>
        /// <returns>ApiResponse of List&lt;Product&gt;</returns>
        public ApiResponse< List<Product> > ApiProductsRecommendationsGetWithHttpInfo (int? limit = null)
        {

            var localVarPath = "/api/products/recommendations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            // authentication (BearerAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiProductsRecommendationsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Product>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Product>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Product>)));
        }

        /// <summary>
        /// Retrieve product recommendations for the user Provides a list of recommended products based on user behavior, popular products, or other algorithms.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Limit the number of recommended products returned (default is 10). (optional, default to 10)</param>
        /// <returns>Task of List&lt;Product&gt;</returns>
        public async System.Threading.Tasks.Task<List<Product>> ApiProductsRecommendationsGetAsync (int? limit = null)
        {
             ApiResponse<List<Product>> localVarResponse = await ApiProductsRecommendationsGetAsyncWithHttpInfo(limit);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve product recommendations for the user Provides a list of recommended products based on user behavior, popular products, or other algorithms.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Limit the number of recommended products returned (default is 10). (optional, default to 10)</param>
        /// <returns>Task of ApiResponse (List&lt;Product&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Product>>> ApiProductsRecommendationsGetAsyncWithHttpInfo (int? limit = null)
        {

            var localVarPath = "/api/products/recommendations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            // authentication (BearerAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiProductsRecommendationsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Product>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Product>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Product>)));
        }

        /// <summary>
        /// Search for products Allows users to search for products based on keywords, categories, price range, and other criteria.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyword">Search term or keyword. (optional)</param>
        /// <param name="categoryId">ID of the product category to filter by. (optional)</param>
        /// <param name="minPrice">Minimum price for filtering. (optional)</param>
        /// <param name="maxPrice">Maximum price for filtering. (optional)</param>
        /// <param name="sortBy">Sort the results by date, price, or rating. (optional)</param>
        /// <param name="sortOrder">Order of sorting (ascending or descending). (optional)</param>
        /// <returns>List&lt;Product&gt;</returns>
        public List<Product> ApiProductsSearchGet (string keyword = null, int? categoryId = null, float? minPrice = null, float? maxPrice = null, string sortBy = null, string sortOrder = null)
        {
             ApiResponse<List<Product>> localVarResponse = ApiProductsSearchGetWithHttpInfo(keyword, categoryId, minPrice, maxPrice, sortBy, sortOrder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Search for products Allows users to search for products based on keywords, categories, price range, and other criteria.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyword">Search term or keyword. (optional)</param>
        /// <param name="categoryId">ID of the product category to filter by. (optional)</param>
        /// <param name="minPrice">Minimum price for filtering. (optional)</param>
        /// <param name="maxPrice">Maximum price for filtering. (optional)</param>
        /// <param name="sortBy">Sort the results by date, price, or rating. (optional)</param>
        /// <param name="sortOrder">Order of sorting (ascending or descending). (optional)</param>
        /// <returns>ApiResponse of List&lt;Product&gt;</returns>
        public ApiResponse< List<Product> > ApiProductsSearchGetWithHttpInfo (string keyword = null, int? categoryId = null, float? minPrice = null, float? maxPrice = null, string sortBy = null, string sortOrder = null)
        {

            var localVarPath = "/api/products/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (keyword != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "keyword", keyword)); // query parameter
            if (categoryId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "categoryId", categoryId)); // query parameter
            if (minPrice != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "minPrice", minPrice)); // query parameter
            if (maxPrice != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "maxPrice", maxPrice)); // query parameter
            if (sortBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sortBy", sortBy)); // query parameter
            if (sortOrder != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sortOrder", sortOrder)); // query parameter
            // authentication (BearerAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiProductsSearchGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Product>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Product>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Product>)));
        }

        /// <summary>
        /// Search for products Allows users to search for products based on keywords, categories, price range, and other criteria.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyword">Search term or keyword. (optional)</param>
        /// <param name="categoryId">ID of the product category to filter by. (optional)</param>
        /// <param name="minPrice">Minimum price for filtering. (optional)</param>
        /// <param name="maxPrice">Maximum price for filtering. (optional)</param>
        /// <param name="sortBy">Sort the results by date, price, or rating. (optional)</param>
        /// <param name="sortOrder">Order of sorting (ascending or descending). (optional)</param>
        /// <returns>Task of List&lt;Product&gt;</returns>
        public async System.Threading.Tasks.Task<List<Product>> ApiProductsSearchGetAsync (string keyword = null, int? categoryId = null, float? minPrice = null, float? maxPrice = null, string sortBy = null, string sortOrder = null)
        {
             ApiResponse<List<Product>> localVarResponse = await ApiProductsSearchGetAsyncWithHttpInfo(keyword, categoryId, minPrice, maxPrice, sortBy, sortOrder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Search for products Allows users to search for products based on keywords, categories, price range, and other criteria.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyword">Search term or keyword. (optional)</param>
        /// <param name="categoryId">ID of the product category to filter by. (optional)</param>
        /// <param name="minPrice">Minimum price for filtering. (optional)</param>
        /// <param name="maxPrice">Maximum price for filtering. (optional)</param>
        /// <param name="sortBy">Sort the results by date, price, or rating. (optional)</param>
        /// <param name="sortOrder">Order of sorting (ascending or descending). (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Product&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Product>>> ApiProductsSearchGetAsyncWithHttpInfo (string keyword = null, int? categoryId = null, float? minPrice = null, float? maxPrice = null, string sortBy = null, string sortOrder = null)
        {

            var localVarPath = "/api/products/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (keyword != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "keyword", keyword)); // query parameter
            if (categoryId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "categoryId", categoryId)); // query parameter
            if (minPrice != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "minPrice", minPrice)); // query parameter
            if (maxPrice != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "maxPrice", maxPrice)); // query parameter
            if (sortBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sortBy", sortBy)); // query parameter
            if (sortOrder != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sortOrder", sortOrder)); // query parameter
            // authentication (BearerAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiProductsSearchGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Product>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Product>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Product>)));
        }

        /// <summary>
        /// List all product tags Provides a list of all tags associated with products.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;string&gt;</returns>
        public List<string> ApiProductsTagsGet ()
        {
             ApiResponse<List<string>> localVarResponse = ApiProductsTagsGetWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// List all product tags Provides a list of all tags associated with products.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        public ApiResponse< List<string> > ApiProductsTagsGetWithHttpInfo ()
        {

            var localVarPath = "/api/products/tags";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (BearerAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiProductsTagsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<string>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<string>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<string>)));
        }

        /// <summary>
        /// List all product tags Provides a list of all tags associated with products.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;string&gt;</returns>
        public async System.Threading.Tasks.Task<List<string>> ApiProductsTagsGetAsync ()
        {
             ApiResponse<List<string>> localVarResponse = await ApiProductsTagsGetAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// List all product tags Provides a list of all tags associated with products.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<string>>> ApiProductsTagsGetAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/products/tags";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (BearerAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiProductsTagsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<string>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<string>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<string>)));
        }

        /// <summary>
        /// Add new product tags Allows administrators or authorized users to add new tags for products.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">A list of tags to be added.</param>
        /// <returns></returns>
        public void ApiProductsTagsPost (List<string> body)
        {
             ApiProductsTagsPostWithHttpInfo(body);
        }

        /// <summary>
        /// Add new product tags Allows administrators or authorized users to add new tags for products.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">A list of tags to be added.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ApiProductsTagsPostWithHttpInfo (List<string> body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ProductsApi->ApiProductsTagsPost");

            var localVarPath = "/api/products/tags";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (BearerAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiProductsTagsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Add new product tags Allows administrators or authorized users to add new tags for products.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">A list of tags to be added.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiProductsTagsPostAsync (List<string> body)
        {
             await ApiProductsTagsPostAsyncWithHttpInfo(body);

        }

        /// <summary>
        /// Add new product tags Allows administrators or authorized users to add new tags for products.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">A list of tags to be added.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ApiProductsTagsPostAsyncWithHttpInfo (List<string> body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ProductsApi->ApiProductsTagsPost");

            var localVarPath = "/api/products/tags";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (BearerAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiProductsTagsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Retrieve top-rated products Provides a list of products with the highest average ratings.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Limit the number of top-rated products returned (default is 10). (optional, default to 10)</param>
        /// <param name="minReviewsCount">Minimum number of reviews a product should have to be considered in top-rated (optional filter). (optional)</param>
        /// <returns>List&lt;Product&gt;</returns>
        public List<Product> ApiProductsTopRatedGet (int? limit = null, int? minReviewsCount = null)
        {
             ApiResponse<List<Product>> localVarResponse = ApiProductsTopRatedGetWithHttpInfo(limit, minReviewsCount);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve top-rated products Provides a list of products with the highest average ratings.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Limit the number of top-rated products returned (default is 10). (optional, default to 10)</param>
        /// <param name="minReviewsCount">Minimum number of reviews a product should have to be considered in top-rated (optional filter). (optional)</param>
        /// <returns>ApiResponse of List&lt;Product&gt;</returns>
        public ApiResponse< List<Product> > ApiProductsTopRatedGetWithHttpInfo (int? limit = null, int? minReviewsCount = null)
        {

            var localVarPath = "/api/products/top-rated";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (minReviewsCount != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "minReviewsCount", minReviewsCount)); // query parameter
            // authentication (BearerAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiProductsTopRatedGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Product>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Product>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Product>)));
        }

        /// <summary>
        /// Retrieve top-rated products Provides a list of products with the highest average ratings.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Limit the number of top-rated products returned (default is 10). (optional, default to 10)</param>
        /// <param name="minReviewsCount">Minimum number of reviews a product should have to be considered in top-rated (optional filter). (optional)</param>
        /// <returns>Task of List&lt;Product&gt;</returns>
        public async System.Threading.Tasks.Task<List<Product>> ApiProductsTopRatedGetAsync (int? limit = null, int? minReviewsCount = null)
        {
             ApiResponse<List<Product>> localVarResponse = await ApiProductsTopRatedGetAsyncWithHttpInfo(limit, minReviewsCount);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve top-rated products Provides a list of products with the highest average ratings.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Limit the number of top-rated products returned (default is 10). (optional, default to 10)</param>
        /// <param name="minReviewsCount">Minimum number of reviews a product should have to be considered in top-rated (optional filter). (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Product&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Product>>> ApiProductsTopRatedGetAsyncWithHttpInfo (int? limit = null, int? minReviewsCount = null)
        {

            var localVarPath = "/api/products/top-rated";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (minReviewsCount != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "minReviewsCount", minReviewsCount)); // query parameter
            // authentication (BearerAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiProductsTopRatedGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Product>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Product>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Product>)));
        }

    }
}
