/* 
 * E-commerce API
 *
 * API for E-commerce Platform
 *
 * OpenAPI spec version: 1.0.0
 * Contact: brandon.dunbar97@gmail.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface IUsersApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Request password reset
        /// </summary>
        /// <remarks>
        /// Allows a user to request a password reset link or code, which will be sent to their registered email.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Email address associated with the user&#x27;s account</param>
        /// <returns></returns>
        void ApiUsersForgotPasswordPost (UsersForgotpasswordBody body);

        /// <summary>
        /// Request password reset
        /// </summary>
        /// <remarks>
        /// Allows a user to request a password reset link or code, which will be sent to their registered email.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Email address associated with the user&#x27;s account</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiUsersForgotPasswordPostWithHttpInfo (UsersForgotpasswordBody body);
        /// <summary>
        /// Authenticate a user
        /// </summary>
        /// <remarks>
        /// Authenticate a user using their username (or email) and password.  If successful, a JWT token will be returned for subsequent authenticated requests.  Note: There&#x27;s a rate limit of 5 requests per minute to prevent brute force attacks. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">User login credentials</param>
        /// <returns>InlineResponse200</returns>
        InlineResponse200 ApiUsersLoginPost (UserLogin body);

        /// <summary>
        /// Authenticate a user
        /// </summary>
        /// <remarks>
        /// Authenticate a user using their username (or email) and password.  If successful, a JWT token will be returned for subsequent authenticated requests.  Note: There&#x27;s a rate limit of 5 requests per minute to prevent brute force attacks. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">User login credentials</param>
        /// <returns>ApiResponse of InlineResponse200</returns>
        ApiResponse<InlineResponse200> ApiUsersLoginPostWithHttpInfo (UserLogin body);
        /// <summary>
        /// Retrieve user&#x27;s notifications
        /// </summary>
        /// <remarks>
        /// Allows the authenticated user to view a list of their notifications.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">Filter notifications by status. (optional)</param>
        /// <returns>List&lt;Notification&gt;</returns>
        List<Notification> ApiUsersNotificationsGet (string status = null);

        /// <summary>
        /// Retrieve user&#x27;s notifications
        /// </summary>
        /// <remarks>
        /// Allows the authenticated user to view a list of their notifications.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">Filter notifications by status. (optional)</param>
        /// <returns>ApiResponse of List&lt;Notification&gt;</returns>
        ApiResponse<List<Notification>> ApiUsersNotificationsGetWithHttpInfo (string status = null);
        /// <summary>
        /// Mark notifications as read
        /// </summary>
        /// <remarks>
        /// Allows the authenticated user to mark specific notifications or all notifications as read.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">IDs of notifications to mark as read or a command to mark all as read.</param>
        /// <returns></returns>
        void ApiUsersNotificationsPut (UsersNotificationsBody body);

        /// <summary>
        /// Mark notifications as read
        /// </summary>
        /// <remarks>
        /// Allows the authenticated user to mark specific notifications or all notifications as read.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">IDs of notifications to mark as read or a command to mark all as read.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiUsersNotificationsPutWithHttpInfo (UsersNotificationsBody body);
        /// <summary>
        /// Retrieve user&#x27;s order history
        /// </summary>
        /// <remarks>
        /// Allows the authenticated user to view a list of their past orders.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number for pagination. (optional)</param>
        /// <param name="limit">Number of orders per page for pagination. (optional)</param>
        /// <param name="status">Filter orders by status (e.g., \&quot;completed\&quot;, \&quot;pending\&quot;, \&quot;canceled\&quot;). (optional)</param>
        /// <returns>List&lt;Order&gt;</returns>
        List<Order> ApiUsersOrdersGet (int? page = null, int? limit = null, string status = null);

        /// <summary>
        /// Retrieve user&#x27;s order history
        /// </summary>
        /// <remarks>
        /// Allows the authenticated user to view a list of their past orders.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number for pagination. (optional)</param>
        /// <param name="limit">Number of orders per page for pagination. (optional)</param>
        /// <param name="status">Filter orders by status (e.g., \&quot;completed\&quot;, \&quot;pending\&quot;, \&quot;canceled\&quot;). (optional)</param>
        /// <returns>ApiResponse of List&lt;Order&gt;</returns>
        ApiResponse<List<Order>> ApiUsersOrdersGetWithHttpInfo (int? page = null, int? limit = null, string status = null);
        /// <summary>
        /// Delete user&#x27;s account
        /// </summary>
        /// <remarks>
        /// Allows the authenticated user to permanently delete their account. This action should be used with caution as it might be irreversible.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        void ApiUsersProfileDelete ();

        /// <summary>
        /// Delete user&#x27;s account
        /// </summary>
        /// <remarks>
        /// Allows the authenticated user to permanently delete their account. This action should be used with caution as it might be irreversible.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiUsersProfileDeleteWithHttpInfo ();
        /// <summary>
        /// Retrieve the authenticated user&#x27;s profile
        /// </summary>
        /// <remarks>
        /// Returns the profile details of the currently authenticated user.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>UserProfile</returns>
        UserProfile ApiUsersProfileGet ();

        /// <summary>
        /// Retrieve the authenticated user&#x27;s profile
        /// </summary>
        /// <remarks>
        /// Returns the profile details of the currently authenticated user.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of UserProfile</returns>
        ApiResponse<UserProfile> ApiUsersProfileGetWithHttpInfo ();
        /// <summary>
        /// Change the user&#x27;s password
        /// </summary>
        /// <remarks>
        /// Allows the authenticated user to change their password.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Current and new password details</param>
        /// <returns></returns>
        void ApiUsersProfilePasswordPut (ProfilePasswordBody body);

        /// <summary>
        /// Change the user&#x27;s password
        /// </summary>
        /// <remarks>
        /// Allows the authenticated user to change their password.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Current and new password details</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiUsersProfilePasswordPutWithHttpInfo (ProfilePasswordBody body);
        /// <summary>
        /// Update the authenticated user&#x27;s profile
        /// </summary>
        /// <remarks>
        /// Updates the profile details of the currently authenticated user based on the provided data.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Updated user profile data</param>
        /// <returns>UserProfile</returns>
        UserProfile ApiUsersProfilePut (UserProfile body);

        /// <summary>
        /// Update the authenticated user&#x27;s profile
        /// </summary>
        /// <remarks>
        /// Updates the profile details of the currently authenticated user based on the provided data.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Updated user profile data</param>
        /// <returns>ApiResponse of UserProfile</returns>
        ApiResponse<UserProfile> ApiUsersProfilePutWithHttpInfo (UserProfile body);
        /// <summary>
        /// Register a new user
        /// </summary>
        /// <remarks>
        /// Register a new user with the provided details. Once registered, the user can authenticate using the /api/authorize endpoint. &lt;br&gt;Note - Passwords must be at least 8 characters long, contain at least 1 number and 1 special character.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">User data needed for registration</param>
        /// <returns>UserProfile</returns>
        UserProfile ApiUsersRegisterPost (UserRegistration body);

        /// <summary>
        /// Register a new user
        /// </summary>
        /// <remarks>
        /// Register a new user with the provided details. Once registered, the user can authenticate using the /api/authorize endpoint. &lt;br&gt;Note - Passwords must be at least 8 characters long, contain at least 1 number and 1 special character.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">User data needed for registration</param>
        /// <returns>ApiResponse of UserProfile</returns>
        ApiResponse<UserProfile> ApiUsersRegisterPostWithHttpInfo (UserRegistration body);
        /// <summary>
        /// Reset user password
        /// </summary>
        /// <remarks>
        /// Allows a user to reset their password using a valid reset token or code received in their email.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Password reset token and new password details</param>
        /// <returns></returns>
        void ApiUsersResetPasswordPost (UsersResetpasswordBody body);

        /// <summary>
        /// Reset user password
        /// </summary>
        /// <remarks>
        /// Allows a user to reset their password using a valid reset token or code received in their email.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Password reset token and new password details</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiUsersResetPasswordPostWithHttpInfo (UsersResetpasswordBody body);
        /// <summary>
        /// Retrieve user&#x27;s product reviews
        /// </summary>
        /// <remarks>
        /// Allows the authenticated user to view a list of their product reviews.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;Review&gt;</returns>
        List<Review> ApiUsersReviewsGet ();

        /// <summary>
        /// Retrieve user&#x27;s product reviews
        /// </summary>
        /// <remarks>
        /// Allows the authenticated user to view a list of their product reviews.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;Review&gt;</returns>
        ApiResponse<List<Review>> ApiUsersReviewsGetWithHttpInfo ();
        /// <summary>
        /// Create a new product review
        /// </summary>
        /// <remarks>
        /// Allows the authenticated user to submit a review for a product.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Review details</param>
        /// <returns></returns>
        void ApiUsersReviewsPost (ReviewInput body);

        /// <summary>
        /// Create a new product review
        /// </summary>
        /// <remarks>
        /// Allows the authenticated user to submit a review for a product.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Review details</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiUsersReviewsPostWithHttpInfo (ReviewInput body);
        /// <summary>
        /// Retrieve user&#x27;s wishlists
        /// </summary>
        /// <remarks>
        /// Allows the authenticated user to view a list of their wishlists.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;Wishlist&gt;</returns>
        List<Wishlist> ApiUsersWishlistsGet ();

        /// <summary>
        /// Retrieve user&#x27;s wishlists
        /// </summary>
        /// <remarks>
        /// Allows the authenticated user to view a list of their wishlists.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;Wishlist&gt;</returns>
        ApiResponse<List<Wishlist>> ApiUsersWishlistsGetWithHttpInfo ();
        /// <summary>
        /// Create a new wishlist
        /// </summary>
        /// <remarks>
        /// Allows the authenticated user to create a new wishlist.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Wishlist details</param>
        /// <returns></returns>
        void ApiUsersWishlistsPost (Wishlist body);

        /// <summary>
        /// Create a new wishlist
        /// </summary>
        /// <remarks>
        /// Allows the authenticated user to create a new wishlist.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Wishlist details</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiUsersWishlistsPostWithHttpInfo (Wishlist body);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Request password reset
        /// </summary>
        /// <remarks>
        /// Allows a user to request a password reset link or code, which will be sent to their registered email.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Email address associated with the user&#x27;s account</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiUsersForgotPasswordPostAsync (UsersForgotpasswordBody body);

        /// <summary>
        /// Request password reset
        /// </summary>
        /// <remarks>
        /// Allows a user to request a password reset link or code, which will be sent to their registered email.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Email address associated with the user&#x27;s account</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiUsersForgotPasswordPostAsyncWithHttpInfo (UsersForgotpasswordBody body);
        /// <summary>
        /// Authenticate a user
        /// </summary>
        /// <remarks>
        /// Authenticate a user using their username (or email) and password.  If successful, a JWT token will be returned for subsequent authenticated requests.  Note: There&#x27;s a rate limit of 5 requests per minute to prevent brute force attacks. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">User login credentials</param>
        /// <returns>Task of InlineResponse200</returns>
        System.Threading.Tasks.Task<InlineResponse200> ApiUsersLoginPostAsync (UserLogin body);

        /// <summary>
        /// Authenticate a user
        /// </summary>
        /// <remarks>
        /// Authenticate a user using their username (or email) and password.  If successful, a JWT token will be returned for subsequent authenticated requests.  Note: There&#x27;s a rate limit of 5 requests per minute to prevent brute force attacks. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">User login credentials</param>
        /// <returns>Task of ApiResponse (InlineResponse200)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse200>> ApiUsersLoginPostAsyncWithHttpInfo (UserLogin body);
        /// <summary>
        /// Retrieve user&#x27;s notifications
        /// </summary>
        /// <remarks>
        /// Allows the authenticated user to view a list of their notifications.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">Filter notifications by status. (optional)</param>
        /// <returns>Task of List&lt;Notification&gt;</returns>
        System.Threading.Tasks.Task<List<Notification>> ApiUsersNotificationsGetAsync (string status = null);

        /// <summary>
        /// Retrieve user&#x27;s notifications
        /// </summary>
        /// <remarks>
        /// Allows the authenticated user to view a list of their notifications.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">Filter notifications by status. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Notification&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Notification>>> ApiUsersNotificationsGetAsyncWithHttpInfo (string status = null);
        /// <summary>
        /// Mark notifications as read
        /// </summary>
        /// <remarks>
        /// Allows the authenticated user to mark specific notifications or all notifications as read.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">IDs of notifications to mark as read or a command to mark all as read.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiUsersNotificationsPutAsync (UsersNotificationsBody body);

        /// <summary>
        /// Mark notifications as read
        /// </summary>
        /// <remarks>
        /// Allows the authenticated user to mark specific notifications or all notifications as read.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">IDs of notifications to mark as read or a command to mark all as read.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiUsersNotificationsPutAsyncWithHttpInfo (UsersNotificationsBody body);
        /// <summary>
        /// Retrieve user&#x27;s order history
        /// </summary>
        /// <remarks>
        /// Allows the authenticated user to view a list of their past orders.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number for pagination. (optional)</param>
        /// <param name="limit">Number of orders per page for pagination. (optional)</param>
        /// <param name="status">Filter orders by status (e.g., \&quot;completed\&quot;, \&quot;pending\&quot;, \&quot;canceled\&quot;). (optional)</param>
        /// <returns>Task of List&lt;Order&gt;</returns>
        System.Threading.Tasks.Task<List<Order>> ApiUsersOrdersGetAsync (int? page = null, int? limit = null, string status = null);

        /// <summary>
        /// Retrieve user&#x27;s order history
        /// </summary>
        /// <remarks>
        /// Allows the authenticated user to view a list of their past orders.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number for pagination. (optional)</param>
        /// <param name="limit">Number of orders per page for pagination. (optional)</param>
        /// <param name="status">Filter orders by status (e.g., \&quot;completed\&quot;, \&quot;pending\&quot;, \&quot;canceled\&quot;). (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Order&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Order>>> ApiUsersOrdersGetAsyncWithHttpInfo (int? page = null, int? limit = null, string status = null);
        /// <summary>
        /// Delete user&#x27;s account
        /// </summary>
        /// <remarks>
        /// Allows the authenticated user to permanently delete their account. This action should be used with caution as it might be irreversible.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiUsersProfileDeleteAsync ();

        /// <summary>
        /// Delete user&#x27;s account
        /// </summary>
        /// <remarks>
        /// Allows the authenticated user to permanently delete their account. This action should be used with caution as it might be irreversible.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiUsersProfileDeleteAsyncWithHttpInfo ();
        /// <summary>
        /// Retrieve the authenticated user&#x27;s profile
        /// </summary>
        /// <remarks>
        /// Returns the profile details of the currently authenticated user.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of UserProfile</returns>
        System.Threading.Tasks.Task<UserProfile> ApiUsersProfileGetAsync ();

        /// <summary>
        /// Retrieve the authenticated user&#x27;s profile
        /// </summary>
        /// <remarks>
        /// Returns the profile details of the currently authenticated user.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (UserProfile)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserProfile>> ApiUsersProfileGetAsyncWithHttpInfo ();
        /// <summary>
        /// Change the user&#x27;s password
        /// </summary>
        /// <remarks>
        /// Allows the authenticated user to change their password.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Current and new password details</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiUsersProfilePasswordPutAsync (ProfilePasswordBody body);

        /// <summary>
        /// Change the user&#x27;s password
        /// </summary>
        /// <remarks>
        /// Allows the authenticated user to change their password.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Current and new password details</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiUsersProfilePasswordPutAsyncWithHttpInfo (ProfilePasswordBody body);
        /// <summary>
        /// Update the authenticated user&#x27;s profile
        /// </summary>
        /// <remarks>
        /// Updates the profile details of the currently authenticated user based on the provided data.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Updated user profile data</param>
        /// <returns>Task of UserProfile</returns>
        System.Threading.Tasks.Task<UserProfile> ApiUsersProfilePutAsync (UserProfile body);

        /// <summary>
        /// Update the authenticated user&#x27;s profile
        /// </summary>
        /// <remarks>
        /// Updates the profile details of the currently authenticated user based on the provided data.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Updated user profile data</param>
        /// <returns>Task of ApiResponse (UserProfile)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserProfile>> ApiUsersProfilePutAsyncWithHttpInfo (UserProfile body);
        /// <summary>
        /// Register a new user
        /// </summary>
        /// <remarks>
        /// Register a new user with the provided details. Once registered, the user can authenticate using the /api/authorize endpoint. &lt;br&gt;Note - Passwords must be at least 8 characters long, contain at least 1 number and 1 special character.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">User data needed for registration</param>
        /// <returns>Task of UserProfile</returns>
        System.Threading.Tasks.Task<UserProfile> ApiUsersRegisterPostAsync (UserRegistration body);

        /// <summary>
        /// Register a new user
        /// </summary>
        /// <remarks>
        /// Register a new user with the provided details. Once registered, the user can authenticate using the /api/authorize endpoint. &lt;br&gt;Note - Passwords must be at least 8 characters long, contain at least 1 number and 1 special character.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">User data needed for registration</param>
        /// <returns>Task of ApiResponse (UserProfile)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserProfile>> ApiUsersRegisterPostAsyncWithHttpInfo (UserRegistration body);
        /// <summary>
        /// Reset user password
        /// </summary>
        /// <remarks>
        /// Allows a user to reset their password using a valid reset token or code received in their email.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Password reset token and new password details</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiUsersResetPasswordPostAsync (UsersResetpasswordBody body);

        /// <summary>
        /// Reset user password
        /// </summary>
        /// <remarks>
        /// Allows a user to reset their password using a valid reset token or code received in their email.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Password reset token and new password details</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiUsersResetPasswordPostAsyncWithHttpInfo (UsersResetpasswordBody body);
        /// <summary>
        /// Retrieve user&#x27;s product reviews
        /// </summary>
        /// <remarks>
        /// Allows the authenticated user to view a list of their product reviews.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;Review&gt;</returns>
        System.Threading.Tasks.Task<List<Review>> ApiUsersReviewsGetAsync ();

        /// <summary>
        /// Retrieve user&#x27;s product reviews
        /// </summary>
        /// <remarks>
        /// Allows the authenticated user to view a list of their product reviews.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;Review&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Review>>> ApiUsersReviewsGetAsyncWithHttpInfo ();
        /// <summary>
        /// Create a new product review
        /// </summary>
        /// <remarks>
        /// Allows the authenticated user to submit a review for a product.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Review details</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiUsersReviewsPostAsync (ReviewInput body);

        /// <summary>
        /// Create a new product review
        /// </summary>
        /// <remarks>
        /// Allows the authenticated user to submit a review for a product.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Review details</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiUsersReviewsPostAsyncWithHttpInfo (ReviewInput body);
        /// <summary>
        /// Retrieve user&#x27;s wishlists
        /// </summary>
        /// <remarks>
        /// Allows the authenticated user to view a list of their wishlists.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;Wishlist&gt;</returns>
        System.Threading.Tasks.Task<List<Wishlist>> ApiUsersWishlistsGetAsync ();

        /// <summary>
        /// Retrieve user&#x27;s wishlists
        /// </summary>
        /// <remarks>
        /// Allows the authenticated user to view a list of their wishlists.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;Wishlist&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Wishlist>>> ApiUsersWishlistsGetAsyncWithHttpInfo ();
        /// <summary>
        /// Create a new wishlist
        /// </summary>
        /// <remarks>
        /// Allows the authenticated user to create a new wishlist.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Wishlist details</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiUsersWishlistsPostAsync (Wishlist body);

        /// <summary>
        /// Create a new wishlist
        /// </summary>
        /// <remarks>
        /// Allows the authenticated user to create a new wishlist.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Wishlist details</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiUsersWishlistsPostAsyncWithHttpInfo (Wishlist body);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class UsersApi : IUsersApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="UsersApi"/> class.
        /// </summary>
        /// <returns></returns>
        public UsersApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UsersApi"/> class
        /// </summary>
        /// <returns></returns>
        public UsersApi()
        {
            this.Configuration = IO.Swagger.Client.Configuration.Default;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UsersApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public UsersApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Request password reset Allows a user to request a password reset link or code, which will be sent to their registered email.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Email address associated with the user&#x27;s account</param>
        /// <returns></returns>
        public void ApiUsersForgotPasswordPost (UsersForgotpasswordBody body)
        {
             ApiUsersForgotPasswordPostWithHttpInfo(body);
        }

        /// <summary>
        /// Request password reset Allows a user to request a password reset link or code, which will be sent to their registered email.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Email address associated with the user&#x27;s account</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ApiUsersForgotPasswordPostWithHttpInfo (UsersForgotpasswordBody body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling UsersApi->ApiUsersForgotPasswordPost");

            var localVarPath = "/api/users/forgot-password";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (BearerAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiUsersForgotPasswordPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Request password reset Allows a user to request a password reset link or code, which will be sent to their registered email.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Email address associated with the user&#x27;s account</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiUsersForgotPasswordPostAsync (UsersForgotpasswordBody body)
        {
             await ApiUsersForgotPasswordPostAsyncWithHttpInfo(body);

        }

        /// <summary>
        /// Request password reset Allows a user to request a password reset link or code, which will be sent to their registered email.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Email address associated with the user&#x27;s account</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ApiUsersForgotPasswordPostAsyncWithHttpInfo (UsersForgotpasswordBody body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling UsersApi->ApiUsersForgotPasswordPost");

            var localVarPath = "/api/users/forgot-password";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (BearerAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiUsersForgotPasswordPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Authenticate a user Authenticate a user using their username (or email) and password.  If successful, a JWT token will be returned for subsequent authenticated requests.  Note: There&#x27;s a rate limit of 5 requests per minute to prevent brute force attacks. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">User login credentials</param>
        /// <returns>InlineResponse200</returns>
        public InlineResponse200 ApiUsersLoginPost (UserLogin body)
        {
             ApiResponse<InlineResponse200> localVarResponse = ApiUsersLoginPostWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Authenticate a user Authenticate a user using their username (or email) and password.  If successful, a JWT token will be returned for subsequent authenticated requests.  Note: There&#x27;s a rate limit of 5 requests per minute to prevent brute force attacks. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">User login credentials</param>
        /// <returns>ApiResponse of InlineResponse200</returns>
        public ApiResponse< InlineResponse200 > ApiUsersLoginPostWithHttpInfo (UserLogin body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling UsersApi->ApiUsersLoginPost");

            var localVarPath = "/api/users/login";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (BearerAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiUsersLoginPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse200>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse200) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse200)));
        }

        /// <summary>
        /// Authenticate a user Authenticate a user using their username (or email) and password.  If successful, a JWT token will be returned for subsequent authenticated requests.  Note: There&#x27;s a rate limit of 5 requests per minute to prevent brute force attacks. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">User login credentials</param>
        /// <returns>Task of InlineResponse200</returns>
        public async System.Threading.Tasks.Task<InlineResponse200> ApiUsersLoginPostAsync (UserLogin body)
        {
             ApiResponse<InlineResponse200> localVarResponse = await ApiUsersLoginPostAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Authenticate a user Authenticate a user using their username (or email) and password.  If successful, a JWT token will be returned for subsequent authenticated requests.  Note: There&#x27;s a rate limit of 5 requests per minute to prevent brute force attacks. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">User login credentials</param>
        /// <returns>Task of ApiResponse (InlineResponse200)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse200>> ApiUsersLoginPostAsyncWithHttpInfo (UserLogin body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling UsersApi->ApiUsersLoginPost");

            var localVarPath = "/api/users/login";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (BearerAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiUsersLoginPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse200>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse200) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse200)));
        }

        /// <summary>
        /// Retrieve user&#x27;s notifications Allows the authenticated user to view a list of their notifications.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">Filter notifications by status. (optional)</param>
        /// <returns>List&lt;Notification&gt;</returns>
        public List<Notification> ApiUsersNotificationsGet (string status = null)
        {
             ApiResponse<List<Notification>> localVarResponse = ApiUsersNotificationsGetWithHttpInfo(status);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve user&#x27;s notifications Allows the authenticated user to view a list of their notifications.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">Filter notifications by status. (optional)</param>
        /// <returns>ApiResponse of List&lt;Notification&gt;</returns>
        public ApiResponse< List<Notification> > ApiUsersNotificationsGetWithHttpInfo (string status = null)
        {

            var localVarPath = "/api/users/notifications";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (status != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "status", status)); // query parameter
            // authentication (BearerAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiUsersNotificationsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Notification>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Notification>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Notification>)));
        }

        /// <summary>
        /// Retrieve user&#x27;s notifications Allows the authenticated user to view a list of their notifications.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">Filter notifications by status. (optional)</param>
        /// <returns>Task of List&lt;Notification&gt;</returns>
        public async System.Threading.Tasks.Task<List<Notification>> ApiUsersNotificationsGetAsync (string status = null)
        {
             ApiResponse<List<Notification>> localVarResponse = await ApiUsersNotificationsGetAsyncWithHttpInfo(status);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve user&#x27;s notifications Allows the authenticated user to view a list of their notifications.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">Filter notifications by status. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Notification&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Notification>>> ApiUsersNotificationsGetAsyncWithHttpInfo (string status = null)
        {

            var localVarPath = "/api/users/notifications";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (status != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "status", status)); // query parameter
            // authentication (BearerAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiUsersNotificationsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Notification>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Notification>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Notification>)));
        }

        /// <summary>
        /// Mark notifications as read Allows the authenticated user to mark specific notifications or all notifications as read.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">IDs of notifications to mark as read or a command to mark all as read.</param>
        /// <returns></returns>
        public void ApiUsersNotificationsPut (UsersNotificationsBody body)
        {
             ApiUsersNotificationsPutWithHttpInfo(body);
        }

        /// <summary>
        /// Mark notifications as read Allows the authenticated user to mark specific notifications or all notifications as read.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">IDs of notifications to mark as read or a command to mark all as read.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ApiUsersNotificationsPutWithHttpInfo (UsersNotificationsBody body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling UsersApi->ApiUsersNotificationsPut");

            var localVarPath = "/api/users/notifications";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (BearerAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiUsersNotificationsPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Mark notifications as read Allows the authenticated user to mark specific notifications or all notifications as read.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">IDs of notifications to mark as read or a command to mark all as read.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiUsersNotificationsPutAsync (UsersNotificationsBody body)
        {
             await ApiUsersNotificationsPutAsyncWithHttpInfo(body);

        }

        /// <summary>
        /// Mark notifications as read Allows the authenticated user to mark specific notifications or all notifications as read.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">IDs of notifications to mark as read or a command to mark all as read.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ApiUsersNotificationsPutAsyncWithHttpInfo (UsersNotificationsBody body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling UsersApi->ApiUsersNotificationsPut");

            var localVarPath = "/api/users/notifications";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (BearerAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiUsersNotificationsPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Retrieve user&#x27;s order history Allows the authenticated user to view a list of their past orders.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number for pagination. (optional)</param>
        /// <param name="limit">Number of orders per page for pagination. (optional)</param>
        /// <param name="status">Filter orders by status (e.g., \&quot;completed\&quot;, \&quot;pending\&quot;, \&quot;canceled\&quot;). (optional)</param>
        /// <returns>List&lt;Order&gt;</returns>
        public List<Order> ApiUsersOrdersGet (int? page = null, int? limit = null, string status = null)
        {
             ApiResponse<List<Order>> localVarResponse = ApiUsersOrdersGetWithHttpInfo(page, limit, status);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve user&#x27;s order history Allows the authenticated user to view a list of their past orders.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number for pagination. (optional)</param>
        /// <param name="limit">Number of orders per page for pagination. (optional)</param>
        /// <param name="status">Filter orders by status (e.g., \&quot;completed\&quot;, \&quot;pending\&quot;, \&quot;canceled\&quot;). (optional)</param>
        /// <returns>ApiResponse of List&lt;Order&gt;</returns>
        public ApiResponse< List<Order> > ApiUsersOrdersGetWithHttpInfo (int? page = null, int? limit = null, string status = null)
        {

            var localVarPath = "/api/users/orders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (status != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "status", status)); // query parameter
            // authentication (BearerAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiUsersOrdersGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Order>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Order>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Order>)));
        }

        /// <summary>
        /// Retrieve user&#x27;s order history Allows the authenticated user to view a list of their past orders.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number for pagination. (optional)</param>
        /// <param name="limit">Number of orders per page for pagination. (optional)</param>
        /// <param name="status">Filter orders by status (e.g., \&quot;completed\&quot;, \&quot;pending\&quot;, \&quot;canceled\&quot;). (optional)</param>
        /// <returns>Task of List&lt;Order&gt;</returns>
        public async System.Threading.Tasks.Task<List<Order>> ApiUsersOrdersGetAsync (int? page = null, int? limit = null, string status = null)
        {
             ApiResponse<List<Order>> localVarResponse = await ApiUsersOrdersGetAsyncWithHttpInfo(page, limit, status);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve user&#x27;s order history Allows the authenticated user to view a list of their past orders.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number for pagination. (optional)</param>
        /// <param name="limit">Number of orders per page for pagination. (optional)</param>
        /// <param name="status">Filter orders by status (e.g., \&quot;completed\&quot;, \&quot;pending\&quot;, \&quot;canceled\&quot;). (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Order&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Order>>> ApiUsersOrdersGetAsyncWithHttpInfo (int? page = null, int? limit = null, string status = null)
        {

            var localVarPath = "/api/users/orders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (status != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "status", status)); // query parameter
            // authentication (BearerAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiUsersOrdersGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Order>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Order>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Order>)));
        }

        /// <summary>
        /// Delete user&#x27;s account Allows the authenticated user to permanently delete their account. This action should be used with caution as it might be irreversible.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        public void ApiUsersProfileDelete ()
        {
             ApiUsersProfileDeleteWithHttpInfo();
        }

        /// <summary>
        /// Delete user&#x27;s account Allows the authenticated user to permanently delete their account. This action should be used with caution as it might be irreversible.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ApiUsersProfileDeleteWithHttpInfo ()
        {

            var localVarPath = "/api/users/profile";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (BearerAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiUsersProfileDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Delete user&#x27;s account Allows the authenticated user to permanently delete their account. This action should be used with caution as it might be irreversible.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiUsersProfileDeleteAsync ()
        {
             await ApiUsersProfileDeleteAsyncWithHttpInfo();

        }

        /// <summary>
        /// Delete user&#x27;s account Allows the authenticated user to permanently delete their account. This action should be used with caution as it might be irreversible.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ApiUsersProfileDeleteAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/users/profile";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (BearerAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiUsersProfileDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Retrieve the authenticated user&#x27;s profile Returns the profile details of the currently authenticated user.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>UserProfile</returns>
        public UserProfile ApiUsersProfileGet ()
        {
             ApiResponse<UserProfile> localVarResponse = ApiUsersProfileGetWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve the authenticated user&#x27;s profile Returns the profile details of the currently authenticated user.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of UserProfile</returns>
        public ApiResponse< UserProfile > ApiUsersProfileGetWithHttpInfo ()
        {

            var localVarPath = "/api/users/profile";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (BearerAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiUsersProfileGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserProfile>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (UserProfile) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserProfile)));
        }

        /// <summary>
        /// Retrieve the authenticated user&#x27;s profile Returns the profile details of the currently authenticated user.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of UserProfile</returns>
        public async System.Threading.Tasks.Task<UserProfile> ApiUsersProfileGetAsync ()
        {
             ApiResponse<UserProfile> localVarResponse = await ApiUsersProfileGetAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve the authenticated user&#x27;s profile Returns the profile details of the currently authenticated user.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (UserProfile)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UserProfile>> ApiUsersProfileGetAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/users/profile";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (BearerAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiUsersProfileGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserProfile>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (UserProfile) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserProfile)));
        }

        /// <summary>
        /// Change the user&#x27;s password Allows the authenticated user to change their password.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Current and new password details</param>
        /// <returns></returns>
        public void ApiUsersProfilePasswordPut (ProfilePasswordBody body)
        {
             ApiUsersProfilePasswordPutWithHttpInfo(body);
        }

        /// <summary>
        /// Change the user&#x27;s password Allows the authenticated user to change their password.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Current and new password details</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ApiUsersProfilePasswordPutWithHttpInfo (ProfilePasswordBody body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling UsersApi->ApiUsersProfilePasswordPut");

            var localVarPath = "/api/users/profile/password";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (BearerAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiUsersProfilePasswordPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Change the user&#x27;s password Allows the authenticated user to change their password.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Current and new password details</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiUsersProfilePasswordPutAsync (ProfilePasswordBody body)
        {
             await ApiUsersProfilePasswordPutAsyncWithHttpInfo(body);

        }

        /// <summary>
        /// Change the user&#x27;s password Allows the authenticated user to change their password.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Current and new password details</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ApiUsersProfilePasswordPutAsyncWithHttpInfo (ProfilePasswordBody body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling UsersApi->ApiUsersProfilePasswordPut");

            var localVarPath = "/api/users/profile/password";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (BearerAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiUsersProfilePasswordPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Update the authenticated user&#x27;s profile Updates the profile details of the currently authenticated user based on the provided data.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Updated user profile data</param>
        /// <returns>UserProfile</returns>
        public UserProfile ApiUsersProfilePut (UserProfile body)
        {
             ApiResponse<UserProfile> localVarResponse = ApiUsersProfilePutWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update the authenticated user&#x27;s profile Updates the profile details of the currently authenticated user based on the provided data.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Updated user profile data</param>
        /// <returns>ApiResponse of UserProfile</returns>
        public ApiResponse< UserProfile > ApiUsersProfilePutWithHttpInfo (UserProfile body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling UsersApi->ApiUsersProfilePut");

            var localVarPath = "/api/users/profile";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (BearerAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiUsersProfilePut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserProfile>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (UserProfile) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserProfile)));
        }

        /// <summary>
        /// Update the authenticated user&#x27;s profile Updates the profile details of the currently authenticated user based on the provided data.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Updated user profile data</param>
        /// <returns>Task of UserProfile</returns>
        public async System.Threading.Tasks.Task<UserProfile> ApiUsersProfilePutAsync (UserProfile body)
        {
             ApiResponse<UserProfile> localVarResponse = await ApiUsersProfilePutAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update the authenticated user&#x27;s profile Updates the profile details of the currently authenticated user based on the provided data.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Updated user profile data</param>
        /// <returns>Task of ApiResponse (UserProfile)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UserProfile>> ApiUsersProfilePutAsyncWithHttpInfo (UserProfile body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling UsersApi->ApiUsersProfilePut");

            var localVarPath = "/api/users/profile";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (BearerAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiUsersProfilePut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserProfile>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (UserProfile) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserProfile)));
        }

        /// <summary>
        /// Register a new user Register a new user with the provided details. Once registered, the user can authenticate using the /api/authorize endpoint. &lt;br&gt;Note - Passwords must be at least 8 characters long, contain at least 1 number and 1 special character.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">User data needed for registration</param>
        /// <returns>UserProfile</returns>
        public UserProfile ApiUsersRegisterPost (UserRegistration body)
        {
             ApiResponse<UserProfile> localVarResponse = ApiUsersRegisterPostWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Register a new user Register a new user with the provided details. Once registered, the user can authenticate using the /api/authorize endpoint. &lt;br&gt;Note - Passwords must be at least 8 characters long, contain at least 1 number and 1 special character.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">User data needed for registration</param>
        /// <returns>ApiResponse of UserProfile</returns>
        public ApiResponse< UserProfile > ApiUsersRegisterPostWithHttpInfo (UserRegistration body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling UsersApi->ApiUsersRegisterPost");

            var localVarPath = "/api/users/register";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (BearerAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiUsersRegisterPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserProfile>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (UserProfile) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserProfile)));
        }

        /// <summary>
        /// Register a new user Register a new user with the provided details. Once registered, the user can authenticate using the /api/authorize endpoint. &lt;br&gt;Note - Passwords must be at least 8 characters long, contain at least 1 number and 1 special character.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">User data needed for registration</param>
        /// <returns>Task of UserProfile</returns>
        public async System.Threading.Tasks.Task<UserProfile> ApiUsersRegisterPostAsync (UserRegistration body)
        {
             ApiResponse<UserProfile> localVarResponse = await ApiUsersRegisterPostAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Register a new user Register a new user with the provided details. Once registered, the user can authenticate using the /api/authorize endpoint. &lt;br&gt;Note - Passwords must be at least 8 characters long, contain at least 1 number and 1 special character.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">User data needed for registration</param>
        /// <returns>Task of ApiResponse (UserProfile)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UserProfile>> ApiUsersRegisterPostAsyncWithHttpInfo (UserRegistration body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling UsersApi->ApiUsersRegisterPost");

            var localVarPath = "/api/users/register";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (BearerAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiUsersRegisterPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserProfile>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (UserProfile) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserProfile)));
        }

        /// <summary>
        /// Reset user password Allows a user to reset their password using a valid reset token or code received in their email.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Password reset token and new password details</param>
        /// <returns></returns>
        public void ApiUsersResetPasswordPost (UsersResetpasswordBody body)
        {
             ApiUsersResetPasswordPostWithHttpInfo(body);
        }

        /// <summary>
        /// Reset user password Allows a user to reset their password using a valid reset token or code received in their email.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Password reset token and new password details</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ApiUsersResetPasswordPostWithHttpInfo (UsersResetpasswordBody body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling UsersApi->ApiUsersResetPasswordPost");

            var localVarPath = "/api/users/reset-password";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (BearerAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiUsersResetPasswordPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Reset user password Allows a user to reset their password using a valid reset token or code received in their email.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Password reset token and new password details</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiUsersResetPasswordPostAsync (UsersResetpasswordBody body)
        {
             await ApiUsersResetPasswordPostAsyncWithHttpInfo(body);

        }

        /// <summary>
        /// Reset user password Allows a user to reset their password using a valid reset token or code received in their email.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Password reset token and new password details</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ApiUsersResetPasswordPostAsyncWithHttpInfo (UsersResetpasswordBody body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling UsersApi->ApiUsersResetPasswordPost");

            var localVarPath = "/api/users/reset-password";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (BearerAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiUsersResetPasswordPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Retrieve user&#x27;s product reviews Allows the authenticated user to view a list of their product reviews.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;Review&gt;</returns>
        public List<Review> ApiUsersReviewsGet ()
        {
             ApiResponse<List<Review>> localVarResponse = ApiUsersReviewsGetWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve user&#x27;s product reviews Allows the authenticated user to view a list of their product reviews.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;Review&gt;</returns>
        public ApiResponse< List<Review> > ApiUsersReviewsGetWithHttpInfo ()
        {

            var localVarPath = "/api/users/reviews";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (BearerAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiUsersReviewsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Review>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Review>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Review>)));
        }

        /// <summary>
        /// Retrieve user&#x27;s product reviews Allows the authenticated user to view a list of their product reviews.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;Review&gt;</returns>
        public async System.Threading.Tasks.Task<List<Review>> ApiUsersReviewsGetAsync ()
        {
             ApiResponse<List<Review>> localVarResponse = await ApiUsersReviewsGetAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve user&#x27;s product reviews Allows the authenticated user to view a list of their product reviews.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;Review&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Review>>> ApiUsersReviewsGetAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/users/reviews";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (BearerAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiUsersReviewsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Review>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Review>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Review>)));
        }

        /// <summary>
        /// Create a new product review Allows the authenticated user to submit a review for a product.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Review details</param>
        /// <returns></returns>
        public void ApiUsersReviewsPost (ReviewInput body)
        {
             ApiUsersReviewsPostWithHttpInfo(body);
        }

        /// <summary>
        /// Create a new product review Allows the authenticated user to submit a review for a product.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Review details</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ApiUsersReviewsPostWithHttpInfo (ReviewInput body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling UsersApi->ApiUsersReviewsPost");

            var localVarPath = "/api/users/reviews";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (BearerAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiUsersReviewsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Create a new product review Allows the authenticated user to submit a review for a product.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Review details</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiUsersReviewsPostAsync (ReviewInput body)
        {
             await ApiUsersReviewsPostAsyncWithHttpInfo(body);

        }

        /// <summary>
        /// Create a new product review Allows the authenticated user to submit a review for a product.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Review details</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ApiUsersReviewsPostAsyncWithHttpInfo (ReviewInput body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling UsersApi->ApiUsersReviewsPost");

            var localVarPath = "/api/users/reviews";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (BearerAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiUsersReviewsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Retrieve user&#x27;s wishlists Allows the authenticated user to view a list of their wishlists.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;Wishlist&gt;</returns>
        public List<Wishlist> ApiUsersWishlistsGet ()
        {
             ApiResponse<List<Wishlist>> localVarResponse = ApiUsersWishlistsGetWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve user&#x27;s wishlists Allows the authenticated user to view a list of their wishlists.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;Wishlist&gt;</returns>
        public ApiResponse< List<Wishlist> > ApiUsersWishlistsGetWithHttpInfo ()
        {

            var localVarPath = "/api/users/wishlists";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (BearerAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiUsersWishlistsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Wishlist>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Wishlist>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Wishlist>)));
        }

        /// <summary>
        /// Retrieve user&#x27;s wishlists Allows the authenticated user to view a list of their wishlists.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;Wishlist&gt;</returns>
        public async System.Threading.Tasks.Task<List<Wishlist>> ApiUsersWishlistsGetAsync ()
        {
             ApiResponse<List<Wishlist>> localVarResponse = await ApiUsersWishlistsGetAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve user&#x27;s wishlists Allows the authenticated user to view a list of their wishlists.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;Wishlist&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Wishlist>>> ApiUsersWishlistsGetAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/users/wishlists";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (BearerAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiUsersWishlistsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Wishlist>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Wishlist>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Wishlist>)));
        }

        /// <summary>
        /// Create a new wishlist Allows the authenticated user to create a new wishlist.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Wishlist details</param>
        /// <returns></returns>
        public void ApiUsersWishlistsPost (Wishlist body)
        {
             ApiUsersWishlistsPostWithHttpInfo(body);
        }

        /// <summary>
        /// Create a new wishlist Allows the authenticated user to create a new wishlist.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Wishlist details</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ApiUsersWishlistsPostWithHttpInfo (Wishlist body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling UsersApi->ApiUsersWishlistsPost");

            var localVarPath = "/api/users/wishlists";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (BearerAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiUsersWishlistsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Create a new wishlist Allows the authenticated user to create a new wishlist.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Wishlist details</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiUsersWishlistsPostAsync (Wishlist body)
        {
             await ApiUsersWishlistsPostAsyncWithHttpInfo(body);

        }

        /// <summary>
        /// Create a new wishlist Allows the authenticated user to create a new wishlist.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Wishlist details</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ApiUsersWishlistsPostAsyncWithHttpInfo (Wishlist body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling UsersApi->ApiUsersWishlistsPost");

            var localVarPath = "/api/users/wishlists";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (BearerAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiUsersWishlistsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

    }
}
