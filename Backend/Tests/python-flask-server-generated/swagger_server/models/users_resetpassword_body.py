# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class UsersResetpasswordBody(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, reset_token: str=None, new_password: str=None, confirm_password: str=None):  # noqa: E501
        """UsersResetpasswordBody - a model defined in Swagger

        :param reset_token: The reset_token of this UsersResetpasswordBody.  # noqa: E501
        :type reset_token: str
        :param new_password: The new_password of this UsersResetpasswordBody.  # noqa: E501
        :type new_password: str
        :param confirm_password: The confirm_password of this UsersResetpasswordBody.  # noqa: E501
        :type confirm_password: str
        """
        self.swagger_types = {
            'reset_token': str,
            'new_password': str,
            'confirm_password': str
        }

        self.attribute_map = {
            'reset_token': 'resetToken',
            'new_password': 'newPassword',
            'confirm_password': 'confirmPassword'
        }
        self._reset_token = reset_token
        self._new_password = new_password
        self._confirm_password = confirm_password

    @classmethod
    def from_dict(cls, dikt) -> 'UsersResetpasswordBody':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The users_resetpassword_body of this UsersResetpasswordBody.  # noqa: E501
        :rtype: UsersResetpasswordBody
        """
        return util.deserialize_model(dikt, cls)

    @property
    def reset_token(self) -> str:
        """Gets the reset_token of this UsersResetpasswordBody.

        The reset token or code received in the email  # noqa: E501

        :return: The reset_token of this UsersResetpasswordBody.
        :rtype: str
        """
        return self._reset_token

    @reset_token.setter
    def reset_token(self, reset_token: str):
        """Sets the reset_token of this UsersResetpasswordBody.

        The reset token or code received in the email  # noqa: E501

        :param reset_token: The reset_token of this UsersResetpasswordBody.
        :type reset_token: str
        """
        if reset_token is None:
            raise ValueError("Invalid value for `reset_token`, must not be `None`")  # noqa: E501

        self._reset_token = reset_token

    @property
    def new_password(self) -> str:
        """Gets the new_password of this UsersResetpasswordBody.

        The new password the user wants to set  # noqa: E501

        :return: The new_password of this UsersResetpasswordBody.
        :rtype: str
        """
        return self._new_password

    @new_password.setter
    def new_password(self, new_password: str):
        """Sets the new_password of this UsersResetpasswordBody.

        The new password the user wants to set  # noqa: E501

        :param new_password: The new_password of this UsersResetpasswordBody.
        :type new_password: str
        """
        if new_password is None:
            raise ValueError("Invalid value for `new_password`, must not be `None`")  # noqa: E501

        self._new_password = new_password

    @property
    def confirm_password(self) -> str:
        """Gets the confirm_password of this UsersResetpasswordBody.

        Confirmation of the new password  # noqa: E501

        :return: The confirm_password of this UsersResetpasswordBody.
        :rtype: str
        """
        return self._confirm_password

    @confirm_password.setter
    def confirm_password(self, confirm_password: str):
        """Sets the confirm_password of this UsersResetpasswordBody.

        Confirmation of the new password  # noqa: E501

        :param confirm_password: The confirm_password of this UsersResetpasswordBody.
        :type confirm_password: str
        """
        if confirm_password is None:
            raise ValueError("Invalid value for `confirm_password`, must not be `None`")  # noqa: E501

        self._confirm_password = confirm_password
