# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class AffiliateCreate(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, name: str=None, contact_email: str=None, referral_code: str=None, registration_date: datetime=None, is_active: bool=True):  # noqa: E501
        """AffiliateCreate - a model defined in Swagger

        :param name: The name of this AffiliateCreate.  # noqa: E501
        :type name: str
        :param contact_email: The contact_email of this AffiliateCreate.  # noqa: E501
        :type contact_email: str
        :param referral_code: The referral_code of this AffiliateCreate.  # noqa: E501
        :type referral_code: str
        :param registration_date: The registration_date of this AffiliateCreate.  # noqa: E501
        :type registration_date: datetime
        :param is_active: The is_active of this AffiliateCreate.  # noqa: E501
        :type is_active: bool
        """
        self.swagger_types = {
            'name': str,
            'contact_email': str,
            'referral_code': str,
            'registration_date': datetime,
            'is_active': bool
        }

        self.attribute_map = {
            'name': 'name',
            'contact_email': 'contactEmail',
            'referral_code': 'referralCode',
            'registration_date': 'registrationDate',
            'is_active': 'isActive'
        }
        self._name = name
        self._contact_email = contact_email
        self._referral_code = referral_code
        self._registration_date = registration_date
        self._is_active = is_active

    @classmethod
    def from_dict(cls, dikt) -> 'AffiliateCreate':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The AffiliateCreate of this AffiliateCreate.  # noqa: E501
        :rtype: AffiliateCreate
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self) -> str:
        """Gets the name of this AffiliateCreate.

        Full name or company name of the affiliate.  # noqa: E501

        :return: The name of this AffiliateCreate.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this AffiliateCreate.

        Full name or company name of the affiliate.  # noqa: E501

        :param name: The name of this AffiliateCreate.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def contact_email(self) -> str:
        """Gets the contact_email of this AffiliateCreate.

        Contact email address for the affiliate.  # noqa: E501

        :return: The contact_email of this AffiliateCreate.
        :rtype: str
        """
        return self._contact_email

    @contact_email.setter
    def contact_email(self, contact_email: str):
        """Sets the contact_email of this AffiliateCreate.

        Contact email address for the affiliate.  # noqa: E501

        :param contact_email: The contact_email of this AffiliateCreate.
        :type contact_email: str
        """
        if contact_email is None:
            raise ValueError("Invalid value for `contact_email`, must not be `None`")  # noqa: E501

        self._contact_email = contact_email

    @property
    def referral_code(self) -> str:
        """Gets the referral_code of this AffiliateCreate.

        Unique code to be used by the affiliate for referrals. If not provided, the system could generate one.  # noqa: E501

        :return: The referral_code of this AffiliateCreate.
        :rtype: str
        """
        return self._referral_code

    @referral_code.setter
    def referral_code(self, referral_code: str):
        """Sets the referral_code of this AffiliateCreate.

        Unique code to be used by the affiliate for referrals. If not provided, the system could generate one.  # noqa: E501

        :param referral_code: The referral_code of this AffiliateCreate.
        :type referral_code: str
        """

        self._referral_code = referral_code

    @property
    def registration_date(self) -> datetime:
        """Gets the registration_date of this AffiliateCreate.

        Date and time when the affiliate is onboarded. If not provided, the system could use the current date-time.  # noqa: E501

        :return: The registration_date of this AffiliateCreate.
        :rtype: datetime
        """
        return self._registration_date

    @registration_date.setter
    def registration_date(self, registration_date: datetime):
        """Sets the registration_date of this AffiliateCreate.

        Date and time when the affiliate is onboarded. If not provided, the system could use the current date-time.  # noqa: E501

        :param registration_date: The registration_date of this AffiliateCreate.
        :type registration_date: datetime
        """

        self._registration_date = registration_date

    @property
    def is_active(self) -> bool:
        """Gets the is_active of this AffiliateCreate.

        Indicates whether the affiliate should start as active. Defaults to true if not provided.  # noqa: E501

        :return: The is_active of this AffiliateCreate.
        :rtype: bool
        """
        return self._is_active

    @is_active.setter
    def is_active(self, is_active: bool):
        """Sets the is_active of this AffiliateCreate.

        Indicates whether the affiliate should start as active. Defaults to true if not provided.  # noqa: E501

        :param is_active: The is_active of this AffiliateCreate.
        :type is_active: bool
        """

        self._is_active = is_active
