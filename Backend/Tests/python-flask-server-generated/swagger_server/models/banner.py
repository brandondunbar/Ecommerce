# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Banner(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, banner_id: int=None, title: str=None, image_url: str=None, link_url: str=None, display_duration: int=None, start_date: datetime=None, end_date: datetime=None, position: str=None, is_active: bool=None):  # noqa: E501
        """Banner - a model defined in Swagger

        :param banner_id: The banner_id of this Banner.  # noqa: E501
        :type banner_id: int
        :param title: The title of this Banner.  # noqa: E501
        :type title: str
        :param image_url: The image_url of this Banner.  # noqa: E501
        :type image_url: str
        :param link_url: The link_url of this Banner.  # noqa: E501
        :type link_url: str
        :param display_duration: The display_duration of this Banner.  # noqa: E501
        :type display_duration: int
        :param start_date: The start_date of this Banner.  # noqa: E501
        :type start_date: datetime
        :param end_date: The end_date of this Banner.  # noqa: E501
        :type end_date: datetime
        :param position: The position of this Banner.  # noqa: E501
        :type position: str
        :param is_active: The is_active of this Banner.  # noqa: E501
        :type is_active: bool
        """
        self.swagger_types = {
            'banner_id': int,
            'title': str,
            'image_url': str,
            'link_url': str,
            'display_duration': int,
            'start_date': datetime,
            'end_date': datetime,
            'position': str,
            'is_active': bool
        }

        self.attribute_map = {
            'banner_id': 'bannerId',
            'title': 'title',
            'image_url': 'imageUrl',
            'link_url': 'linkUrl',
            'display_duration': 'displayDuration',
            'start_date': 'startDate',
            'end_date': 'endDate',
            'position': 'position',
            'is_active': 'isActive'
        }
        self._banner_id = banner_id
        self._title = title
        self._image_url = image_url
        self._link_url = link_url
        self._display_duration = display_duration
        self._start_date = start_date
        self._end_date = end_date
        self._position = position
        self._is_active = is_active

    @classmethod
    def from_dict(cls, dikt) -> 'Banner':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Banner of this Banner.  # noqa: E501
        :rtype: Banner
        """
        return util.deserialize_model(dikt, cls)

    @property
    def banner_id(self) -> int:
        """Gets the banner_id of this Banner.

        Unique identifier for the promotional banner.  # noqa: E501

        :return: The banner_id of this Banner.
        :rtype: int
        """
        return self._banner_id

    @banner_id.setter
    def banner_id(self, banner_id: int):
        """Sets the banner_id of this Banner.

        Unique identifier for the promotional banner.  # noqa: E501

        :param banner_id: The banner_id of this Banner.
        :type banner_id: int
        """
        if banner_id is None:
            raise ValueError("Invalid value for `banner_id`, must not be `None`")  # noqa: E501

        self._banner_id = banner_id

    @property
    def title(self) -> str:
        """Gets the title of this Banner.

        A short title or headline for the banner.  # noqa: E501

        :return: The title of this Banner.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title: str):
        """Sets the title of this Banner.

        A short title or headline for the banner.  # noqa: E501

        :param title: The title of this Banner.
        :type title: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")  # noqa: E501

        self._title = title

    @property
    def image_url(self) -> str:
        """Gets the image_url of this Banner.

        URL of the banner image.  # noqa: E501

        :return: The image_url of this Banner.
        :rtype: str
        """
        return self._image_url

    @image_url.setter
    def image_url(self, image_url: str):
        """Sets the image_url of this Banner.

        URL of the banner image.  # noqa: E501

        :param image_url: The image_url of this Banner.
        :type image_url: str
        """
        if image_url is None:
            raise ValueError("Invalid value for `image_url`, must not be `None`")  # noqa: E501

        self._image_url = image_url

    @property
    def link_url(self) -> str:
        """Gets the link_url of this Banner.

        URL to which the banner redirects when clicked.  # noqa: E501

        :return: The link_url of this Banner.
        :rtype: str
        """
        return self._link_url

    @link_url.setter
    def link_url(self, link_url: str):
        """Sets the link_url of this Banner.

        URL to which the banner redirects when clicked.  # noqa: E501

        :param link_url: The link_url of this Banner.
        :type link_url: str
        """
        if link_url is None:
            raise ValueError("Invalid value for `link_url`, must not be `None`")  # noqa: E501

        self._link_url = link_url

    @property
    def display_duration(self) -> int:
        """Gets the display_duration of this Banner.

        Duration (in seconds) for which the banner should be displayed to the user.  # noqa: E501

        :return: The display_duration of this Banner.
        :rtype: int
        """
        return self._display_duration

    @display_duration.setter
    def display_duration(self, display_duration: int):
        """Sets the display_duration of this Banner.

        Duration (in seconds) for which the banner should be displayed to the user.  # noqa: E501

        :param display_duration: The display_duration of this Banner.
        :type display_duration: int
        """

        self._display_duration = display_duration

    @property
    def start_date(self) -> datetime:
        """Gets the start_date of this Banner.

        Date and time when the banner starts being displayed.  # noqa: E501

        :return: The start_date of this Banner.
        :rtype: datetime
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date: datetime):
        """Sets the start_date of this Banner.

        Date and time when the banner starts being displayed.  # noqa: E501

        :param start_date: The start_date of this Banner.
        :type start_date: datetime
        """
        if start_date is None:
            raise ValueError("Invalid value for `start_date`, must not be `None`")  # noqa: E501

        self._start_date = start_date

    @property
    def end_date(self) -> datetime:
        """Gets the end_date of this Banner.

        Date and time when the banner stops being displayed.  # noqa: E501

        :return: The end_date of this Banner.
        :rtype: datetime
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date: datetime):
        """Sets the end_date of this Banner.

        Date and time when the banner stops being displayed.  # noqa: E501

        :param end_date: The end_date of this Banner.
        :type end_date: datetime
        """
        if end_date is None:
            raise ValueError("Invalid value for `end_date`, must not be `None`")  # noqa: E501

        self._end_date = end_date

    @property
    def position(self) -> str:
        """Gets the position of this Banner.

        The position on the webpage where the banner should be displayed.  # noqa: E501

        :return: The position of this Banner.
        :rtype: str
        """
        return self._position

    @position.setter
    def position(self, position: str):
        """Sets the position of this Banner.

        The position on the webpage where the banner should be displayed.  # noqa: E501

        :param position: The position of this Banner.
        :type position: str
        """
        allowed_values = ["TOP", "MIDDLE", "BOTTOM"]  # noqa: E501
        if position not in allowed_values:
            raise ValueError(
                "Invalid value for `position` ({0}), must be one of {1}"
                .format(position, allowed_values)
            )

        self._position = position

    @property
    def is_active(self) -> bool:
        """Gets the is_active of this Banner.

        Indicates whether the banner is currently active and being displayed to users.  # noqa: E501

        :return: The is_active of this Banner.
        :rtype: bool
        """
        return self._is_active

    @is_active.setter
    def is_active(self, is_active: bool):
        """Sets the is_active of this Banner.

        Indicates whether the banner is currently active and being displayed to users.  # noqa: E501

        :param is_active: The is_active of this Banner.
        :type is_active: bool
        """

        self._is_active = is_active
