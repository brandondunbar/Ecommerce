# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class User(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, user_id: int=None, username: str=None, email: str=None, first_name: str=None, last_name: str=None, date_registered: datetime=None, last_login: datetime=None, role: str=None, is_active: bool=True, avatar_url: str=None, address: str=None, phone: str=None):  # noqa: E501
        """User - a model defined in Swagger

        :param user_id: The user_id of this User.  # noqa: E501
        :type user_id: int
        :param username: The username of this User.  # noqa: E501
        :type username: str
        :param email: The email of this User.  # noqa: E501
        :type email: str
        :param first_name: The first_name of this User.  # noqa: E501
        :type first_name: str
        :param last_name: The last_name of this User.  # noqa: E501
        :type last_name: str
        :param date_registered: The date_registered of this User.  # noqa: E501
        :type date_registered: datetime
        :param last_login: The last_login of this User.  # noqa: E501
        :type last_login: datetime
        :param role: The role of this User.  # noqa: E501
        :type role: str
        :param is_active: The is_active of this User.  # noqa: E501
        :type is_active: bool
        :param avatar_url: The avatar_url of this User.  # noqa: E501
        :type avatar_url: str
        :param address: The address of this User.  # noqa: E501
        :type address: str
        :param phone: The phone of this User.  # noqa: E501
        :type phone: str
        """
        self.swagger_types = {
            'user_id': int,
            'username': str,
            'email': str,
            'first_name': str,
            'last_name': str,
            'date_registered': datetime,
            'last_login': datetime,
            'role': str,
            'is_active': bool,
            'avatar_url': str,
            'address': str,
            'phone': str
        }

        self.attribute_map = {
            'user_id': 'userId',
            'username': 'username',
            'email': 'email',
            'first_name': 'firstName',
            'last_name': 'lastName',
            'date_registered': 'dateRegistered',
            'last_login': 'lastLogin',
            'role': 'role',
            'is_active': 'isActive',
            'avatar_url': 'avatarUrl',
            'address': 'address',
            'phone': 'phone'
        }
        self._user_id = user_id
        self._username = username
        self._email = email
        self._first_name = first_name
        self._last_name = last_name
        self._date_registered = date_registered
        self._last_login = last_login
        self._role = role
        self._is_active = is_active
        self._avatar_url = avatar_url
        self._address = address
        self._phone = phone

    @classmethod
    def from_dict(cls, dikt) -> 'User':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The User of this User.  # noqa: E501
        :rtype: User
        """
        return util.deserialize_model(dikt, cls)

    @property
    def user_id(self) -> int:
        """Gets the user_id of this User.

        Unique identifier for the user.  # noqa: E501

        :return: The user_id of this User.
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id: int):
        """Sets the user_id of this User.

        Unique identifier for the user.  # noqa: E501

        :param user_id: The user_id of this User.
        :type user_id: int
        """
        if user_id is None:
            raise ValueError("Invalid value for `user_id`, must not be `None`")  # noqa: E501

        self._user_id = user_id

    @property
    def username(self) -> str:
        """Gets the username of this User.

        Unique username used for login.  # noqa: E501

        :return: The username of this User.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username: str):
        """Sets the username of this User.

        Unique username used for login.  # noqa: E501

        :param username: The username of this User.
        :type username: str
        """
        if username is None:
            raise ValueError("Invalid value for `username`, must not be `None`")  # noqa: E501

        self._username = username

    @property
    def email(self) -> str:
        """Gets the email of this User.

        Email address of the user.  # noqa: E501

        :return: The email of this User.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email: str):
        """Sets the email of this User.

        Email address of the user.  # noqa: E501

        :param email: The email of this User.
        :type email: str
        """
        if email is None:
            raise ValueError("Invalid value for `email`, must not be `None`")  # noqa: E501

        self._email = email

    @property
    def first_name(self) -> str:
        """Gets the first_name of this User.

        First name of the user.  # noqa: E501

        :return: The first_name of this User.
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name: str):
        """Sets the first_name of this User.

        First name of the user.  # noqa: E501

        :param first_name: The first_name of this User.
        :type first_name: str
        """
        if first_name is None:
            raise ValueError("Invalid value for `first_name`, must not be `None`")  # noqa: E501

        self._first_name = first_name

    @property
    def last_name(self) -> str:
        """Gets the last_name of this User.

        Last name of the user.  # noqa: E501

        :return: The last_name of this User.
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name: str):
        """Sets the last_name of this User.

        Last name of the user.  # noqa: E501

        :param last_name: The last_name of this User.
        :type last_name: str
        """
        if last_name is None:
            raise ValueError("Invalid value for `last_name`, must not be `None`")  # noqa: E501

        self._last_name = last_name

    @property
    def date_registered(self) -> datetime:
        """Gets the date_registered of this User.

        Date and time when the user registered.  # noqa: E501

        :return: The date_registered of this User.
        :rtype: datetime
        """
        return self._date_registered

    @date_registered.setter
    def date_registered(self, date_registered: datetime):
        """Sets the date_registered of this User.

        Date and time when the user registered.  # noqa: E501

        :param date_registered: The date_registered of this User.
        :type date_registered: datetime
        """

        self._date_registered = date_registered

    @property
    def last_login(self) -> datetime:
        """Gets the last_login of this User.

        Date and time of the user's last successful login.  # noqa: E501

        :return: The last_login of this User.
        :rtype: datetime
        """
        return self._last_login

    @last_login.setter
    def last_login(self, last_login: datetime):
        """Sets the last_login of this User.

        Date and time of the user's last successful login.  # noqa: E501

        :param last_login: The last_login of this User.
        :type last_login: datetime
        """

        self._last_login = last_login

    @property
    def role(self) -> str:
        """Gets the role of this User.

        Role or roles assigned to the user. This could be an array if users can have multiple roles.  # noqa: E501

        :return: The role of this User.
        :rtype: str
        """
        return self._role

    @role.setter
    def role(self, role: str):
        """Sets the role of this User.

        Role or roles assigned to the user. This could be an array if users can have multiple roles.  # noqa: E501

        :param role: The role of this User.
        :type role: str
        """

        self._role = role

    @property
    def is_active(self) -> bool:
        """Gets the is_active of this User.

        Flag indicating if the user's account is active.  # noqa: E501

        :return: The is_active of this User.
        :rtype: bool
        """
        return self._is_active

    @is_active.setter
    def is_active(self, is_active: bool):
        """Sets the is_active of this User.

        Flag indicating if the user's account is active.  # noqa: E501

        :param is_active: The is_active of this User.
        :type is_active: bool
        """

        self._is_active = is_active

    @property
    def avatar_url(self) -> str:
        """Gets the avatar_url of this User.

        URL to the user's avatar or profile picture (if any).  # noqa: E501

        :return: The avatar_url of this User.
        :rtype: str
        """
        return self._avatar_url

    @avatar_url.setter
    def avatar_url(self, avatar_url: str):
        """Sets the avatar_url of this User.

        URL to the user's avatar or profile picture (if any).  # noqa: E501

        :param avatar_url: The avatar_url of this User.
        :type avatar_url: str
        """

        self._avatar_url = avatar_url

    @property
    def address(self) -> str:
        """Gets the address of this User.

        Physical address of the user (if provided).  # noqa: E501

        :return: The address of this User.
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address: str):
        """Sets the address of this User.

        Physical address of the user (if provided).  # noqa: E501

        :param address: The address of this User.
        :type address: str
        """

        self._address = address

    @property
    def phone(self) -> str:
        """Gets the phone of this User.

        Contact phone number for the user.  # noqa: E501

        :return: The phone of this User.
        :rtype: str
        """
        return self._phone

    @phone.setter
    def phone(self, phone: str):
        """Sets the phone of this User.

        Contact phone number for the user.  # noqa: E501

        :param phone: The phone of this User.
        :type phone: str
        """

        self._phone = phone
