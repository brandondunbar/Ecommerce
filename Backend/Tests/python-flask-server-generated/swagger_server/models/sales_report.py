# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.sales_report_daily_breakdown import SalesReportDailyBreakdown  # noqa: F401,E501
from swagger_server.models.sales_report_top_selling_products import SalesReportTopSellingProducts  # noqa: F401,E501
from swagger_server import util


class SalesReport(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, start_date: date=None, end_date: date=None, total_sales: int=None, total_revenue: float=None, average_order_value: float=None, top_selling_products: List[SalesReportTopSellingProducts]=None, least_selling_products: List[SalesReportTopSellingProducts]=None, daily_breakdown: List[SalesReportDailyBreakdown]=None):  # noqa: E501
        """SalesReport - a model defined in Swagger

        :param start_date: The start_date of this SalesReport.  # noqa: E501
        :type start_date: date
        :param end_date: The end_date of this SalesReport.  # noqa: E501
        :type end_date: date
        :param total_sales: The total_sales of this SalesReport.  # noqa: E501
        :type total_sales: int
        :param total_revenue: The total_revenue of this SalesReport.  # noqa: E501
        :type total_revenue: float
        :param average_order_value: The average_order_value of this SalesReport.  # noqa: E501
        :type average_order_value: float
        :param top_selling_products: The top_selling_products of this SalesReport.  # noqa: E501
        :type top_selling_products: List[SalesReportTopSellingProducts]
        :param least_selling_products: The least_selling_products of this SalesReport.  # noqa: E501
        :type least_selling_products: List[SalesReportTopSellingProducts]
        :param daily_breakdown: The daily_breakdown of this SalesReport.  # noqa: E501
        :type daily_breakdown: List[SalesReportDailyBreakdown]
        """
        self.swagger_types = {
            'start_date': date,
            'end_date': date,
            'total_sales': int,
            'total_revenue': float,
            'average_order_value': float,
            'top_selling_products': List[SalesReportTopSellingProducts],
            'least_selling_products': List[SalesReportTopSellingProducts],
            'daily_breakdown': List[SalesReportDailyBreakdown]
        }

        self.attribute_map = {
            'start_date': 'startDate',
            'end_date': 'endDate',
            'total_sales': 'totalSales',
            'total_revenue': 'totalRevenue',
            'average_order_value': 'averageOrderValue',
            'top_selling_products': 'topSellingProducts',
            'least_selling_products': 'leastSellingProducts',
            'daily_breakdown': 'dailyBreakdown'
        }
        self._start_date = start_date
        self._end_date = end_date
        self._total_sales = total_sales
        self._total_revenue = total_revenue
        self._average_order_value = average_order_value
        self._top_selling_products = top_selling_products
        self._least_selling_products = least_selling_products
        self._daily_breakdown = daily_breakdown

    @classmethod
    def from_dict(cls, dikt) -> 'SalesReport':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The SalesReport of this SalesReport.  # noqa: E501
        :rtype: SalesReport
        """
        return util.deserialize_model(dikt, cls)

    @property
    def start_date(self) -> date:
        """Gets the start_date of this SalesReport.

        The start date for the report period.  # noqa: E501

        :return: The start_date of this SalesReport.
        :rtype: date
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date: date):
        """Sets the start_date of this SalesReport.

        The start date for the report period.  # noqa: E501

        :param start_date: The start_date of this SalesReport.
        :type start_date: date
        """
        if start_date is None:
            raise ValueError("Invalid value for `start_date`, must not be `None`")  # noqa: E501

        self._start_date = start_date

    @property
    def end_date(self) -> date:
        """Gets the end_date of this SalesReport.

        The end date for the report period.  # noqa: E501

        :return: The end_date of this SalesReport.
        :rtype: date
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date: date):
        """Sets the end_date of this SalesReport.

        The end date for the report period.  # noqa: E501

        :param end_date: The end_date of this SalesReport.
        :type end_date: date
        """
        if end_date is None:
            raise ValueError("Invalid value for `end_date`, must not be `None`")  # noqa: E501

        self._end_date = end_date

    @property
    def total_sales(self) -> int:
        """Gets the total_sales of this SalesReport.

        Total number of sales/orders during the report period.  # noqa: E501

        :return: The total_sales of this SalesReport.
        :rtype: int
        """
        return self._total_sales

    @total_sales.setter
    def total_sales(self, total_sales: int):
        """Sets the total_sales of this SalesReport.

        Total number of sales/orders during the report period.  # noqa: E501

        :param total_sales: The total_sales of this SalesReport.
        :type total_sales: int
        """
        if total_sales is None:
            raise ValueError("Invalid value for `total_sales`, must not be `None`")  # noqa: E501

        self._total_sales = total_sales

    @property
    def total_revenue(self) -> float:
        """Gets the total_revenue of this SalesReport.

        Total revenue generated during the report period.  # noqa: E501

        :return: The total_revenue of this SalesReport.
        :rtype: float
        """
        return self._total_revenue

    @total_revenue.setter
    def total_revenue(self, total_revenue: float):
        """Sets the total_revenue of this SalesReport.

        Total revenue generated during the report period.  # noqa: E501

        :param total_revenue: The total_revenue of this SalesReport.
        :type total_revenue: float
        """
        if total_revenue is None:
            raise ValueError("Invalid value for `total_revenue`, must not be `None`")  # noqa: E501

        self._total_revenue = total_revenue

    @property
    def average_order_value(self) -> float:
        """Gets the average_order_value of this SalesReport.

        The average value of orders during the report period.  # noqa: E501

        :return: The average_order_value of this SalesReport.
        :rtype: float
        """
        return self._average_order_value

    @average_order_value.setter
    def average_order_value(self, average_order_value: float):
        """Sets the average_order_value of this SalesReport.

        The average value of orders during the report period.  # noqa: E501

        :param average_order_value: The average_order_value of this SalesReport.
        :type average_order_value: float
        """
        if average_order_value is None:
            raise ValueError("Invalid value for `average_order_value`, must not be `None`")  # noqa: E501

        self._average_order_value = average_order_value

    @property
    def top_selling_products(self) -> List[SalesReportTopSellingProducts]:
        """Gets the top_selling_products of this SalesReport.


        :return: The top_selling_products of this SalesReport.
        :rtype: List[SalesReportTopSellingProducts]
        """
        return self._top_selling_products

    @top_selling_products.setter
    def top_selling_products(self, top_selling_products: List[SalesReportTopSellingProducts]):
        """Sets the top_selling_products of this SalesReport.


        :param top_selling_products: The top_selling_products of this SalesReport.
        :type top_selling_products: List[SalesReportTopSellingProducts]
        """

        self._top_selling_products = top_selling_products

    @property
    def least_selling_products(self) -> List[SalesReportTopSellingProducts]:
        """Gets the least_selling_products of this SalesReport.


        :return: The least_selling_products of this SalesReport.
        :rtype: List[SalesReportTopSellingProducts]
        """
        return self._least_selling_products

    @least_selling_products.setter
    def least_selling_products(self, least_selling_products: List[SalesReportTopSellingProducts]):
        """Sets the least_selling_products of this SalesReport.


        :param least_selling_products: The least_selling_products of this SalesReport.
        :type least_selling_products: List[SalesReportTopSellingProducts]
        """

        self._least_selling_products = least_selling_products

    @property
    def daily_breakdown(self) -> List[SalesReportDailyBreakdown]:
        """Gets the daily_breakdown of this SalesReport.


        :return: The daily_breakdown of this SalesReport.
        :rtype: List[SalesReportDailyBreakdown]
        """
        return self._daily_breakdown

    @daily_breakdown.setter
    def daily_breakdown(self, daily_breakdown: List[SalesReportDailyBreakdown]):
        """Sets the daily_breakdown of this SalesReport.


        :param daily_breakdown: The daily_breakdown of this SalesReport.
        :type daily_breakdown: List[SalesReportDailyBreakdown]
        """

        self._daily_breakdown = daily_breakdown
