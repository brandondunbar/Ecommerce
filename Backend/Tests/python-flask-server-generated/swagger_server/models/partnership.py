# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Partnership(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, partnership_id: int=None, partner_name: str=None, contact_person: str=None, contact_email: str=None, partnership_type: str=None, start_date: datetime=None, end_date: datetime=None, terms: str=None, benefits: str=None, is_active: bool=None):  # noqa: E501
        """Partnership - a model defined in Swagger

        :param partnership_id: The partnership_id of this Partnership.  # noqa: E501
        :type partnership_id: int
        :param partner_name: The partner_name of this Partnership.  # noqa: E501
        :type partner_name: str
        :param contact_person: The contact_person of this Partnership.  # noqa: E501
        :type contact_person: str
        :param contact_email: The contact_email of this Partnership.  # noqa: E501
        :type contact_email: str
        :param partnership_type: The partnership_type of this Partnership.  # noqa: E501
        :type partnership_type: str
        :param start_date: The start_date of this Partnership.  # noqa: E501
        :type start_date: datetime
        :param end_date: The end_date of this Partnership.  # noqa: E501
        :type end_date: datetime
        :param terms: The terms of this Partnership.  # noqa: E501
        :type terms: str
        :param benefits: The benefits of this Partnership.  # noqa: E501
        :type benefits: str
        :param is_active: The is_active of this Partnership.  # noqa: E501
        :type is_active: bool
        """
        self.swagger_types = {
            'partnership_id': int,
            'partner_name': str,
            'contact_person': str,
            'contact_email': str,
            'partnership_type': str,
            'start_date': datetime,
            'end_date': datetime,
            'terms': str,
            'benefits': str,
            'is_active': bool
        }

        self.attribute_map = {
            'partnership_id': 'partnershipId',
            'partner_name': 'partnerName',
            'contact_person': 'contactPerson',
            'contact_email': 'contactEmail',
            'partnership_type': 'partnershipType',
            'start_date': 'startDate',
            'end_date': 'endDate',
            'terms': 'terms',
            'benefits': 'benefits',
            'is_active': 'isActive'
        }
        self._partnership_id = partnership_id
        self._partner_name = partner_name
        self._contact_person = contact_person
        self._contact_email = contact_email
        self._partnership_type = partnership_type
        self._start_date = start_date
        self._end_date = end_date
        self._terms = terms
        self._benefits = benefits
        self._is_active = is_active

    @classmethod
    def from_dict(cls, dikt) -> 'Partnership':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Partnership of this Partnership.  # noqa: E501
        :rtype: Partnership
        """
        return util.deserialize_model(dikt, cls)

    @property
    def partnership_id(self) -> int:
        """Gets the partnership_id of this Partnership.

        Unique identifier for the partnership.  # noqa: E501

        :return: The partnership_id of this Partnership.
        :rtype: int
        """
        return self._partnership_id

    @partnership_id.setter
    def partnership_id(self, partnership_id: int):
        """Sets the partnership_id of this Partnership.

        Unique identifier for the partnership.  # noqa: E501

        :param partnership_id: The partnership_id of this Partnership.
        :type partnership_id: int
        """
        if partnership_id is None:
            raise ValueError("Invalid value for `partnership_id`, must not be `None`")  # noqa: E501

        self._partnership_id = partnership_id

    @property
    def partner_name(self) -> str:
        """Gets the partner_name of this Partnership.

        Name of the partner organization or business.  # noqa: E501

        :return: The partner_name of this Partnership.
        :rtype: str
        """
        return self._partner_name

    @partner_name.setter
    def partner_name(self, partner_name: str):
        """Sets the partner_name of this Partnership.

        Name of the partner organization or business.  # noqa: E501

        :param partner_name: The partner_name of this Partnership.
        :type partner_name: str
        """
        if partner_name is None:
            raise ValueError("Invalid value for `partner_name`, must not be `None`")  # noqa: E501

        self._partner_name = partner_name

    @property
    def contact_person(self) -> str:
        """Gets the contact_person of this Partnership.

        Name of the primary contact person at the partner organization.  # noqa: E501

        :return: The contact_person of this Partnership.
        :rtype: str
        """
        return self._contact_person

    @contact_person.setter
    def contact_person(self, contact_person: str):
        """Sets the contact_person of this Partnership.

        Name of the primary contact person at the partner organization.  # noqa: E501

        :param contact_person: The contact_person of this Partnership.
        :type contact_person: str
        """

        self._contact_person = contact_person

    @property
    def contact_email(self) -> str:
        """Gets the contact_email of this Partnership.

        Email address for communication with the partner.  # noqa: E501

        :return: The contact_email of this Partnership.
        :rtype: str
        """
        return self._contact_email

    @contact_email.setter
    def contact_email(self, contact_email: str):
        """Sets the contact_email of this Partnership.

        Email address for communication with the partner.  # noqa: E501

        :param contact_email: The contact_email of this Partnership.
        :type contact_email: str
        """
        if contact_email is None:
            raise ValueError("Invalid value for `contact_email`, must not be `None`")  # noqa: E501

        self._contact_email = contact_email

    @property
    def partnership_type(self) -> str:
        """Gets the partnership_type of this Partnership.

        Type or nature of the partnership.  # noqa: E501

        :return: The partnership_type of this Partnership.
        :rtype: str
        """
        return self._partnership_type

    @partnership_type.setter
    def partnership_type(self, partnership_type: str):
        """Sets the partnership_type of this Partnership.

        Type or nature of the partnership.  # noqa: E501

        :param partnership_type: The partnership_type of this Partnership.
        :type partnership_type: str
        """
        allowed_values = ["Collaboration", "Integration", "Sponsorship", "Other"]  # noqa: E501
        if partnership_type not in allowed_values:
            raise ValueError(
                "Invalid value for `partnership_type` ({0}), must be one of {1}"
                .format(partnership_type, allowed_values)
            )

        self._partnership_type = partnership_type

    @property
    def start_date(self) -> datetime:
        """Gets the start_date of this Partnership.

        Date and time when the partnership agreement started.  # noqa: E501

        :return: The start_date of this Partnership.
        :rtype: datetime
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date: datetime):
        """Sets the start_date of this Partnership.

        Date and time when the partnership agreement started.  # noqa: E501

        :param start_date: The start_date of this Partnership.
        :type start_date: datetime
        """

        self._start_date = start_date

    @property
    def end_date(self) -> datetime:
        """Gets the end_date of this Partnership.

        Date and time when the partnership agreement is set to end.  # noqa: E501

        :return: The end_date of this Partnership.
        :rtype: datetime
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date: datetime):
        """Sets the end_date of this Partnership.

        Date and time when the partnership agreement is set to end.  # noqa: E501

        :param end_date: The end_date of this Partnership.
        :type end_date: datetime
        """

        self._end_date = end_date

    @property
    def terms(self) -> str:
        """Gets the terms of this Partnership.

        Detailed terms and conditions of the partnership.  # noqa: E501

        :return: The terms of this Partnership.
        :rtype: str
        """
        return self._terms

    @terms.setter
    def terms(self, terms: str):
        """Sets the terms of this Partnership.

        Detailed terms and conditions of the partnership.  # noqa: E501

        :param terms: The terms of this Partnership.
        :type terms: str
        """

        self._terms = terms

    @property
    def benefits(self) -> str:
        """Gets the benefits of this Partnership.

        Benefits accrued from the partnership, for both parties.  # noqa: E501

        :return: The benefits of this Partnership.
        :rtype: str
        """
        return self._benefits

    @benefits.setter
    def benefits(self, benefits: str):
        """Sets the benefits of this Partnership.

        Benefits accrued from the partnership, for both parties.  # noqa: E501

        :param benefits: The benefits of this Partnership.
        :type benefits: str
        """

        self._benefits = benefits

    @property
    def is_active(self) -> bool:
        """Gets the is_active of this Partnership.

        Indicates whether the partnership is currently active.  # noqa: E501

        :return: The is_active of this Partnership.
        :rtype: bool
        """
        return self._is_active

    @is_active.setter
    def is_active(self, is_active: bool):
        """Sets the is_active of this Partnership.

        Indicates whether the partnership is currently active.  # noqa: E501

        :param is_active: The is_active of this Partnership.
        :type is_active: bool
        """

        self._is_active = is_active
