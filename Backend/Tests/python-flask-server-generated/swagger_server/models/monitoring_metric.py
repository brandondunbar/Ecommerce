# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class MonitoringMetric(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, metric_id: int=None, metric_name: str=None, timestamp: datetime=None, value: float=None, unit: str=None, metadata: Dict=None):  # noqa: E501
        """MonitoringMetric - a model defined in Swagger

        :param metric_id: The metric_id of this MonitoringMetric.  # noqa: E501
        :type metric_id: int
        :param metric_name: The metric_name of this MonitoringMetric.  # noqa: E501
        :type metric_name: str
        :param timestamp: The timestamp of this MonitoringMetric.  # noqa: E501
        :type timestamp: datetime
        :param value: The value of this MonitoringMetric.  # noqa: E501
        :type value: float
        :param unit: The unit of this MonitoringMetric.  # noqa: E501
        :type unit: str
        :param metadata: The metadata of this MonitoringMetric.  # noqa: E501
        :type metadata: Dict
        """
        self.swagger_types = {
            'metric_id': int,
            'metric_name': str,
            'timestamp': datetime,
            'value': float,
            'unit': str,
            'metadata': Dict
        }

        self.attribute_map = {
            'metric_id': 'metricId',
            'metric_name': 'metricName',
            'timestamp': 'timestamp',
            'value': 'value',
            'unit': 'unit',
            'metadata': 'metadata'
        }
        self._metric_id = metric_id
        self._metric_name = metric_name
        self._timestamp = timestamp
        self._value = value
        self._unit = unit
        self._metadata = metadata

    @classmethod
    def from_dict(cls, dikt) -> 'MonitoringMetric':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The MonitoringMetric of this MonitoringMetric.  # noqa: E501
        :rtype: MonitoringMetric
        """
        return util.deserialize_model(dikt, cls)

    @property
    def metric_id(self) -> int:
        """Gets the metric_id of this MonitoringMetric.

        Unique identifier for the metric entry.  # noqa: E501

        :return: The metric_id of this MonitoringMetric.
        :rtype: int
        """
        return self._metric_id

    @metric_id.setter
    def metric_id(self, metric_id: int):
        """Sets the metric_id of this MonitoringMetric.

        Unique identifier for the metric entry.  # noqa: E501

        :param metric_id: The metric_id of this MonitoringMetric.
        :type metric_id: int
        """
        if metric_id is None:
            raise ValueError("Invalid value for `metric_id`, must not be `None`")  # noqa: E501

        self._metric_id = metric_id

    @property
    def metric_name(self) -> str:
        """Gets the metric_name of this MonitoringMetric.

        Name of the monitoring metric (e.g., \"CPU_Usage\", \"Response_Time\", \"Memory_Usage\").  # noqa: E501

        :return: The metric_name of this MonitoringMetric.
        :rtype: str
        """
        return self._metric_name

    @metric_name.setter
    def metric_name(self, metric_name: str):
        """Sets the metric_name of this MonitoringMetric.

        Name of the monitoring metric (e.g., \"CPU_Usage\", \"Response_Time\", \"Memory_Usage\").  # noqa: E501

        :param metric_name: The metric_name of this MonitoringMetric.
        :type metric_name: str
        """
        if metric_name is None:
            raise ValueError("Invalid value for `metric_name`, must not be `None`")  # noqa: E501

        self._metric_name = metric_name

    @property
    def timestamp(self) -> datetime:
        """Gets the timestamp of this MonitoringMetric.

        The exact time when the metric was measured.  # noqa: E501

        :return: The timestamp of this MonitoringMetric.
        :rtype: datetime
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp: datetime):
        """Sets the timestamp of this MonitoringMetric.

        The exact time when the metric was measured.  # noqa: E501

        :param timestamp: The timestamp of this MonitoringMetric.
        :type timestamp: datetime
        """
        if timestamp is None:
            raise ValueError("Invalid value for `timestamp`, must not be `None`")  # noqa: E501

        self._timestamp = timestamp

    @property
    def value(self) -> float:
        """Gets the value of this MonitoringMetric.

        The value of the monitoring metric, often a percentage, time in milliseconds, or other unit relevant to the metric.  # noqa: E501

        :return: The value of this MonitoringMetric.
        :rtype: float
        """
        return self._value

    @value.setter
    def value(self, value: float):
        """Sets the value of this MonitoringMetric.

        The value of the monitoring metric, often a percentage, time in milliseconds, or other unit relevant to the metric.  # noqa: E501

        :param value: The value of this MonitoringMetric.
        :type value: float
        """
        if value is None:
            raise ValueError("Invalid value for `value`, must not be `None`")  # noqa: E501

        self._value = value

    @property
    def unit(self) -> str:
        """Gets the unit of this MonitoringMetric.

        The unit of the metric value (e.g., \"%\", \"ms\", \"MB\").  # noqa: E501

        :return: The unit of this MonitoringMetric.
        :rtype: str
        """
        return self._unit

    @unit.setter
    def unit(self, unit: str):
        """Sets the unit of this MonitoringMetric.

        The unit of the metric value (e.g., \"%\", \"ms\", \"MB\").  # noqa: E501

        :param unit: The unit of this MonitoringMetric.
        :type unit: str
        """
        if unit is None:
            raise ValueError("Invalid value for `unit`, must not be `None`")  # noqa: E501

        self._unit = unit

    @property
    def metadata(self) -> Dict:
        """Gets the metadata of this MonitoringMetric.

        Any other relevant metadata associated with the metric, such as resource details or related system information.  # noqa: E501

        :return: The metadata of this MonitoringMetric.
        :rtype: Dict
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata: Dict):
        """Sets the metadata of this MonitoringMetric.

        Any other relevant metadata associated with the metric, such as resource details or related system information.  # noqa: E501

        :param metadata: The metadata of this MonitoringMetric.
        :type metadata: Dict
        """

        self._metadata = metadata
