# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.platform_settings_shipping_config import PlatformSettingsShippingConfig  # noqa: F401,E501
from swagger_server import util


class PlatformSettings(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, site_title: str=None, site_description: str=None, maintenance_mode: bool=None, default_currency: str=None, payment_methods: List[str]=None, shipping_config: PlatformSettingsShippingConfig=None, other_settings: Dict=None):  # noqa: E501
        """PlatformSettings - a model defined in Swagger

        :param site_title: The site_title of this PlatformSettings.  # noqa: E501
        :type site_title: str
        :param site_description: The site_description of this PlatformSettings.  # noqa: E501
        :type site_description: str
        :param maintenance_mode: The maintenance_mode of this PlatformSettings.  # noqa: E501
        :type maintenance_mode: bool
        :param default_currency: The default_currency of this PlatformSettings.  # noqa: E501
        :type default_currency: str
        :param payment_methods: The payment_methods of this PlatformSettings.  # noqa: E501
        :type payment_methods: List[str]
        :param shipping_config: The shipping_config of this PlatformSettings.  # noqa: E501
        :type shipping_config: PlatformSettingsShippingConfig
        :param other_settings: The other_settings of this PlatformSettings.  # noqa: E501
        :type other_settings: Dict
        """
        self.swagger_types = {
            'site_title': str,
            'site_description': str,
            'maintenance_mode': bool,
            'default_currency': str,
            'payment_methods': List[str],
            'shipping_config': PlatformSettingsShippingConfig,
            'other_settings': Dict
        }

        self.attribute_map = {
            'site_title': 'siteTitle',
            'site_description': 'siteDescription',
            'maintenance_mode': 'maintenanceMode',
            'default_currency': 'defaultCurrency',
            'payment_methods': 'paymentMethods',
            'shipping_config': 'shippingConfig',
            'other_settings': 'otherSettings'
        }
        self._site_title = site_title
        self._site_description = site_description
        self._maintenance_mode = maintenance_mode
        self._default_currency = default_currency
        self._payment_methods = payment_methods
        self._shipping_config = shipping_config
        self._other_settings = other_settings

    @classmethod
    def from_dict(cls, dikt) -> 'PlatformSettings':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The PlatformSettings of this PlatformSettings.  # noqa: E501
        :rtype: PlatformSettings
        """
        return util.deserialize_model(dikt, cls)

    @property
    def site_title(self) -> str:
        """Gets the site_title of this PlatformSettings.

        The title of the e-commerce site.  # noqa: E501

        :return: The site_title of this PlatformSettings.
        :rtype: str
        """
        return self._site_title

    @site_title.setter
    def site_title(self, site_title: str):
        """Sets the site_title of this PlatformSettings.

        The title of the e-commerce site.  # noqa: E501

        :param site_title: The site_title of this PlatformSettings.
        :type site_title: str
        """
        if site_title is None:
            raise ValueError("Invalid value for `site_title`, must not be `None`")  # noqa: E501

        self._site_title = site_title

    @property
    def site_description(self) -> str:
        """Gets the site_description of this PlatformSettings.

        A brief description or tagline for the platform.  # noqa: E501

        :return: The site_description of this PlatformSettings.
        :rtype: str
        """
        return self._site_description

    @site_description.setter
    def site_description(self, site_description: str):
        """Sets the site_description of this PlatformSettings.

        A brief description or tagline for the platform.  # noqa: E501

        :param site_description: The site_description of this PlatformSettings.
        :type site_description: str
        """
        if site_description is None:
            raise ValueError("Invalid value for `site_description`, must not be `None`")  # noqa: E501

        self._site_description = site_description

    @property
    def maintenance_mode(self) -> bool:
        """Gets the maintenance_mode of this PlatformSettings.

        Indicates if the site is in maintenance mode.  # noqa: E501

        :return: The maintenance_mode of this PlatformSettings.
        :rtype: bool
        """
        return self._maintenance_mode

    @maintenance_mode.setter
    def maintenance_mode(self, maintenance_mode: bool):
        """Sets the maintenance_mode of this PlatformSettings.

        Indicates if the site is in maintenance mode.  # noqa: E501

        :param maintenance_mode: The maintenance_mode of this PlatformSettings.
        :type maintenance_mode: bool
        """

        self._maintenance_mode = maintenance_mode

    @property
    def default_currency(self) -> str:
        """Gets the default_currency of this PlatformSettings.

        The default currency for product pricing and transactions.  # noqa: E501

        :return: The default_currency of this PlatformSettings.
        :rtype: str
        """
        return self._default_currency

    @default_currency.setter
    def default_currency(self, default_currency: str):
        """Sets the default_currency of this PlatformSettings.

        The default currency for product pricing and transactions.  # noqa: E501

        :param default_currency: The default_currency of this PlatformSettings.
        :type default_currency: str
        """

        self._default_currency = default_currency

    @property
    def payment_methods(self) -> List[str]:
        """Gets the payment_methods of this PlatformSettings.


        :return: The payment_methods of this PlatformSettings.
        :rtype: List[str]
        """
        return self._payment_methods

    @payment_methods.setter
    def payment_methods(self, payment_methods: List[str]):
        """Sets the payment_methods of this PlatformSettings.


        :param payment_methods: The payment_methods of this PlatformSettings.
        :type payment_methods: List[str]
        """

        self._payment_methods = payment_methods

    @property
    def shipping_config(self) -> PlatformSettingsShippingConfig:
        """Gets the shipping_config of this PlatformSettings.


        :return: The shipping_config of this PlatformSettings.
        :rtype: PlatformSettingsShippingConfig
        """
        return self._shipping_config

    @shipping_config.setter
    def shipping_config(self, shipping_config: PlatformSettingsShippingConfig):
        """Sets the shipping_config of this PlatformSettings.


        :param shipping_config: The shipping_config of this PlatformSettings.
        :type shipping_config: PlatformSettingsShippingConfig
        """

        self._shipping_config = shipping_config

    @property
    def other_settings(self) -> Dict:
        """Gets the other_settings of this PlatformSettings.

        Miscellaneous settings specific to the platform.  # noqa: E501

        :return: The other_settings of this PlatformSettings.
        :rtype: Dict
        """
        return self._other_settings

    @other_settings.setter
    def other_settings(self, other_settings: Dict):
        """Sets the other_settings of this PlatformSettings.

        Miscellaneous settings specific to the platform.  # noqa: E501

        :param other_settings: The other_settings of this PlatformSettings.
        :type other_settings: Dict
        """

        self._other_settings = other_settings
