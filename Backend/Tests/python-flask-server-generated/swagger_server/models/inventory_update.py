# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class InventoryUpdate(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, product_id: int=None, current_stock: int=None, restock_date: datetime=None, threshold: int=None, notes: str=None):  # noqa: E501
        """InventoryUpdate - a model defined in Swagger

        :param product_id: The product_id of this InventoryUpdate.  # noqa: E501
        :type product_id: int
        :param current_stock: The current_stock of this InventoryUpdate.  # noqa: E501
        :type current_stock: int
        :param restock_date: The restock_date of this InventoryUpdate.  # noqa: E501
        :type restock_date: datetime
        :param threshold: The threshold of this InventoryUpdate.  # noqa: E501
        :type threshold: int
        :param notes: The notes of this InventoryUpdate.  # noqa: E501
        :type notes: str
        """
        self.swagger_types = {
            'product_id': int,
            'current_stock': int,
            'restock_date': datetime,
            'threshold': int,
            'notes': str
        }

        self.attribute_map = {
            'product_id': 'productId',
            'current_stock': 'currentStock',
            'restock_date': 'restockDate',
            'threshold': 'threshold',
            'notes': 'notes'
        }
        self._product_id = product_id
        self._current_stock = current_stock
        self._restock_date = restock_date
        self._threshold = threshold
        self._notes = notes

    @classmethod
    def from_dict(cls, dikt) -> 'InventoryUpdate':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The InventoryUpdate of this InventoryUpdate.  # noqa: E501
        :rtype: InventoryUpdate
        """
        return util.deserialize_model(dikt, cls)

    @property
    def product_id(self) -> int:
        """Gets the product_id of this InventoryUpdate.

        Unique identifier for the product.  # noqa: E501

        :return: The product_id of this InventoryUpdate.
        :rtype: int
        """
        return self._product_id

    @product_id.setter
    def product_id(self, product_id: int):
        """Sets the product_id of this InventoryUpdate.

        Unique identifier for the product.  # noqa: E501

        :param product_id: The product_id of this InventoryUpdate.
        :type product_id: int
        """
        if product_id is None:
            raise ValueError("Invalid value for `product_id`, must not be `None`")  # noqa: E501

        self._product_id = product_id

    @property
    def current_stock(self) -> int:
        """Gets the current_stock of this InventoryUpdate.

        The updated stock level for the product.  # noqa: E501

        :return: The current_stock of this InventoryUpdate.
        :rtype: int
        """
        return self._current_stock

    @current_stock.setter
    def current_stock(self, current_stock: int):
        """Sets the current_stock of this InventoryUpdate.

        The updated stock level for the product.  # noqa: E501

        :param current_stock: The current_stock of this InventoryUpdate.
        :type current_stock: int
        """
        if current_stock is None:
            raise ValueError("Invalid value for `current_stock`, must not be `None`")  # noqa: E501

        self._current_stock = current_stock

    @property
    def restock_date(self) -> datetime:
        """Gets the restock_date of this InventoryUpdate.

        Optional date and time when the product was restocked.  # noqa: E501

        :return: The restock_date of this InventoryUpdate.
        :rtype: datetime
        """
        return self._restock_date

    @restock_date.setter
    def restock_date(self, restock_date: datetime):
        """Sets the restock_date of this InventoryUpdate.

        Optional date and time when the product was restocked.  # noqa: E501

        :param restock_date: The restock_date of this InventoryUpdate.
        :type restock_date: datetime
        """

        self._restock_date = restock_date

    @property
    def threshold(self) -> int:
        """Gets the threshold of this InventoryUpdate.

        Updated restock threshold. When the stock drops below this value, a restock might be necessary.  # noqa: E501

        :return: The threshold of this InventoryUpdate.
        :rtype: int
        """
        return self._threshold

    @threshold.setter
    def threshold(self, threshold: int):
        """Sets the threshold of this InventoryUpdate.

        Updated restock threshold. When the stock drops below this value, a restock might be necessary.  # noqa: E501

        :param threshold: The threshold of this InventoryUpdate.
        :type threshold: int
        """

        self._threshold = threshold

    @property
    def notes(self) -> str:
        """Gets the notes of this InventoryUpdate.

        Any additional notes or comments about the inventory update.  # noqa: E501

        :return: The notes of this InventoryUpdate.
        :rtype: str
        """
        return self._notes

    @notes.setter
    def notes(self, notes: str):
        """Sets the notes of this InventoryUpdate.

        Any additional notes or comments about the inventory update.  # noqa: E501

        :param notes: The notes of this InventoryUpdate.
        :type notes: str
        """

        self._notes = notes
