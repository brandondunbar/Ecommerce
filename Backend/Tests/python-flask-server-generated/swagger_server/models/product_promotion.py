# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class ProductPromotion(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, promotion_id: str=None, name: str=None, description: str=None, discount_type: str=None, discount_value: float=None, start_date: datetime=None, end_date: datetime=None, is_active: bool=None):  # noqa: E501
        """ProductPromotion - a model defined in Swagger

        :param promotion_id: The promotion_id of this ProductPromotion.  # noqa: E501
        :type promotion_id: str
        :param name: The name of this ProductPromotion.  # noqa: E501
        :type name: str
        :param description: The description of this ProductPromotion.  # noqa: E501
        :type description: str
        :param discount_type: The discount_type of this ProductPromotion.  # noqa: E501
        :type discount_type: str
        :param discount_value: The discount_value of this ProductPromotion.  # noqa: E501
        :type discount_value: float
        :param start_date: The start_date of this ProductPromotion.  # noqa: E501
        :type start_date: datetime
        :param end_date: The end_date of this ProductPromotion.  # noqa: E501
        :type end_date: datetime
        :param is_active: The is_active of this ProductPromotion.  # noqa: E501
        :type is_active: bool
        """
        self.swagger_types = {
            'promotion_id': str,
            'name': str,
            'description': str,
            'discount_type': str,
            'discount_value': float,
            'start_date': datetime,
            'end_date': datetime,
            'is_active': bool
        }

        self.attribute_map = {
            'promotion_id': 'promotionId',
            'name': 'name',
            'description': 'description',
            'discount_type': 'discountType',
            'discount_value': 'discountValue',
            'start_date': 'startDate',
            'end_date': 'endDate',
            'is_active': 'isActive'
        }
        self._promotion_id = promotion_id
        self._name = name
        self._description = description
        self._discount_type = discount_type
        self._discount_value = discount_value
        self._start_date = start_date
        self._end_date = end_date
        self._is_active = is_active

    @classmethod
    def from_dict(cls, dikt) -> 'ProductPromotion':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ProductPromotion of this ProductPromotion.  # noqa: E501
        :rtype: ProductPromotion
        """
        return util.deserialize_model(dikt, cls)

    @property
    def promotion_id(self) -> str:
        """Gets the promotion_id of this ProductPromotion.

        Unique identifier for the promotion.  # noqa: E501

        :return: The promotion_id of this ProductPromotion.
        :rtype: str
        """
        return self._promotion_id

    @promotion_id.setter
    def promotion_id(self, promotion_id: str):
        """Sets the promotion_id of this ProductPromotion.

        Unique identifier for the promotion.  # noqa: E501

        :param promotion_id: The promotion_id of this ProductPromotion.
        :type promotion_id: str
        """

        self._promotion_id = promotion_id

    @property
    def name(self) -> str:
        """Gets the name of this ProductPromotion.

        Name or title of the promotion.  # noqa: E501

        :return: The name of this ProductPromotion.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this ProductPromotion.

        Name or title of the promotion.  # noqa: E501

        :param name: The name of this ProductPromotion.
        :type name: str
        """

        self._name = name

    @property
    def description(self) -> str:
        """Gets the description of this ProductPromotion.

        Detailed description of the promotion.  # noqa: E501

        :return: The description of this ProductPromotion.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description: str):
        """Sets the description of this ProductPromotion.

        Detailed description of the promotion.  # noqa: E501

        :param description: The description of this ProductPromotion.
        :type description: str
        """

        self._description = description

    @property
    def discount_type(self) -> str:
        """Gets the discount_type of this ProductPromotion.

        Type of discount (percentage off or a fixed amount off).  # noqa: E501

        :return: The discount_type of this ProductPromotion.
        :rtype: str
        """
        return self._discount_type

    @discount_type.setter
    def discount_type(self, discount_type: str):
        """Sets the discount_type of this ProductPromotion.

        Type of discount (percentage off or a fixed amount off).  # noqa: E501

        :param discount_type: The discount_type of this ProductPromotion.
        :type discount_type: str
        """
        allowed_values = ["percentage", "fixed_amount"]  # noqa: E501
        if discount_type not in allowed_values:
            raise ValueError(
                "Invalid value for `discount_type` ({0}), must be one of {1}"
                .format(discount_type, allowed_values)
            )

        self._discount_type = discount_type

    @property
    def discount_value(self) -> float:
        """Gets the discount_value of this ProductPromotion.

        Value of the discount, based on the discountType.  # noqa: E501

        :return: The discount_value of this ProductPromotion.
        :rtype: float
        """
        return self._discount_value

    @discount_value.setter
    def discount_value(self, discount_value: float):
        """Sets the discount_value of this ProductPromotion.

        Value of the discount, based on the discountType.  # noqa: E501

        :param discount_value: The discount_value of this ProductPromotion.
        :type discount_value: float
        """

        self._discount_value = discount_value

    @property
    def start_date(self) -> datetime:
        """Gets the start_date of this ProductPromotion.

        Date and time when the promotion began.  # noqa: E501

        :return: The start_date of this ProductPromotion.
        :rtype: datetime
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date: datetime):
        """Sets the start_date of this ProductPromotion.

        Date and time when the promotion began.  # noqa: E501

        :param start_date: The start_date of this ProductPromotion.
        :type start_date: datetime
        """

        self._start_date = start_date

    @property
    def end_date(self) -> datetime:
        """Gets the end_date of this ProductPromotion.

        Date and time when the promotion ended or is set to end.  # noqa: E501

        :return: The end_date of this ProductPromotion.
        :rtype: datetime
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date: datetime):
        """Sets the end_date of this ProductPromotion.

        Date and time when the promotion ended or is set to end.  # noqa: E501

        :param end_date: The end_date of this ProductPromotion.
        :type end_date: datetime
        """

        self._end_date = end_date

    @property
    def is_active(self) -> bool:
        """Gets the is_active of this ProductPromotion.

        Flag indicating if the promotion is currently active.  # noqa: E501

        :return: The is_active of this ProductPromotion.
        :rtype: bool
        """
        return self._is_active

    @is_active.setter
    def is_active(self, is_active: bool):
        """Sets the is_active of this ProductPromotion.

        Flag indicating if the promotion is currently active.  # noqa: E501

        :param is_active: The is_active of this ProductPromotion.
        :type is_active: bool
        """

        self._is_active = is_active
