# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class ProductUpdate(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, product_id: int=None, name: str=None, price: float=None, inventory: int=None, description: str=None):  # noqa: E501
        """ProductUpdate - a model defined in Swagger

        :param product_id: The product_id of this ProductUpdate.  # noqa: E501
        :type product_id: int
        :param name: The name of this ProductUpdate.  # noqa: E501
        :type name: str
        :param price: The price of this ProductUpdate.  # noqa: E501
        :type price: float
        :param inventory: The inventory of this ProductUpdate.  # noqa: E501
        :type inventory: int
        :param description: The description of this ProductUpdate.  # noqa: E501
        :type description: str
        """
        self.swagger_types = {
            'product_id': int,
            'name': str,
            'price': float,
            'inventory': int,
            'description': str
        }

        self.attribute_map = {
            'product_id': 'productId',
            'name': 'name',
            'price': 'price',
            'inventory': 'inventory',
            'description': 'description'
        }
        self._product_id = product_id
        self._name = name
        self._price = price
        self._inventory = inventory
        self._description = description

    @classmethod
    def from_dict(cls, dikt) -> 'ProductUpdate':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ProductUpdate of this ProductUpdate.  # noqa: E501
        :rtype: ProductUpdate
        """
        return util.deserialize_model(dikt, cls)

    @property
    def product_id(self) -> int:
        """Gets the product_id of this ProductUpdate.

        ID of the product to be updated.  # noqa: E501

        :return: The product_id of this ProductUpdate.
        :rtype: int
        """
        return self._product_id

    @product_id.setter
    def product_id(self, product_id: int):
        """Sets the product_id of this ProductUpdate.

        ID of the product to be updated.  # noqa: E501

        :param product_id: The product_id of this ProductUpdate.
        :type product_id: int
        """

        self._product_id = product_id

    @property
    def name(self) -> str:
        """Gets the name of this ProductUpdate.

        Updated product name (if changed).  # noqa: E501

        :return: The name of this ProductUpdate.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this ProductUpdate.

        Updated product name (if changed).  # noqa: E501

        :param name: The name of this ProductUpdate.
        :type name: str
        """

        self._name = name

    @property
    def price(self) -> float:
        """Gets the price of this ProductUpdate.

        Updated price (if changed).  # noqa: E501

        :return: The price of this ProductUpdate.
        :rtype: float
        """
        return self._price

    @price.setter
    def price(self, price: float):
        """Sets the price of this ProductUpdate.

        Updated price (if changed).  # noqa: E501

        :param price: The price of this ProductUpdate.
        :type price: float
        """

        self._price = price

    @property
    def inventory(self) -> int:
        """Gets the inventory of this ProductUpdate.

        Updated inventory count (if changed).  # noqa: E501

        :return: The inventory of this ProductUpdate.
        :rtype: int
        """
        return self._inventory

    @inventory.setter
    def inventory(self, inventory: int):
        """Sets the inventory of this ProductUpdate.

        Updated inventory count (if changed).  # noqa: E501

        :param inventory: The inventory of this ProductUpdate.
        :type inventory: int
        """

        self._inventory = inventory

    @property
    def description(self) -> str:
        """Gets the description of this ProductUpdate.

        Updated product description (if changed).  # noqa: E501

        :return: The description of this ProductUpdate.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description: str):
        """Sets the description of this ProductUpdate.

        Updated product description (if changed).  # noqa: E501

        :param description: The description of this ProductUpdate.
        :type description: str
        """

        self._description = description
