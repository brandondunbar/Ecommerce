# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class ContentPage(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, page_id: int=None, title: str=None, slug: str=None, content: str=None, last_modified: datetime=None, author: str=None, meta_tags: List[str]=None, is_published: bool=None):  # noqa: E501
        """ContentPage - a model defined in Swagger

        :param page_id: The page_id of this ContentPage.  # noqa: E501
        :type page_id: int
        :param title: The title of this ContentPage.  # noqa: E501
        :type title: str
        :param slug: The slug of this ContentPage.  # noqa: E501
        :type slug: str
        :param content: The content of this ContentPage.  # noqa: E501
        :type content: str
        :param last_modified: The last_modified of this ContentPage.  # noqa: E501
        :type last_modified: datetime
        :param author: The author of this ContentPage.  # noqa: E501
        :type author: str
        :param meta_tags: The meta_tags of this ContentPage.  # noqa: E501
        :type meta_tags: List[str]
        :param is_published: The is_published of this ContentPage.  # noqa: E501
        :type is_published: bool
        """
        self.swagger_types = {
            'page_id': int,
            'title': str,
            'slug': str,
            'content': str,
            'last_modified': datetime,
            'author': str,
            'meta_tags': List[str],
            'is_published': bool
        }

        self.attribute_map = {
            'page_id': 'pageId',
            'title': 'title',
            'slug': 'slug',
            'content': 'content',
            'last_modified': 'lastModified',
            'author': 'author',
            'meta_tags': 'metaTags',
            'is_published': 'isPublished'
        }
        self._page_id = page_id
        self._title = title
        self._slug = slug
        self._content = content
        self._last_modified = last_modified
        self._author = author
        self._meta_tags = meta_tags
        self._is_published = is_published

    @classmethod
    def from_dict(cls, dikt) -> 'ContentPage':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ContentPage of this ContentPage.  # noqa: E501
        :rtype: ContentPage
        """
        return util.deserialize_model(dikt, cls)

    @property
    def page_id(self) -> int:
        """Gets the page_id of this ContentPage.

        Unique identifier for the content page.  # noqa: E501

        :return: The page_id of this ContentPage.
        :rtype: int
        """
        return self._page_id

    @page_id.setter
    def page_id(self, page_id: int):
        """Sets the page_id of this ContentPage.

        Unique identifier for the content page.  # noqa: E501

        :param page_id: The page_id of this ContentPage.
        :type page_id: int
        """
        if page_id is None:
            raise ValueError("Invalid value for `page_id`, must not be `None`")  # noqa: E501

        self._page_id = page_id

    @property
    def title(self) -> str:
        """Gets the title of this ContentPage.

        The title or heading of the content page.  # noqa: E501

        :return: The title of this ContentPage.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title: str):
        """Sets the title of this ContentPage.

        The title or heading of the content page.  # noqa: E501

        :param title: The title of this ContentPage.
        :type title: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")  # noqa: E501

        self._title = title

    @property
    def slug(self) -> str:
        """Gets the slug of this ContentPage.

        URL-friendly version of the title used for routing (e.g., \"about-us\", \"privacy-policy\").  # noqa: E501

        :return: The slug of this ContentPage.
        :rtype: str
        """
        return self._slug

    @slug.setter
    def slug(self, slug: str):
        """Sets the slug of this ContentPage.

        URL-friendly version of the title used for routing (e.g., \"about-us\", \"privacy-policy\").  # noqa: E501

        :param slug: The slug of this ContentPage.
        :type slug: str
        """
        if slug is None:
            raise ValueError("Invalid value for `slug`, must not be `None`")  # noqa: E501

        self._slug = slug

    @property
    def content(self) -> str:
        """Gets the content of this ContentPage.

        The main content of the page, typically in HTML or Markdown format.  # noqa: E501

        :return: The content of this ContentPage.
        :rtype: str
        """
        return self._content

    @content.setter
    def content(self, content: str):
        """Sets the content of this ContentPage.

        The main content of the page, typically in HTML or Markdown format.  # noqa: E501

        :param content: The content of this ContentPage.
        :type content: str
        """
        if content is None:
            raise ValueError("Invalid value for `content`, must not be `None`")  # noqa: E501

        self._content = content

    @property
    def last_modified(self) -> datetime:
        """Gets the last_modified of this ContentPage.

        Timestamp indicating the last time the page was updated.  # noqa: E501

        :return: The last_modified of this ContentPage.
        :rtype: datetime
        """
        return self._last_modified

    @last_modified.setter
    def last_modified(self, last_modified: datetime):
        """Sets the last_modified of this ContentPage.

        Timestamp indicating the last time the page was updated.  # noqa: E501

        :param last_modified: The last_modified of this ContentPage.
        :type last_modified: datetime
        """
        if last_modified is None:
            raise ValueError("Invalid value for `last_modified`, must not be `None`")  # noqa: E501

        self._last_modified = last_modified

    @property
    def author(self) -> str:
        """Gets the author of this ContentPage.

        The name or identifier of the person who last edited the page.  # noqa: E501

        :return: The author of this ContentPage.
        :rtype: str
        """
        return self._author

    @author.setter
    def author(self, author: str):
        """Sets the author of this ContentPage.

        The name or identifier of the person who last edited the page.  # noqa: E501

        :param author: The author of this ContentPage.
        :type author: str
        """

        self._author = author

    @property
    def meta_tags(self) -> List[str]:
        """Gets the meta_tags of this ContentPage.

        SEO-related meta tags associated with the page.  # noqa: E501

        :return: The meta_tags of this ContentPage.
        :rtype: List[str]
        """
        return self._meta_tags

    @meta_tags.setter
    def meta_tags(self, meta_tags: List[str]):
        """Sets the meta_tags of this ContentPage.

        SEO-related meta tags associated with the page.  # noqa: E501

        :param meta_tags: The meta_tags of this ContentPage.
        :type meta_tags: List[str]
        """

        self._meta_tags = meta_tags

    @property
    def is_published(self) -> bool:
        """Gets the is_published of this ContentPage.

        Indicates whether the page is live and accessible to users or in a draft state.  # noqa: E501

        :return: The is_published of this ContentPage.
        :rtype: bool
        """
        return self._is_published

    @is_published.setter
    def is_published(self, is_published: bool):
        """Sets the is_published of this ContentPage.

        Indicates whether the page is live and accessible to users or in a draft state.  # noqa: E501

        :param is_published: The is_published of this ContentPage.
        :type is_published: bool
        """

        self._is_published = is_published
