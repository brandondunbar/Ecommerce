# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class FeedbackUpdate(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, feedback_id: int=None, status: str=None, admin_comment: str=None):  # noqa: E501
        """FeedbackUpdate - a model defined in Swagger

        :param feedback_id: The feedback_id of this FeedbackUpdate.  # noqa: E501
        :type feedback_id: int
        :param status: The status of this FeedbackUpdate.  # noqa: E501
        :type status: str
        :param admin_comment: The admin_comment of this FeedbackUpdate.  # noqa: E501
        :type admin_comment: str
        """
        self.swagger_types = {
            'feedback_id': int,
            'status': str,
            'admin_comment': str
        }

        self.attribute_map = {
            'feedback_id': 'feedbackId',
            'status': 'status',
            'admin_comment': 'adminComment'
        }
        self._feedback_id = feedback_id
        self._status = status
        self._admin_comment = admin_comment

    @classmethod
    def from_dict(cls, dikt) -> 'FeedbackUpdate':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The FeedbackUpdate of this FeedbackUpdate.  # noqa: E501
        :rtype: FeedbackUpdate
        """
        return util.deserialize_model(dikt, cls)

    @property
    def feedback_id(self) -> int:
        """Gets the feedback_id of this FeedbackUpdate.

        Unique identifier for the feedback entry being updated.  # noqa: E501

        :return: The feedback_id of this FeedbackUpdate.
        :rtype: int
        """
        return self._feedback_id

    @feedback_id.setter
    def feedback_id(self, feedback_id: int):
        """Sets the feedback_id of this FeedbackUpdate.

        Unique identifier for the feedback entry being updated.  # noqa: E501

        :param feedback_id: The feedback_id of this FeedbackUpdate.
        :type feedback_id: int
        """
        if feedback_id is None:
            raise ValueError("Invalid value for `feedback_id`, must not be `None`")  # noqa: E501

        self._feedback_id = feedback_id

    @property
    def status(self) -> str:
        """Gets the status of this FeedbackUpdate.

        Updated status for the feedback.  # noqa: E501

        :return: The status of this FeedbackUpdate.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status: str):
        """Sets the status of this FeedbackUpdate.

        Updated status for the feedback.  # noqa: E501

        :param status: The status of this FeedbackUpdate.
        :type status: str
        """
        allowed_values = ["pending", "reviewed", "resolved"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def admin_comment(self) -> str:
        """Gets the admin_comment of this FeedbackUpdate.

        Comment or response from the administrator in relation to the feedback. This could be a resolution comment, feedback, or any other relevant note.  # noqa: E501

        :return: The admin_comment of this FeedbackUpdate.
        :rtype: str
        """
        return self._admin_comment

    @admin_comment.setter
    def admin_comment(self, admin_comment: str):
        """Sets the admin_comment of this FeedbackUpdate.

        Comment or response from the administrator in relation to the feedback. This could be a resolution comment, feedback, or any other relevant note.  # noqa: E501

        :param admin_comment: The admin_comment of this FeedbackUpdate.
        :type admin_comment: str
        """

        self._admin_comment = admin_comment
