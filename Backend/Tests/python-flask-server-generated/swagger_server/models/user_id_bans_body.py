# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class UserIdBansBody(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, reason: str=None, duration: datetime=None):  # noqa: E501
        """UserIdBansBody - a model defined in Swagger

        :param reason: The reason of this UserIdBansBody.  # noqa: E501
        :type reason: str
        :param duration: The duration of this UserIdBansBody.  # noqa: E501
        :type duration: datetime
        """
        self.swagger_types = {
            'reason': str,
            'duration': datetime
        }

        self.attribute_map = {
            'reason': 'reason',
            'duration': 'duration'
        }
        self._reason = reason
        self._duration = duration

    @classmethod
    def from_dict(cls, dikt) -> 'UserIdBansBody':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The userId_bans_body of this UserIdBansBody.  # noqa: E501
        :rtype: UserIdBansBody
        """
        return util.deserialize_model(dikt, cls)

    @property
    def reason(self) -> str:
        """Gets the reason of this UserIdBansBody.

        Reason for banning the user.  # noqa: E501

        :return: The reason of this UserIdBansBody.
        :rtype: str
        """
        return self._reason

    @reason.setter
    def reason(self, reason: str):
        """Sets the reason of this UserIdBansBody.

        Reason for banning the user.  # noqa: E501

        :param reason: The reason of this UserIdBansBody.
        :type reason: str
        """

        self._reason = reason

    @property
    def duration(self) -> datetime:
        """Gets the duration of this UserIdBansBody.

        Optional end date/time for the ban. If not provided, the ban is indefinite.  # noqa: E501

        :return: The duration of this UserIdBansBody.
        :rtype: datetime
        """
        return self._duration

    @duration.setter
    def duration(self, duration: datetime):
        """Sets the duration of this UserIdBansBody.

        Optional end date/time for the ban. If not provided, the ban is indefinite.  # noqa: E501

        :param duration: The duration of this UserIdBansBody.
        :type duration: datetime
        """

        self._duration = duration
