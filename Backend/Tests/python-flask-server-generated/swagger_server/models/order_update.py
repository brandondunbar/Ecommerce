# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class OrderUpdate(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, status: str=None, tracking_number: str=None, estimated_delivery_date: datetime=None, notes: str=None, cancel_reason: str=None, return_reason: str=None):  # noqa: E501
        """OrderUpdate - a model defined in Swagger

        :param status: The status of this OrderUpdate.  # noqa: E501
        :type status: str
        :param tracking_number: The tracking_number of this OrderUpdate.  # noqa: E501
        :type tracking_number: str
        :param estimated_delivery_date: The estimated_delivery_date of this OrderUpdate.  # noqa: E501
        :type estimated_delivery_date: datetime
        :param notes: The notes of this OrderUpdate.  # noqa: E501
        :type notes: str
        :param cancel_reason: The cancel_reason of this OrderUpdate.  # noqa: E501
        :type cancel_reason: str
        :param return_reason: The return_reason of this OrderUpdate.  # noqa: E501
        :type return_reason: str
        """
        self.swagger_types = {
            'status': str,
            'tracking_number': str,
            'estimated_delivery_date': datetime,
            'notes': str,
            'cancel_reason': str,
            'return_reason': str
        }

        self.attribute_map = {
            'status': 'status',
            'tracking_number': 'trackingNumber',
            'estimated_delivery_date': 'estimatedDeliveryDate',
            'notes': 'notes',
            'cancel_reason': 'cancelReason',
            'return_reason': 'returnReason'
        }
        self._status = status
        self._tracking_number = tracking_number
        self._estimated_delivery_date = estimated_delivery_date
        self._notes = notes
        self._cancel_reason = cancel_reason
        self._return_reason = return_reason

    @classmethod
    def from_dict(cls, dikt) -> 'OrderUpdate':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The OrderUpdate of this OrderUpdate.  # noqa: E501
        :rtype: OrderUpdate
        """
        return util.deserialize_model(dikt, cls)

    @property
    def status(self) -> str:
        """Gets the status of this OrderUpdate.

        The updated status of the order.  # noqa: E501

        :return: The status of this OrderUpdate.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status: str):
        """Sets the status of this OrderUpdate.

        The updated status of the order.  # noqa: E501

        :param status: The status of this OrderUpdate.
        :type status: str
        """
        allowed_values = ["pending", "processed", "shipped", "completed", "canceled", "returned"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def tracking_number(self) -> str:
        """Gets the tracking_number of this OrderUpdate.

        If the order is shipped, this field can be updated with the tracking number for the shipment.  # noqa: E501

        :return: The tracking_number of this OrderUpdate.
        :rtype: str
        """
        return self._tracking_number

    @tracking_number.setter
    def tracking_number(self, tracking_number: str):
        """Sets the tracking_number of this OrderUpdate.

        If the order is shipped, this field can be updated with the tracking number for the shipment.  # noqa: E501

        :param tracking_number: The tracking_number of this OrderUpdate.
        :type tracking_number: str
        """

        self._tracking_number = tracking_number

    @property
    def estimated_delivery_date(self) -> datetime:
        """Gets the estimated_delivery_date of this OrderUpdate.

        An updated estimated delivery date for the order.  # noqa: E501

        :return: The estimated_delivery_date of this OrderUpdate.
        :rtype: datetime
        """
        return self._estimated_delivery_date

    @estimated_delivery_date.setter
    def estimated_delivery_date(self, estimated_delivery_date: datetime):
        """Sets the estimated_delivery_date of this OrderUpdate.

        An updated estimated delivery date for the order.  # noqa: E501

        :param estimated_delivery_date: The estimated_delivery_date of this OrderUpdate.
        :type estimated_delivery_date: datetime
        """

        self._estimated_delivery_date = estimated_delivery_date

    @property
    def notes(self) -> str:
        """Gets the notes of this OrderUpdate.

        Any additional administrative notes or comments about the order.  # noqa: E501

        :return: The notes of this OrderUpdate.
        :rtype: str
        """
        return self._notes

    @notes.setter
    def notes(self, notes: str):
        """Sets the notes of this OrderUpdate.

        Any additional administrative notes or comments about the order.  # noqa: E501

        :param notes: The notes of this OrderUpdate.
        :type notes: str
        """

        self._notes = notes

    @property
    def cancel_reason(self) -> str:
        """Gets the cancel_reason of this OrderUpdate.

        If the order is canceled, a reason can be provided here.  # noqa: E501

        :return: The cancel_reason of this OrderUpdate.
        :rtype: str
        """
        return self._cancel_reason

    @cancel_reason.setter
    def cancel_reason(self, cancel_reason: str):
        """Sets the cancel_reason of this OrderUpdate.

        If the order is canceled, a reason can be provided here.  # noqa: E501

        :param cancel_reason: The cancel_reason of this OrderUpdate.
        :type cancel_reason: str
        """

        self._cancel_reason = cancel_reason

    @property
    def return_reason(self) -> str:
        """Gets the return_reason of this OrderUpdate.

        If the order is returned, a reason can be provided here.  # noqa: E501

        :return: The return_reason of this OrderUpdate.
        :rtype: str
        """
        return self._return_reason

    @return_reason.setter
    def return_reason(self, return_reason: str):
        """Sets the return_reason of this OrderUpdate.

        If the order is returned, a reason can be provided here.  # noqa: E501

        :param return_reason: The return_reason of this OrderUpdate.
        :type return_reason: str
        """

        self._return_reason = return_reason
