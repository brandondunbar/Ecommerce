# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Feedback(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, feedback_id: int=None, user_id: int=None, username: str=None, submission_date: datetime=None, type: str=None, title: str=None, description: str=None, status: str=None, admin_comment: str=None):  # noqa: E501
        """Feedback - a model defined in Swagger

        :param feedback_id: The feedback_id of this Feedback.  # noqa: E501
        :type feedback_id: int
        :param user_id: The user_id of this Feedback.  # noqa: E501
        :type user_id: int
        :param username: The username of this Feedback.  # noqa: E501
        :type username: str
        :param submission_date: The submission_date of this Feedback.  # noqa: E501
        :type submission_date: datetime
        :param type: The type of this Feedback.  # noqa: E501
        :type type: str
        :param title: The title of this Feedback.  # noqa: E501
        :type title: str
        :param description: The description of this Feedback.  # noqa: E501
        :type description: str
        :param status: The status of this Feedback.  # noqa: E501
        :type status: str
        :param admin_comment: The admin_comment of this Feedback.  # noqa: E501
        :type admin_comment: str
        """
        self.swagger_types = {
            'feedback_id': int,
            'user_id': int,
            'username': str,
            'submission_date': datetime,
            'type': str,
            'title': str,
            'description': str,
            'status': str,
            'admin_comment': str
        }

        self.attribute_map = {
            'feedback_id': 'feedbackId',
            'user_id': 'userId',
            'username': 'username',
            'submission_date': 'submissionDate',
            'type': 'type',
            'title': 'title',
            'description': 'description',
            'status': 'status',
            'admin_comment': 'adminComment'
        }
        self._feedback_id = feedback_id
        self._user_id = user_id
        self._username = username
        self._submission_date = submission_date
        self._type = type
        self._title = title
        self._description = description
        self._status = status
        self._admin_comment = admin_comment

    @classmethod
    def from_dict(cls, dikt) -> 'Feedback':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Feedback of this Feedback.  # noqa: E501
        :rtype: Feedback
        """
        return util.deserialize_model(dikt, cls)

    @property
    def feedback_id(self) -> int:
        """Gets the feedback_id of this Feedback.

        Unique identifier for the feedback entry.  # noqa: E501

        :return: The feedback_id of this Feedback.
        :rtype: int
        """
        return self._feedback_id

    @feedback_id.setter
    def feedback_id(self, feedback_id: int):
        """Sets the feedback_id of this Feedback.

        Unique identifier for the feedback entry.  # noqa: E501

        :param feedback_id: The feedback_id of this Feedback.
        :type feedback_id: int
        """
        if feedback_id is None:
            raise ValueError("Invalid value for `feedback_id`, must not be `None`")  # noqa: E501

        self._feedback_id = feedback_id

    @property
    def user_id(self) -> int:
        """Gets the user_id of this Feedback.

        Unique identifier for the user who submitted the feedback.  # noqa: E501

        :return: The user_id of this Feedback.
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id: int):
        """Sets the user_id of this Feedback.

        Unique identifier for the user who submitted the feedback.  # noqa: E501

        :param user_id: The user_id of this Feedback.
        :type user_id: int
        """
        if user_id is None:
            raise ValueError("Invalid value for `user_id`, must not be `None`")  # noqa: E501

        self._user_id = user_id

    @property
    def username(self) -> str:
        """Gets the username of this Feedback.

        Username of the user who submitted the feedback.  # noqa: E501

        :return: The username of this Feedback.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username: str):
        """Sets the username of this Feedback.

        Username of the user who submitted the feedback.  # noqa: E501

        :param username: The username of this Feedback.
        :type username: str
        """

        self._username = username

    @property
    def submission_date(self) -> datetime:
        """Gets the submission_date of this Feedback.

        The timestamp when the feedback was submitted.  # noqa: E501

        :return: The submission_date of this Feedback.
        :rtype: datetime
        """
        return self._submission_date

    @submission_date.setter
    def submission_date(self, submission_date: datetime):
        """Sets the submission_date of this Feedback.

        The timestamp when the feedback was submitted.  # noqa: E501

        :param submission_date: The submission_date of this Feedback.
        :type submission_date: datetime
        """
        if submission_date is None:
            raise ValueError("Invalid value for `submission_date`, must not be `None`")  # noqa: E501

        self._submission_date = submission_date

    @property
    def type(self) -> str:
        """Gets the type of this Feedback.

        The category or type of feedback.  # noqa: E501

        :return: The type of this Feedback.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type: str):
        """Sets the type of this Feedback.

        The category or type of feedback.  # noqa: E501

        :param type: The type of this Feedback.
        :type type: str
        """
        allowed_values = ["bug", "feature_request", "comment"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def title(self) -> str:
        """Gets the title of this Feedback.

        Brief title or headline for the feedback.  # noqa: E501

        :return: The title of this Feedback.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title: str):
        """Sets the title of this Feedback.

        Brief title or headline for the feedback.  # noqa: E501

        :param title: The title of this Feedback.
        :type title: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")  # noqa: E501

        self._title = title

    @property
    def description(self) -> str:
        """Gets the description of this Feedback.

        Detailed description of the feedback.  # noqa: E501

        :return: The description of this Feedback.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description: str):
        """Sets the description of this Feedback.

        Detailed description of the feedback.  # noqa: E501

        :param description: The description of this Feedback.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501

        self._description = description

    @property
    def status(self) -> str:
        """Gets the status of this Feedback.

        The current status of the feedback.  # noqa: E501

        :return: The status of this Feedback.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status: str):
        """Sets the status of this Feedback.

        The current status of the feedback.  # noqa: E501

        :param status: The status of this Feedback.
        :type status: str
        """
        allowed_values = ["pending", "reviewed", "resolved"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def admin_comment(self) -> str:
        """Gets the admin_comment of this Feedback.

        Optional comment from the administrator in response to the feedback.  # noqa: E501

        :return: The admin_comment of this Feedback.
        :rtype: str
        """
        return self._admin_comment

    @admin_comment.setter
    def admin_comment(self, admin_comment: str):
        """Sets the admin_comment of this Feedback.

        Optional comment from the administrator in response to the feedback.  # noqa: E501

        :param admin_comment: The admin_comment of this Feedback.
        :type admin_comment: str
        """

        self._admin_comment = admin_comment
