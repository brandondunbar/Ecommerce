# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class SystemLog(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, log_id: int=None, timestamp: datetime=None, log_level: str=None, event: str=None, message: str=None, metadata: Dict=None):  # noqa: E501
        """SystemLog - a model defined in Swagger

        :param log_id: The log_id of this SystemLog.  # noqa: E501
        :type log_id: int
        :param timestamp: The timestamp of this SystemLog.  # noqa: E501
        :type timestamp: datetime
        :param log_level: The log_level of this SystemLog.  # noqa: E501
        :type log_level: str
        :param event: The event of this SystemLog.  # noqa: E501
        :type event: str
        :param message: The message of this SystemLog.  # noqa: E501
        :type message: str
        :param metadata: The metadata of this SystemLog.  # noqa: E501
        :type metadata: Dict
        """
        self.swagger_types = {
            'log_id': int,
            'timestamp': datetime,
            'log_level': str,
            'event': str,
            'message': str,
            'metadata': Dict
        }

        self.attribute_map = {
            'log_id': 'logId',
            'timestamp': 'timestamp',
            'log_level': 'logLevel',
            'event': 'event',
            'message': 'message',
            'metadata': 'metadata'
        }
        self._log_id = log_id
        self._timestamp = timestamp
        self._log_level = log_level
        self._event = event
        self._message = message
        self._metadata = metadata

    @classmethod
    def from_dict(cls, dikt) -> 'SystemLog':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The SystemLog of this SystemLog.  # noqa: E501
        :rtype: SystemLog
        """
        return util.deserialize_model(dikt, cls)

    @property
    def log_id(self) -> int:
        """Gets the log_id of this SystemLog.

        Unique identifier for the log entry.  # noqa: E501

        :return: The log_id of this SystemLog.
        :rtype: int
        """
        return self._log_id

    @log_id.setter
    def log_id(self, log_id: int):
        """Sets the log_id of this SystemLog.

        Unique identifier for the log entry.  # noqa: E501

        :param log_id: The log_id of this SystemLog.
        :type log_id: int
        """
        if log_id is None:
            raise ValueError("Invalid value for `log_id`, must not be `None`")  # noqa: E501

        self._log_id = log_id

    @property
    def timestamp(self) -> datetime:
        """Gets the timestamp of this SystemLog.

        The exact time when the event occurred.  # noqa: E501

        :return: The timestamp of this SystemLog.
        :rtype: datetime
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp: datetime):
        """Sets the timestamp of this SystemLog.

        The exact time when the event occurred.  # noqa: E501

        :param timestamp: The timestamp of this SystemLog.
        :type timestamp: datetime
        """
        if timestamp is None:
            raise ValueError("Invalid value for `timestamp`, must not be `None`")  # noqa: E501

        self._timestamp = timestamp

    @property
    def log_level(self) -> str:
        """Gets the log_level of this SystemLog.

        The severity or level of the log.  # noqa: E501

        :return: The log_level of this SystemLog.
        :rtype: str
        """
        return self._log_level

    @log_level.setter
    def log_level(self, log_level: str):
        """Sets the log_level of this SystemLog.

        The severity or level of the log.  # noqa: E501

        :param log_level: The log_level of this SystemLog.
        :type log_level: str
        """
        allowed_values = ["INFO", "ERROR", "WARNING", "DEBUG"]  # noqa: E501
        if log_level not in allowed_values:
            raise ValueError(
                "Invalid value for `log_level` ({0}), must be one of {1}"
                .format(log_level, allowed_values)
            )

        self._log_level = log_level

    @property
    def event(self) -> str:
        """Gets the event of this SystemLog.

        A brief description or identifier for the event or operation that triggered the log.  # noqa: E501

        :return: The event of this SystemLog.
        :rtype: str
        """
        return self._event

    @event.setter
    def event(self, event: str):
        """Sets the event of this SystemLog.

        A brief description or identifier for the event or operation that triggered the log.  # noqa: E501

        :param event: The event of this SystemLog.
        :type event: str
        """
        if event is None:
            raise ValueError("Invalid value for `event`, must not be `None`")  # noqa: E501

        self._event = event

    @property
    def message(self) -> str:
        """Gets the message of this SystemLog.

        Detailed description of the event or any additional information.  # noqa: E501

        :return: The message of this SystemLog.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message: str):
        """Sets the message of this SystemLog.

        Detailed description of the event or any additional information.  # noqa: E501

        :param message: The message of this SystemLog.
        :type message: str
        """
        if message is None:
            raise ValueError("Invalid value for `message`, must not be `None`")  # noqa: E501

        self._message = message

    @property
    def metadata(self) -> Dict:
        """Gets the metadata of this SystemLog.

        Any other relevant metadata associated with the log, such as request details, user information, or system state.  # noqa: E501

        :return: The metadata of this SystemLog.
        :rtype: Dict
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata: Dict):
        """Sets the metadata of this SystemLog.

        Any other relevant metadata associated with the log, such as request details, user information, or system state.  # noqa: E501

        :param metadata: The metadata of this SystemLog.
        :type metadata: Dict
        """

        self._metadata = metadata
