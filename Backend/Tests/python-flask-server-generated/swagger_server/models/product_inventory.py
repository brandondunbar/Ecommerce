# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class ProductInventory(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, stock_level: int=None, status: str=None, last_updated: datetime=None):  # noqa: E501
        """ProductInventory - a model defined in Swagger

        :param stock_level: The stock_level of this ProductInventory.  # noqa: E501
        :type stock_level: int
        :param status: The status of this ProductInventory.  # noqa: E501
        :type status: str
        :param last_updated: The last_updated of this ProductInventory.  # noqa: E501
        :type last_updated: datetime
        """
        self.swagger_types = {
            'stock_level': int,
            'status': str,
            'last_updated': datetime
        }

        self.attribute_map = {
            'stock_level': 'stockLevel',
            'status': 'status',
            'last_updated': 'lastUpdated'
        }
        self._stock_level = stock_level
        self._status = status
        self._last_updated = last_updated

    @classmethod
    def from_dict(cls, dikt) -> 'ProductInventory':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ProductInventory of this ProductInventory.  # noqa: E501
        :rtype: ProductInventory
        """
        return util.deserialize_model(dikt, cls)

    @property
    def stock_level(self) -> int:
        """Gets the stock_level of this ProductInventory.

        Current number of items in stock.  # noqa: E501

        :return: The stock_level of this ProductInventory.
        :rtype: int
        """
        return self._stock_level

    @stock_level.setter
    def stock_level(self, stock_level: int):
        """Sets the stock_level of this ProductInventory.

        Current number of items in stock.  # noqa: E501

        :param stock_level: The stock_level of this ProductInventory.
        :type stock_level: int
        """

        self._stock_level = stock_level

    @property
    def status(self) -> str:
        """Gets the status of this ProductInventory.

        Current inventory status.  # noqa: E501

        :return: The status of this ProductInventory.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status: str):
        """Sets the status of this ProductInventory.

        Current inventory status.  # noqa: E501

        :param status: The status of this ProductInventory.
        :type status: str
        """
        allowed_values = ["in_stock", "low_stock", "out_of_stock"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def last_updated(self) -> datetime:
        """Gets the last_updated of this ProductInventory.

        Date and time when the inventory was last updated.  # noqa: E501

        :return: The last_updated of this ProductInventory.
        :rtype: datetime
        """
        return self._last_updated

    @last_updated.setter
    def last_updated(self, last_updated: datetime):
        """Sets the last_updated of this ProductInventory.

        Date and time when the inventory was last updated.  # noqa: E501

        :param last_updated: The last_updated of this ProductInventory.
        :type last_updated: datetime
        """

        self._last_updated = last_updated
