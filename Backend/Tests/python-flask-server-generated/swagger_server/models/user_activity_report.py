# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.user_activity_report_daily_logins import UserActivityReportDailyLogins  # noqa: F401,E501
from swagger_server.models.user_activity_report_top_visited_pages import UserActivityReportTopVisitedPages  # noqa: F401,E501
from swagger_server import util


class UserActivityReport(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, start_date: date=None, end_date: date=None, total_users: int=None, active_users: int=None, average_session_duration: float=None, top_visited_pages: List[UserActivityReportTopVisitedPages]=None, daily_logins: List[UserActivityReportDailyLogins]=None):  # noqa: E501
        """UserActivityReport - a model defined in Swagger

        :param start_date: The start_date of this UserActivityReport.  # noqa: E501
        :type start_date: date
        :param end_date: The end_date of this UserActivityReport.  # noqa: E501
        :type end_date: date
        :param total_users: The total_users of this UserActivityReport.  # noqa: E501
        :type total_users: int
        :param active_users: The active_users of this UserActivityReport.  # noqa: E501
        :type active_users: int
        :param average_session_duration: The average_session_duration of this UserActivityReport.  # noqa: E501
        :type average_session_duration: float
        :param top_visited_pages: The top_visited_pages of this UserActivityReport.  # noqa: E501
        :type top_visited_pages: List[UserActivityReportTopVisitedPages]
        :param daily_logins: The daily_logins of this UserActivityReport.  # noqa: E501
        :type daily_logins: List[UserActivityReportDailyLogins]
        """
        self.swagger_types = {
            'start_date': date,
            'end_date': date,
            'total_users': int,
            'active_users': int,
            'average_session_duration': float,
            'top_visited_pages': List[UserActivityReportTopVisitedPages],
            'daily_logins': List[UserActivityReportDailyLogins]
        }

        self.attribute_map = {
            'start_date': 'startDate',
            'end_date': 'endDate',
            'total_users': 'totalUsers',
            'active_users': 'activeUsers',
            'average_session_duration': 'averageSessionDuration',
            'top_visited_pages': 'topVisitedPages',
            'daily_logins': 'dailyLogins'
        }
        self._start_date = start_date
        self._end_date = end_date
        self._total_users = total_users
        self._active_users = active_users
        self._average_session_duration = average_session_duration
        self._top_visited_pages = top_visited_pages
        self._daily_logins = daily_logins

    @classmethod
    def from_dict(cls, dikt) -> 'UserActivityReport':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The UserActivityReport of this UserActivityReport.  # noqa: E501
        :rtype: UserActivityReport
        """
        return util.deserialize_model(dikt, cls)

    @property
    def start_date(self) -> date:
        """Gets the start_date of this UserActivityReport.

        The start date for the report period.  # noqa: E501

        :return: The start_date of this UserActivityReport.
        :rtype: date
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date: date):
        """Sets the start_date of this UserActivityReport.

        The start date for the report period.  # noqa: E501

        :param start_date: The start_date of this UserActivityReport.
        :type start_date: date
        """
        if start_date is None:
            raise ValueError("Invalid value for `start_date`, must not be `None`")  # noqa: E501

        self._start_date = start_date

    @property
    def end_date(self) -> date:
        """Gets the end_date of this UserActivityReport.

        The end date for the report period.  # noqa: E501

        :return: The end_date of this UserActivityReport.
        :rtype: date
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date: date):
        """Sets the end_date of this UserActivityReport.

        The end date for the report period.  # noqa: E501

        :param end_date: The end_date of this UserActivityReport.
        :type end_date: date
        """
        if end_date is None:
            raise ValueError("Invalid value for `end_date`, must not be `None`")  # noqa: E501

        self._end_date = end_date

    @property
    def total_users(self) -> int:
        """Gets the total_users of this UserActivityReport.

        Total number of registered users on the platform.  # noqa: E501

        :return: The total_users of this UserActivityReport.
        :rtype: int
        """
        return self._total_users

    @total_users.setter
    def total_users(self, total_users: int):
        """Sets the total_users of this UserActivityReport.

        Total number of registered users on the platform.  # noqa: E501

        :param total_users: The total_users of this UserActivityReport.
        :type total_users: int
        """
        if total_users is None:
            raise ValueError("Invalid value for `total_users`, must not be `None`")  # noqa: E501

        self._total_users = total_users

    @property
    def active_users(self) -> int:
        """Gets the active_users of this UserActivityReport.

        Number of users who were active during the report period.  # noqa: E501

        :return: The active_users of this UserActivityReport.
        :rtype: int
        """
        return self._active_users

    @active_users.setter
    def active_users(self, active_users: int):
        """Sets the active_users of this UserActivityReport.

        Number of users who were active during the report period.  # noqa: E501

        :param active_users: The active_users of this UserActivityReport.
        :type active_users: int
        """
        if active_users is None:
            raise ValueError("Invalid value for `active_users`, must not be `None`")  # noqa: E501

        self._active_users = active_users

    @property
    def average_session_duration(self) -> float:
        """Gets the average_session_duration of this UserActivityReport.

        Average time (in minutes) a user spends on the platform per session.  # noqa: E501

        :return: The average_session_duration of this UserActivityReport.
        :rtype: float
        """
        return self._average_session_duration

    @average_session_duration.setter
    def average_session_duration(self, average_session_duration: float):
        """Sets the average_session_duration of this UserActivityReport.

        Average time (in minutes) a user spends on the platform per session.  # noqa: E501

        :param average_session_duration: The average_session_duration of this UserActivityReport.
        :type average_session_duration: float
        """
        if average_session_duration is None:
            raise ValueError("Invalid value for `average_session_duration`, must not be `None`")  # noqa: E501

        self._average_session_duration = average_session_duration

    @property
    def top_visited_pages(self) -> List[UserActivityReportTopVisitedPages]:
        """Gets the top_visited_pages of this UserActivityReport.


        :return: The top_visited_pages of this UserActivityReport.
        :rtype: List[UserActivityReportTopVisitedPages]
        """
        return self._top_visited_pages

    @top_visited_pages.setter
    def top_visited_pages(self, top_visited_pages: List[UserActivityReportTopVisitedPages]):
        """Sets the top_visited_pages of this UserActivityReport.


        :param top_visited_pages: The top_visited_pages of this UserActivityReport.
        :type top_visited_pages: List[UserActivityReportTopVisitedPages]
        """

        self._top_visited_pages = top_visited_pages

    @property
    def daily_logins(self) -> List[UserActivityReportDailyLogins]:
        """Gets the daily_logins of this UserActivityReport.


        :return: The daily_logins of this UserActivityReport.
        :rtype: List[UserActivityReportDailyLogins]
        """
        return self._daily_logins

    @daily_logins.setter
    def daily_logins(self, daily_logins: List[UserActivityReportDailyLogins]):
        """Sets the daily_logins of this UserActivityReport.


        :param daily_logins: The daily_logins of this UserActivityReport.
        :type daily_logins: List[UserActivityReportDailyLogins]
        """

        self._daily_logins = daily_logins
