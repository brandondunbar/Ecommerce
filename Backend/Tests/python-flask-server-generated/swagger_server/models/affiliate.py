# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Affiliate(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, affiliate_id: int=None, name: str=None, contact_email: str=None, referral_code: str=None, registration_date: datetime=None, total_referrals: int=None, successful_referrals: int=None, commission_earned: float=None, is_active: bool=None):  # noqa: E501
        """Affiliate - a model defined in Swagger

        :param affiliate_id: The affiliate_id of this Affiliate.  # noqa: E501
        :type affiliate_id: int
        :param name: The name of this Affiliate.  # noqa: E501
        :type name: str
        :param contact_email: The contact_email of this Affiliate.  # noqa: E501
        :type contact_email: str
        :param referral_code: The referral_code of this Affiliate.  # noqa: E501
        :type referral_code: str
        :param registration_date: The registration_date of this Affiliate.  # noqa: E501
        :type registration_date: datetime
        :param total_referrals: The total_referrals of this Affiliate.  # noqa: E501
        :type total_referrals: int
        :param successful_referrals: The successful_referrals of this Affiliate.  # noqa: E501
        :type successful_referrals: int
        :param commission_earned: The commission_earned of this Affiliate.  # noqa: E501
        :type commission_earned: float
        :param is_active: The is_active of this Affiliate.  # noqa: E501
        :type is_active: bool
        """
        self.swagger_types = {
            'affiliate_id': int,
            'name': str,
            'contact_email': str,
            'referral_code': str,
            'registration_date': datetime,
            'total_referrals': int,
            'successful_referrals': int,
            'commission_earned': float,
            'is_active': bool
        }

        self.attribute_map = {
            'affiliate_id': 'affiliateId',
            'name': 'name',
            'contact_email': 'contactEmail',
            'referral_code': 'referralCode',
            'registration_date': 'registrationDate',
            'total_referrals': 'totalReferrals',
            'successful_referrals': 'successfulReferrals',
            'commission_earned': 'commissionEarned',
            'is_active': 'isActive'
        }
        self._affiliate_id = affiliate_id
        self._name = name
        self._contact_email = contact_email
        self._referral_code = referral_code
        self._registration_date = registration_date
        self._total_referrals = total_referrals
        self._successful_referrals = successful_referrals
        self._commission_earned = commission_earned
        self._is_active = is_active

    @classmethod
    def from_dict(cls, dikt) -> 'Affiliate':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Affiliate of this Affiliate.  # noqa: E501
        :rtype: Affiliate
        """
        return util.deserialize_model(dikt, cls)

    @property
    def affiliate_id(self) -> int:
        """Gets the affiliate_id of this Affiliate.

        Unique identifier for the affiliate.  # noqa: E501

        :return: The affiliate_id of this Affiliate.
        :rtype: int
        """
        return self._affiliate_id

    @affiliate_id.setter
    def affiliate_id(self, affiliate_id: int):
        """Sets the affiliate_id of this Affiliate.

        Unique identifier for the affiliate.  # noqa: E501

        :param affiliate_id: The affiliate_id of this Affiliate.
        :type affiliate_id: int
        """
        if affiliate_id is None:
            raise ValueError("Invalid value for `affiliate_id`, must not be `None`")  # noqa: E501

        self._affiliate_id = affiliate_id

    @property
    def name(self) -> str:
        """Gets the name of this Affiliate.

        Full name or company name of the affiliate.  # noqa: E501

        :return: The name of this Affiliate.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this Affiliate.

        Full name or company name of the affiliate.  # noqa: E501

        :param name: The name of this Affiliate.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def contact_email(self) -> str:
        """Gets the contact_email of this Affiliate.

        Contact email address for the affiliate.  # noqa: E501

        :return: The contact_email of this Affiliate.
        :rtype: str
        """
        return self._contact_email

    @contact_email.setter
    def contact_email(self, contact_email: str):
        """Sets the contact_email of this Affiliate.

        Contact email address for the affiliate.  # noqa: E501

        :param contact_email: The contact_email of this Affiliate.
        :type contact_email: str
        """
        if contact_email is None:
            raise ValueError("Invalid value for `contact_email`, must not be `None`")  # noqa: E501

        self._contact_email = contact_email

    @property
    def referral_code(self) -> str:
        """Gets the referral_code of this Affiliate.

        Unique code used by the affiliate for referrals.  # noqa: E501

        :return: The referral_code of this Affiliate.
        :rtype: str
        """
        return self._referral_code

    @referral_code.setter
    def referral_code(self, referral_code: str):
        """Sets the referral_code of this Affiliate.

        Unique code used by the affiliate for referrals.  # noqa: E501

        :param referral_code: The referral_code of this Affiliate.
        :type referral_code: str
        """
        if referral_code is None:
            raise ValueError("Invalid value for `referral_code`, must not be `None`")  # noqa: E501

        self._referral_code = referral_code

    @property
    def registration_date(self) -> datetime:
        """Gets the registration_date of this Affiliate.

        Date and time when the affiliate was onboarded.  # noqa: E501

        :return: The registration_date of this Affiliate.
        :rtype: datetime
        """
        return self._registration_date

    @registration_date.setter
    def registration_date(self, registration_date: datetime):
        """Sets the registration_date of this Affiliate.

        Date and time when the affiliate was onboarded.  # noqa: E501

        :param registration_date: The registration_date of this Affiliate.
        :type registration_date: datetime
        """
        if registration_date is None:
            raise ValueError("Invalid value for `registration_date`, must not be `None`")  # noqa: E501

        self._registration_date = registration_date

    @property
    def total_referrals(self) -> int:
        """Gets the total_referrals of this Affiliate.

        Total number of referrals made by the affiliate.  # noqa: E501

        :return: The total_referrals of this Affiliate.
        :rtype: int
        """
        return self._total_referrals

    @total_referrals.setter
    def total_referrals(self, total_referrals: int):
        """Sets the total_referrals of this Affiliate.

        Total number of referrals made by the affiliate.  # noqa: E501

        :param total_referrals: The total_referrals of this Affiliate.
        :type total_referrals: int
        """

        self._total_referrals = total_referrals

    @property
    def successful_referrals(self) -> int:
        """Gets the successful_referrals of this Affiliate.

        Number of successful referrals that resulted in sales or signups.  # noqa: E501

        :return: The successful_referrals of this Affiliate.
        :rtype: int
        """
        return self._successful_referrals

    @successful_referrals.setter
    def successful_referrals(self, successful_referrals: int):
        """Sets the successful_referrals of this Affiliate.

        Number of successful referrals that resulted in sales or signups.  # noqa: E501

        :param successful_referrals: The successful_referrals of this Affiliate.
        :type successful_referrals: int
        """

        self._successful_referrals = successful_referrals

    @property
    def commission_earned(self) -> float:
        """Gets the commission_earned of this Affiliate.

        Total commission earned by the affiliate based on successful referrals.  # noqa: E501

        :return: The commission_earned of this Affiliate.
        :rtype: float
        """
        return self._commission_earned

    @commission_earned.setter
    def commission_earned(self, commission_earned: float):
        """Sets the commission_earned of this Affiliate.

        Total commission earned by the affiliate based on successful referrals.  # noqa: E501

        :param commission_earned: The commission_earned of this Affiliate.
        :type commission_earned: float
        """

        self._commission_earned = commission_earned

    @property
    def is_active(self) -> bool:
        """Gets the is_active of this Affiliate.

        Indicates whether the affiliate is currently active.  # noqa: E501

        :return: The is_active of this Affiliate.
        :rtype: bool
        """
        return self._is_active

    @is_active.setter
    def is_active(self, is_active: bool):
        """Sets the is_active of this Affiliate.

        Indicates whether the affiliate is currently active.  # noqa: E501

        :param is_active: The is_active of this Affiliate.
        :type is_active: bool
        """

        self._is_active = is_active
