# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class UsersNotificationsBody(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, action: str=None, notification_ids: List[int]=None):  # noqa: E501
        """UsersNotificationsBody - a model defined in Swagger

        :param action: The action of this UsersNotificationsBody.  # noqa: E501
        :type action: str
        :param notification_ids: The notification_ids of this UsersNotificationsBody.  # noqa: E501
        :type notification_ids: List[int]
        """
        self.swagger_types = {
            'action': str,
            'notification_ids': List[int]
        }

        self.attribute_map = {
            'action': 'action',
            'notification_ids': 'notificationIds'
        }
        self._action = action
        self._notification_ids = notification_ids

    @classmethod
    def from_dict(cls, dikt) -> 'UsersNotificationsBody':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The users_notifications_body of this UsersNotificationsBody.  # noqa: E501
        :rtype: UsersNotificationsBody
        """
        return util.deserialize_model(dikt, cls)

    @property
    def action(self) -> str:
        """Gets the action of this UsersNotificationsBody.

        Action to mark all notifications or selected ones as read.  # noqa: E501

        :return: The action of this UsersNotificationsBody.
        :rtype: str
        """
        return self._action

    @action.setter
    def action(self, action: str):
        """Sets the action of this UsersNotificationsBody.

        Action to mark all notifications or selected ones as read.  # noqa: E501

        :param action: The action of this UsersNotificationsBody.
        :type action: str
        """
        allowed_values = ["all", "selected"]  # noqa: E501
        if action not in allowed_values:
            raise ValueError(
                "Invalid value for `action` ({0}), must be one of {1}"
                .format(action, allowed_values)
            )

        self._action = action

    @property
    def notification_ids(self) -> List[int]:
        """Gets the notification_ids of this UsersNotificationsBody.

        List of notification IDs to mark as read (required if action is 'selected').  # noqa: E501

        :return: The notification_ids of this UsersNotificationsBody.
        :rtype: List[int]
        """
        return self._notification_ids

    @notification_ids.setter
    def notification_ids(self, notification_ids: List[int]):
        """Sets the notification_ids of this UsersNotificationsBody.

        List of notification IDs to mark as read (required if action is 'selected').  # noqa: E501

        :param notification_ids: The notification_ids of this UsersNotificationsBody.
        :type notification_ids: List[int]
        """

        self._notification_ids = notification_ids
