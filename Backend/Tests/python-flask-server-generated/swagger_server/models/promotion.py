# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Promotion(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, promotion_id: int=None, name: str=None, type: str=None, value: float=None, start_date: datetime=None, end_date: datetime=None, applicable_products: List[int]=None, notes: str=None, created_date: datetime=None, modified_date: datetime=None):  # noqa: E501
        """Promotion - a model defined in Swagger

        :param promotion_id: The promotion_id of this Promotion.  # noqa: E501
        :type promotion_id: int
        :param name: The name of this Promotion.  # noqa: E501
        :type name: str
        :param type: The type of this Promotion.  # noqa: E501
        :type type: str
        :param value: The value of this Promotion.  # noqa: E501
        :type value: float
        :param start_date: The start_date of this Promotion.  # noqa: E501
        :type start_date: datetime
        :param end_date: The end_date of this Promotion.  # noqa: E501
        :type end_date: datetime
        :param applicable_products: The applicable_products of this Promotion.  # noqa: E501
        :type applicable_products: List[int]
        :param notes: The notes of this Promotion.  # noqa: E501
        :type notes: str
        :param created_date: The created_date of this Promotion.  # noqa: E501
        :type created_date: datetime
        :param modified_date: The modified_date of this Promotion.  # noqa: E501
        :type modified_date: datetime
        """
        self.swagger_types = {
            'promotion_id': int,
            'name': str,
            'type': str,
            'value': float,
            'start_date': datetime,
            'end_date': datetime,
            'applicable_products': List[int],
            'notes': str,
            'created_date': datetime,
            'modified_date': datetime
        }

        self.attribute_map = {
            'promotion_id': 'promotionId',
            'name': 'name',
            'type': 'type',
            'value': 'value',
            'start_date': 'startDate',
            'end_date': 'endDate',
            'applicable_products': 'applicableProducts',
            'notes': 'notes',
            'created_date': 'createdDate',
            'modified_date': 'modifiedDate'
        }
        self._promotion_id = promotion_id
        self._name = name
        self._type = type
        self._value = value
        self._start_date = start_date
        self._end_date = end_date
        self._applicable_products = applicable_products
        self._notes = notes
        self._created_date = created_date
        self._modified_date = modified_date

    @classmethod
    def from_dict(cls, dikt) -> 'Promotion':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Promotion of this Promotion.  # noqa: E501
        :rtype: Promotion
        """
        return util.deserialize_model(dikt, cls)

    @property
    def promotion_id(self) -> int:
        """Gets the promotion_id of this Promotion.

        Unique identifier for the promotion.  # noqa: E501

        :return: The promotion_id of this Promotion.
        :rtype: int
        """
        return self._promotion_id

    @promotion_id.setter
    def promotion_id(self, promotion_id: int):
        """Sets the promotion_id of this Promotion.

        Unique identifier for the promotion.  # noqa: E501

        :param promotion_id: The promotion_id of this Promotion.
        :type promotion_id: int
        """
        if promotion_id is None:
            raise ValueError("Invalid value for `promotion_id`, must not be `None`")  # noqa: E501

        self._promotion_id = promotion_id

    @property
    def name(self) -> str:
        """Gets the name of this Promotion.

        Name or title of the promotion.  # noqa: E501

        :return: The name of this Promotion.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this Promotion.

        Name or title of the promotion.  # noqa: E501

        :param name: The name of this Promotion.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def type(self) -> str:
        """Gets the type of this Promotion.

        Type of promotion, e.g., percentage discount, flat discount, etc.  # noqa: E501

        :return: The type of this Promotion.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type: str):
        """Sets the type of this Promotion.

        Type of promotion, e.g., percentage discount, flat discount, etc.  # noqa: E501

        :param type: The type of this Promotion.
        :type type: str
        """
        allowed_values = ["percentage", "flat_discount", "buy_one_get_one", "other"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def value(self) -> float:
        """Gets the value of this Promotion.

        The value associated with the promotion. For example, if it's a percentage discount, this might be \"10\" for 10%.  # noqa: E501

        :return: The value of this Promotion.
        :rtype: float
        """
        return self._value

    @value.setter
    def value(self, value: float):
        """Sets the value of this Promotion.

        The value associated with the promotion. For example, if it's a percentage discount, this might be \"10\" for 10%.  # noqa: E501

        :param value: The value of this Promotion.
        :type value: float
        """
        if value is None:
            raise ValueError("Invalid value for `value`, must not be `None`")  # noqa: E501

        self._value = value

    @property
    def start_date(self) -> datetime:
        """Gets the start_date of this Promotion.

        Start date and time for when the promotion becomes active.  # noqa: E501

        :return: The start_date of this Promotion.
        :rtype: datetime
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date: datetime):
        """Sets the start_date of this Promotion.

        Start date and time for when the promotion becomes active.  # noqa: E501

        :param start_date: The start_date of this Promotion.
        :type start_date: datetime
        """
        if start_date is None:
            raise ValueError("Invalid value for `start_date`, must not be `None`")  # noqa: E501

        self._start_date = start_date

    @property
    def end_date(self) -> datetime:
        """Gets the end_date of this Promotion.

        End date and time for when the promotion expires.  # noqa: E501

        :return: The end_date of this Promotion.
        :rtype: datetime
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date: datetime):
        """Sets the end_date of this Promotion.

        End date and time for when the promotion expires.  # noqa: E501

        :param end_date: The end_date of this Promotion.
        :type end_date: datetime
        """
        if end_date is None:
            raise ValueError("Invalid value for `end_date`, must not be `None`")  # noqa: E501

        self._end_date = end_date

    @property
    def applicable_products(self) -> List[int]:
        """Gets the applicable_products of this Promotion.

        List of product IDs to which the promotion is applicable. If empty, it might be applicable to all products or specific categories.  # noqa: E501

        :return: The applicable_products of this Promotion.
        :rtype: List[int]
        """
        return self._applicable_products

    @applicable_products.setter
    def applicable_products(self, applicable_products: List[int]):
        """Sets the applicable_products of this Promotion.

        List of product IDs to which the promotion is applicable. If empty, it might be applicable to all products or specific categories.  # noqa: E501

        :param applicable_products: The applicable_products of this Promotion.
        :type applicable_products: List[int]
        """

        self._applicable_products = applicable_products

    @property
    def notes(self) -> str:
        """Gets the notes of this Promotion.

        Any additional notes or details about the promotion.  # noqa: E501

        :return: The notes of this Promotion.
        :rtype: str
        """
        return self._notes

    @notes.setter
    def notes(self, notes: str):
        """Sets the notes of this Promotion.

        Any additional notes or details about the promotion.  # noqa: E501

        :param notes: The notes of this Promotion.
        :type notes: str
        """

        self._notes = notes

    @property
    def created_date(self) -> datetime:
        """Gets the created_date of this Promotion.

        The date and time when the promotion was created.  # noqa: E501

        :return: The created_date of this Promotion.
        :rtype: datetime
        """
        return self._created_date

    @created_date.setter
    def created_date(self, created_date: datetime):
        """Sets the created_date of this Promotion.

        The date and time when the promotion was created.  # noqa: E501

        :param created_date: The created_date of this Promotion.
        :type created_date: datetime
        """

        self._created_date = created_date

    @property
    def modified_date(self) -> datetime:
        """Gets the modified_date of this Promotion.

        The last date and time when the promotion was updated.  # noqa: E501

        :return: The modified_date of this Promotion.
        :rtype: datetime
        """
        return self._modified_date

    @modified_date.setter
    def modified_date(self, modified_date: datetime):
        """Sets the modified_date of this Promotion.

        The last date and time when the promotion was updated.  # noqa: E501

        :param modified_date: The modified_date of this Promotion.
        :type modified_date: datetime
        """

        self._modified_date = modified_date
